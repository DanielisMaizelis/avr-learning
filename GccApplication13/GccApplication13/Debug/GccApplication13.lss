
GccApplication13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000303  00800100  00800100  00000326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000100e  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d1  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061c  00000000  00000000  00001de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00002404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a01  00000000  00000000  00002a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003456  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	24 e0       	ldi	r18, 0x04	; 4
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	cc d0       	rcall	.+408    	; 0x242 <main>
  aa:	01 c1       	rjmp	.+514    	; 0x2ae <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <ws2812_setleds>:
// undefine if you want to accept interrupts in that function.
#define interrupt_is_disabled
 
// Setleds for standard RGB 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
  ae:	fc 01       	movw	r30, r24
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
  b0:	9b 01       	movw	r18, r22
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	62 0f       	add	r22, r18
  b8:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	84 b9       	out	0x04, r24	; 4
  
  masklo	=~maskhi&ws2812_PORTREG;
  c0:	a5 b1       	in	r26, 0x05	; 5
  c2:	ab 7f       	andi	r26, 0xFB	; 251
  maskhi |=        ws2812_PORTREG;
  c4:	55 b1       	in	r21, 0x05	; 5
  c6:	54 60       	ori	r21, 0x04	; 4
  
  sreg_prev=SREG;
  c8:	bf b7       	in	r27, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();  
  ca:	f8 94       	cli
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <loop51+0x20>
#endif  

  while (datlen--) {
    curbyte=*data++;
  ce:	9f 01       	movw	r18, r30
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	40 81       	ld	r20, Z
    
    asm volatile(
  d6:	68 e0       	ldi	r22, 0x08	; 8

000000d8 <loop51>:
  d8:	55 b9       	out	0x05, r21	; 5
  da:	00 00       	nop
  dc:	07 f4       	brid	.+0      	; 0xde <loop51+0x6>
  de:	47 ff       	sbrs	r20, 7
  e0:	a5 b9       	out	0x05, r26	; 5
  e2:	44 0f       	add	r20, r20
  e4:	00 00       	nop
  e6:	07 f4       	brid	.+0      	; 0xe8 <loop51+0x10>
  e8:	07 f4       	brid	.+0      	; 0xea <loop51+0x12>
  ea:	07 f4       	brid	.+0      	; 0xec <loop51+0x14>
  ec:	a5 b9       	out	0x05, r26	; 5
  ee:	07 f4       	brid	.+0      	; 0xf0 <loop51+0x18>
  f0:	6a 95       	dec	r22
  f2:	91 f7       	brne	.-28     	; 0xd8 <loop51>
  sreg_prev=SREG;
#ifdef interrupt_is_disabled
  cli();  
#endif  

  while (datlen--) {
  f4:	bc 01       	movw	r22, r24
    curbyte=*data++;
  f6:	f9 01       	movw	r30, r18
  sreg_prev=SREG;
#ifdef interrupt_is_disabled
  cli();  
#endif  

  while (datlen--) {
  f8:	cb 01       	movw	r24, r22
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	67 2b       	or	r22, r23
  fe:	39 f7       	brne	.-50     	; 0xce <ws2812_setleds+0x20>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 100:	bf bf       	out	0x3f, r27	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f ea       	ldi	r24, 0xAF	; 175
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <loop51+0x2e>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <loop51+0x34>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <set_leds>:
	}
	set_leds(position,red,green,blue,x);
}

void set_leds(int position, int red, int green, int blue, int x)
{
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
	int corrected_position;
	if ((position>=17 && position<=32) || (position>=49 && position<=64) || (position>=81 && position<= 96) || (position>=113 && position<= 128) || (position>=145 && position<= 160) || (position>=177 && position<= 192) || (position>=209 && position<= 224) || (position>=241 && position<= 256))
 114:	dc 01       	movw	r26, r24
 116:	51 97       	sbiw	r26, 0x11	; 17
 118:	a0 31       	cpi	r26, 0x10	; 16
 11a:	b1 05       	cpc	r27, r1
 11c:	d8 f0       	brcs	.+54     	; 0x154 <set_leds+0x44>
 11e:	90 97       	sbiw	r26, 0x20	; 32
 120:	a0 31       	cpi	r26, 0x10	; 16
 122:	b1 05       	cpc	r27, r1
 124:	b8 f0       	brcs	.+46     	; 0x154 <set_leds+0x44>
 126:	90 97       	sbiw	r26, 0x20	; 32
 128:	a0 31       	cpi	r26, 0x10	; 16
 12a:	b1 05       	cpc	r27, r1
 12c:	98 f0       	brcs	.+38     	; 0x154 <set_leds+0x44>
 12e:	90 97       	sbiw	r26, 0x20	; 32
 130:	a0 31       	cpi	r26, 0x10	; 16
 132:	b1 05       	cpc	r27, r1
 134:	78 f0       	brcs	.+30     	; 0x154 <set_leds+0x44>
 136:	90 97       	sbiw	r26, 0x20	; 32
 138:	a0 31       	cpi	r26, 0x10	; 16
 13a:	b1 05       	cpc	r27, r1
 13c:	58 f0       	brcs	.+22     	; 0x154 <set_leds+0x44>
 13e:	90 97       	sbiw	r26, 0x20	; 32
 140:	a0 31       	cpi	r26, 0x10	; 16
 142:	b1 05       	cpc	r27, r1
 144:	38 f0       	brcs	.+14     	; 0x154 <set_leds+0x44>
 146:	90 97       	sbiw	r26, 0x20	; 32
 148:	a0 31       	cpi	r26, 0x10	; 16
 14a:	b1 05       	cpc	r27, r1
 14c:	18 f0       	brcs	.+6      	; 0x154 <set_leds+0x44>
 14e:	90 97       	sbiw	r26, 0x20	; 32
 150:	50 97       	sbiw	r26, 0x10	; 16
 152:	a0 f4       	brcc	.+40     	; 0x17c <set_leds+0x6c>
	{
		if(x>0)
 154:	10 16       	cp	r1, r16
 156:	11 06       	cpc	r1, r17
 158:	44 f4       	brge	.+16     	; 0x16a <set_leds+0x5a>
		{
			corrected_position = position-(x*2-1);
 15a:	00 0f       	add	r16, r16
 15c:	11 1f       	adc	r17, r17
 15e:	01 50       	subi	r16, 0x01	; 1
 160:	11 09       	sbc	r17, r1
 162:	fc 01       	movw	r30, r24
 164:	e0 1b       	sub	r30, r16
 166:	f1 0b       	sbc	r31, r17
 168:	09 c0       	rjmp	.+18     	; 0x17c <set_leds+0x6c>
		}
		else
		{	
			corrected_position = position+((x*-1)*2-1);
 16a:	ee 27       	eor	r30, r30
 16c:	ff 27       	eor	r31, r31
 16e:	e0 1b       	sub	r30, r16
 170:	f1 0b       	sbc	r31, r17
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	e8 0f       	add	r30, r24
 17a:	f9 1f       	adc	r31, r25
		}
	}
	corrected_position-=1;
 17c:	31 97       	sbiw	r30, 0x01	; 1
	led[corrected_position].r=red;led[corrected_position].g=green;led[corrected_position].b=blue;    // Write red to array
 17e:	cf 01       	movw	r24, r30
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	e8 0f       	add	r30, r24
 186:	f9 1f       	adc	r31, r25
 188:	e0 50       	subi	r30, 0x00	; 0
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	61 83       	std	Z+1, r22	; 0x01
 18e:	40 83       	st	Z, r20
 190:	22 83       	std	Z+2, r18	; 0x02
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <coordinates>:
	
}


void coordinates(int x, int y, int red, int green, int blue )
{
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	da 01       	movw	r26, r20
 19e:	a9 01       	movw	r20, r18
 1a0:	98 01       	movw	r18, r16
	int position;
	
	if(x>0 && y<0)
 1a2:	18 16       	cp	r1, r24
 1a4:	19 06       	cpc	r1, r25
 1a6:	7c f4       	brge	.+30     	; 0x1c6 <coordinates+0x2e>
 1a8:	77 23       	and	r23, r23
 1aa:	6c f4       	brge	.+26     	; 0x1c6 <coordinates+0x2e>
	{
		position = 8+x+(8-(y*-1))*16;
 1ac:	68 5f       	subi	r22, 0xF8	; 248
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	62 95       	swap	r22
 1b2:	72 95       	swap	r23
 1b4:	70 7f       	andi	r23, 0xF0	; 240
 1b6:	76 27       	eor	r23, r22
 1b8:	60 7f       	andi	r22, 0xF0	; 240
 1ba:	76 27       	eor	r23, r22
 1bc:	fc 01       	movw	r30, r24
 1be:	38 96       	adiw	r30, 0x08	; 8
 1c0:	e6 0f       	add	r30, r22
 1c2:	f7 1f       	adc	r31, r23
 1c4:	37 c0       	rjmp	.+110    	; 0x234 <coordinates+0x9c>
	}
	else if (x<0 && y>0)
 1c6:	99 23       	and	r25, r25
 1c8:	8c f4       	brge	.+34     	; 0x1ec <coordinates+0x54>
 1ca:	16 16       	cp	r1, r22
 1cc:	17 06       	cpc	r1, r23
 1ce:	74 f4       	brge	.+28     	; 0x1ec <coordinates+0x54>
	{
		position = 129+8-(x*-1)+(y-1)*16;
 1d0:	fb 01       	movw	r30, r22
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	e2 95       	swap	r30
 1d6:	f2 95       	swap	r31
 1d8:	f0 7f       	andi	r31, 0xF0	; 240
 1da:	fe 27       	eor	r31, r30
 1dc:	e0 7f       	andi	r30, 0xF0	; 240
 1de:	fe 27       	eor	r31, r30
 1e0:	bc 01       	movw	r22, r24
 1e2:	67 57       	subi	r22, 0x77	; 119
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	e6 0f       	add	r30, r22
 1e8:	f7 1f       	adc	r31, r23
 1ea:	24 c0       	rjmp	.+72     	; 0x234 <coordinates+0x9c>
	}
	else if (x<0 && y<0)
 1ec:	99 23       	and	r25, r25
 1ee:	7c f4       	brge	.+30     	; 0x20e <coordinates+0x76>
 1f0:	77 23       	and	r23, r23
 1f2:	6c f4       	brge	.+26     	; 0x20e <coordinates+0x76>
	{
		position =9-(x*-1)+(8-(y*-1))* 16;
 1f4:	68 5f       	subi	r22, 0xF8	; 248
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255
 1f8:	62 95       	swap	r22
 1fa:	72 95       	swap	r23
 1fc:	70 7f       	andi	r23, 0xF0	; 240
 1fe:	76 27       	eor	r23, r22
 200:	60 7f       	andi	r22, 0xF0	; 240
 202:	76 27       	eor	r23, r22
 204:	fc 01       	movw	r30, r24
 206:	39 96       	adiw	r30, 0x09	; 9
 208:	e6 0f       	add	r30, r22
 20a:	f7 1f       	adc	r31, r23
 20c:	13 c0       	rjmp	.+38     	; 0x234 <coordinates+0x9c>
	}
	else if (x>0 && y>0)
 20e:	18 16       	cp	r1, r24
 210:	19 06       	cpc	r1, r25
 212:	84 f4       	brge	.+32     	; 0x234 <coordinates+0x9c>
 214:	16 16       	cp	r1, r22
 216:	17 06       	cpc	r1, r23
 218:	6c f4       	brge	.+26     	; 0x234 <coordinates+0x9c>
	{
		position= 136+x+(y-1)*16;
 21a:	fb 01       	movw	r30, r22
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	e2 95       	swap	r30
 220:	f2 95       	swap	r31
 222:	f0 7f       	andi	r31, 0xF0	; 240
 224:	fe 27       	eor	r31, r30
 226:	e0 7f       	andi	r30, 0xF0	; 240
 228:	fe 27       	eor	r31, r30
 22a:	bc 01       	movw	r22, r24
 22c:	68 57       	subi	r22, 0x78	; 120
 22e:	7f 4f       	sbci	r23, 0xFF	; 255
 230:	e6 0f       	add	r30, r22
 232:	f7 1f       	adc	r31, r23
	}
	set_leds(position,red,green,blue,x);
 234:	8c 01       	movw	r16, r24
 236:	bd 01       	movw	r22, r26
 238:	cf 01       	movw	r24, r30
 23a:	6a df       	rcall	.-300    	; 0x110 <set_leds>
}
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <main>:
#include "light_ws2812.h"

struct cRGB led[257];

int main(void)
{
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
		ws2812_setleds(led,256);
		_delay_ms(00);                         // wait for 500ms.
	  }
  }*/

	coordinates(2,2,0,0,255);
 246:	0f ef       	ldi	r16, 0xFF	; 255
 248:	10 e0       	ldi	r17, 0x00	; 0
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	9e df       	rcall	.-196    	; 0x198 <coordinates>
	coordinates(-3,-3,0,255,0);
 25c:	00 e0       	ldi	r16, 0x00	; 0
 25e:	10 e0       	ldi	r17, 0x00	; 0
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	6d ef       	ldi	r22, 0xFD	; 253
 26a:	7f ef       	ldi	r23, 0xFF	; 255
 26c:	8d ef       	ldi	r24, 0xFD	; 253
 26e:	9f ef       	ldi	r25, 0xFF	; 255
 270:	93 df       	rcall	.-218    	; 0x198 <coordinates>
	coordinates(8,-8,255,0,0);
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	4f ef       	ldi	r20, 0xFF	; 255
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	68 ef       	ldi	r22, 0xF8	; 248
 27c:	7f ef       	ldi	r23, 0xFF	; 255
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	8a df       	rcall	.-236    	; 0x198 <coordinates>
	coordinates(-1,-1,0,0,255);
 284:	0f ef       	ldi	r16, 0xFF	; 255
 286:	10 e0       	ldi	r17, 0x00	; 0
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	6f ef       	ldi	r22, 0xFF	; 255
 292:	7f ef       	ldi	r23, 0xFF	; 255
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	9f ef       	ldi	r25, 0xFF	; 255
 298:	7f df       	rcall	.-258    	; 0x198 <coordinates>
	ws2812_setleds(led,256);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	71 e0       	ldi	r23, 0x01	; 1
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	05 df       	rcall	.-502    	; 0xae <ws2812_setleds>
	
}
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
