
GccApplication15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e4  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c9  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a4  00000000  00000000  00001165  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000403  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000108  00000000  00000000  00001993  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 98 00 	call	0x130	; 0x130 <main>
  88:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
//---------------------------------------------------------------------------------


// Interrupts:
ISR(TIMER0_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	counterTimer0++;
  9c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counterTimer0>
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <counterTimer0>

	if(counterTimer0 >= TIM0_1SECOND && tim0Flag)
  a6:	8d 33       	cpi	r24, 0x3D	; 61
  a8:	40 f0       	brcs	.+16     	; 0xba <__vector_16+0x2a>
  aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tim0Flag>
  ae:	88 23       	and	r24, r24
  b0:	21 f0       	breq	.+8      	; 0xba <__vector_16+0x2a>
	{
		counterTimer0 = 0;
  b2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counterTimer0>
		tim0Flag = 0;
  b6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tim0Flag>
	}
	if(counterTimer0 >= TIM0_1SECOND && !tim0Flag)
  ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counterTimer0>
  be:	8d 33       	cpi	r24, 0x3D	; 61
  c0:	48 f0       	brcs	.+18     	; 0xd4 <__vector_16+0x44>
  c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tim0Flag>
  c6:	81 11       	cpse	r24, r1
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <__vector_16+0x44>
	{
		counterTimer0 = 0;
  ca:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counterTimer0>
		tim0Flag = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tim0Flag>
	}
}
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
	counterTimer1++;
  ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counterTimer1>
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counterTimer1>

	if(counterTimer1 >= TIM1_1SECOND && tim1Flag)
  f6:	8e 31       	cpi	r24, 0x1E	; 30
  f8:	40 f0       	brcs	.+16     	; 0x10a <__vector_13+0x2a>
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	88 23       	and	r24, r24
 100:	21 f0       	breq	.+8      	; 0x10a <__vector_13+0x2a>
	{
		counterTimer1 = 0;
 102:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counterTimer1>
		tim1Flag = 0;
 106:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(counterTimer1 >= TIM1_1SECOND && !tim1Flag)
 10a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counterTimer1>
 10e:	8e 31       	cpi	r24, 0x1E	; 30
 110:	48 f0       	brcs	.+18     	; 0x124 <__vector_13+0x44>
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	81 11       	cpse	r24, r1
 118:	05 c0       	rjmp	.+10     	; 0x124 <__vector_13+0x44>
	{
		counterTimer1 = 0;
 11a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counterTimer1>
		tim1Flag = 1;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <main>:
int main(void)
{
	//turnLEDsStep1();
	//blinkLED();
	
	DDRB  |= 0b00110000;
 130:	84 b1       	in	r24, 0x04	; 4
 132:	80 63       	ori	r24, 0x30	; 48
 134:	84 b9       	out	0x04, r24	; 4
	
	// To set a timer 0, I need to turn on a pre-scaler to CS00 and CS02 to 1024	
	TCNT0	= 0;					 // Begins the counter from 0
 136:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1<<CS02)|(1<<CS00);   // Sets the pre-scaler
 138:	85 b5       	in	r24, 0x25	; 37
 13a:	85 60       	ori	r24, 0x05	; 5
 13c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);			 // Enables overflow
 13e:	ee e6       	ldi	r30, 0x6E	; 110
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	81 60       	ori	r24, 0x01	; 1
 146:	80 83       	st	Z, r24
	
	// To set a timer 1, I need to turn on a pre-scaler to 8
	TCNT1	= 0;
 148:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 14c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B |= (1<<CS11);
 150:	e1 e8       	ldi	r30, 0x81	; 129
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	82 60       	ori	r24, 0x02	; 2
 158:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1);
 15a:	ef e6       	ldi	r30, 0x6F	; 111
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	
	// Make it a rising edge
	
	

	sei();							// Enables all interrupt settings
 164:	78 94       	sei
	
	
    while (1) 
    {
		if(tim0Flag)
 166:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tim0Flag>
 16a:	88 23       	and	r24, r24
 16c:	21 f0       	breq	.+8      	; 0x176 <main+0x46>
		{
			PORTB |= (1<<RIGHT_LED);
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	80 62       	ori	r24, 0x20	; 32
 172:	85 b9       	out	0x05, r24	; 5
 174:	02 c0       	rjmp	.+4      	; 0x17a <main+0x4a>
		}
		else
		{
			PORTB &= 0x00;
 176:	85 b1       	in	r24, 0x05	; 5
 178:	15 b8       	out	0x05, r1	; 5
		}
		if(tim1Flag)
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	88 23       	and	r24, r24
 180:	21 f0       	breq	.+8      	; 0x18a <main+0x5a>
		{
			PORTB |= (1<<LEFT_LED);
 182:	85 b1       	in	r24, 0x05	; 5
 184:	80 61       	ori	r24, 0x10	; 16
 186:	85 b9       	out	0x05, r24	; 5
 188:	ee cf       	rjmp	.-36     	; 0x166 <main+0x36>
		}
		else
		{
			PORTB &= 0x00;
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	15 b8       	out	0x05, r1	; 5
 18e:	eb cf       	rjmp	.-42     	; 0x166 <main+0x36>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
