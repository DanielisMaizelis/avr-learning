
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000998  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000849  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000370  00000000  00000000  00001769  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045f  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bd  00000000  00000000  00001fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	9f d0       	rcall	.+318    	; 0x1d8 <main>
  9a:	fd c1       	rjmp	.+1018   	; 0x496 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <toggle_leds>:
		pin = toggle_leds(random_value, 200);	
	}
}

int toggle_leds(int random_number, int delay)
{
  9e:	2f 92       	push	r2
  a0:	3f 92       	push	r3
  a2:	4f 92       	push	r4
  a4:	5f 92       	push	r5
  a6:	6f 92       	push	r6
  a8:	7f 92       	push	r7
  aa:	8f 92       	push	r8
  ac:	9f 92       	push	r9
  ae:	af 92       	push	r10
  b0:	bf 92       	push	r11
  b2:	cf 92       	push	r12
  b4:	df 92       	push	r13
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	5c 01       	movw	r10, r24
  c4:	4b 01       	movw	r8, r22
	int a = 0;
	int off = 0;
	for(int i=0; i<random_number; i++)
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d0 e0       	ldi	r29, 0x00	; 0
}

int toggle_leds(int random_number, int delay)
{
	int a = 0;
	int off = 0;
  ca:	21 2c       	mov	r2, r1
  cc:	31 2c       	mov	r3, r1
	}
}

int toggle_leds(int random_number, int delay)
{
	int a = 0;
  ce:	00 e0       	ldi	r16, 0x00	; 0
  d0:	10 e0       	ldi	r17, 0x00	; 0
	int off = 0;
	for(int i=0; i<random_number; i++)
  d2:	62 c0       	rjmp	.+196    	; 0x198 <toggle_leds+0xfa>
	{
		a++;
  d4:	0f 5f       	subi	r16, 0xFF	; 255
  d6:	1f 4f       	sbci	r17, 0xFF	; 255
		if(i%8 == 0)
  d8:	ce 01       	movw	r24, r28
  da:	87 70       	andi	r24, 0x07	; 7
  dc:	99 27       	eor	r25, r25
  de:	89 2b       	or	r24, r25
  e0:	71 f4       	brne	.+28     	; 0xfe <toggle_leds+0x60>
		{
			a = 0;
			delay*=1.4;
  e2:	b4 01       	movw	r22, r8
  e4:	99 0c       	add	r9, r9
  e6:	88 0b       	sbc	r24, r24
  e8:	99 0b       	sbc	r25, r25
  ea:	be d0       	rcall	.+380    	; 0x268 <__floatsisf>
  ec:	23 e3       	ldi	r18, 0x33	; 51
  ee:	33 e3       	ldi	r19, 0x33	; 51
  f0:	43 eb       	ldi	r20, 0xB3	; 179
  f2:	5f e3       	ldi	r21, 0x3F	; 63
  f4:	45 d1       	rcall	.+650    	; 0x380 <__mulsf3>
  f6:	85 d0       	rcall	.+266    	; 0x202 <__fixsfsi>
  f8:	4b 01       	movw	r8, r22
	for(int i=0; i<random_number; i++)
	{
		a++;
		if(i%8 == 0)
		{
			a = 0;
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	10 e0       	ldi	r17, 0x00	; 0
			delay*=1.4;
		}
		PORTA = (1<<a);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	00 2e       	mov	r0, r16
 104:	02 c0       	rjmp	.+4      	; 0x10a <toggle_leds+0x6c>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <toggle_leds+0x68>
 10e:	82 b9       	out	0x02, r24	; 2
		_delay_ms(delay);
 110:	b4 01       	movw	r22, r8
 112:	09 2c       	mov	r0, r9
 114:	00 0c       	add	r0, r0
 116:	88 0b       	sbc	r24, r24
 118:	99 0b       	sbc	r25, r25
 11a:	a6 d0       	rcall	.+332    	; 0x268 <__floatsisf>
 11c:	2b 01       	movw	r4, r22
 11e:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	4a e7       	ldi	r20, 0x7A	; 122
 126:	53 e4       	ldi	r21, 0x43	; 67
 128:	2b d1       	rcall	.+598    	; 0x380 <__mulsf3>
 12a:	6b 01       	movw	r12, r22
 12c:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	40 e8       	ldi	r20, 0x80	; 128
 134:	5f e3       	ldi	r21, 0x3F	; 63
 136:	61 d0       	rcall	.+194    	; 0x1fa <__cmpsf2>
 138:	88 23       	and	r24, r24
 13a:	04 f1       	brlt	.+64     	; 0x17c <toggle_leds+0xde>
 13c:	20 e0       	ldi	r18, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
 13e:	3f ef       	ldi	r19, 0xFF	; 255
 140:	4f e7       	ldi	r20, 0x7F	; 127
 142:	57 e4       	ldi	r21, 0x47	; 71
 144:	c7 01       	movw	r24, r14
 146:	b6 01       	movw	r22, r12
 148:	17 d1       	rcall	.+558    	; 0x378 <__gesf2>
 14a:	18 16       	cp	r1, r24
 14c:	9c f4       	brge	.+38     	; 0x174 <toggle_leds+0xd6>
 14e:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e2       	ldi	r20, 0x20	; 32
 154:	51 e4       	ldi	r21, 0x41	; 65
 156:	c3 01       	movw	r24, r6
 158:	b2 01       	movw	r22, r4
 15a:	12 d1       	rcall	.+548    	; 0x380 <__mulsf3>
 15c:	57 d0       	rcall	.+174    	; 0x20c <__fixunssfsi>
 15e:	06 c0       	rjmp	.+12     	; 0x16c <toggle_leds+0xce>
 160:	89 e1       	ldi	r24, 0x19	; 25
 162:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <toggle_leds+0xc6>
 168:	61 50       	subi	r22, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16a:	71 09       	sbc	r23, r1
 16c:	61 15       	cp	r22, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16e:	71 05       	cpc	r23, r1
 170:	b9 f7       	brne	.-18     	; 0x160 <toggle_leds+0xc2>
 172:	09 c0       	rjmp	.+18     	; 0x186 <toggle_leds+0xe8>
 174:	c7 01       	movw	r24, r14
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 176:	b6 01       	movw	r22, r12
 178:	49 d0       	rcall	.+146    	; 0x20c <__fixunssfsi>
 17a:	02 c0       	rjmp	.+4      	; 0x180 <toggle_leds+0xe2>
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	70 e0       	ldi	r23, 0x00	; 0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 180:	cb 01       	movw	r24, r22
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <toggle_leds+0xe4>
 186:	c5 01       	movw	r24, r10
 188:	01 97       	sbiw	r24, 0x01	; 1
		if(i== random_number-1)
 18a:	c8 17       	cp	r28, r24
 18c:	d9 07       	cpc	r29, r25
 18e:	19 f4       	brne	.+6      	; 0x196 <toggle_leds+0xf8>
 190:	22 24       	eor	r2, r2
 192:	23 94       	inc	r2
		{
			off = 1;
 194:	31 2c       	mov	r3, r1
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	ca 15       	cp	r28, r10

int toggle_leds(int random_number, int delay)
{
	int a = 0;
	int off = 0;
	for(int i=0; i<random_number; i++)
 19a:	db 05       	cpc	r29, r11
 19c:	0c f4       	brge	.+2      	; 0x1a0 <toggle_leds+0x102>
 19e:	9a cf       	rjmp	.-204    	; 0xd4 <toggle_leds+0x36>
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
		if(i== random_number-1)
		{
			off = 1;
		}	
	}
	PORTA = (1<<a);
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <toggle_leds+0x10c>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	0a 95       	dec	r16
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <toggle_leds+0x108>
 1ae:	82 b9       	out	0x02, r24	; 2
 1b0:	c1 01       	movw	r24, r2
 1b2:	df 91       	pop	r29
	return off;
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	ff 90       	pop	r15
 1bc:	ef 90       	pop	r14
 1be:	df 90       	pop	r13
 1c0:	cf 90       	pop	r12
 1c2:	bf 90       	pop	r11
 1c4:	af 90       	pop	r10
 1c6:	9f 90       	pop	r9
 1c8:	8f 90       	pop	r8
 1ca:	7f 90       	pop	r7
 1cc:	6f 90       	pop	r6
 1ce:	5f 90       	pop	r5
 1d0:	4f 90       	pop	r4
 1d2:	3f 90       	pop	r3
 1d4:	2f 90       	pop	r2
 1d6:	08 95       	ret

000001d8 <main>:
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	21 b9       	out	0x01, r18	; 1


int main(void)
{
	DDRA =  0b11111111;
	PORTA = 0b00000000;
 1dc:	12 b8       	out	0x02, r1	; 2
	DDRC = 0b00000000;
 1de:	17 b8       	out	0x07, r1	; 7
	PORTC = 0b00000001;
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	28 b9       	out	0x08, r18	; 8
		{
			PORTA = (1<<i);
			_delay_ms(delay);
			button1 = PINC & 0b00000001;
		}*/
	while(pin == 0)
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <main+0x18>
	{
		pin = toggle_leds(random_value, 200);	
 1e6:	68 ec       	ldi	r22, 0xC8	; 200
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	8c e3       	ldi	r24, 0x3C	; 60
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	57 df       	rcall	.-338    	; 0x9e <toggle_leds>
		{
			PORTA = (1<<i);
			_delay_ms(delay);
			button1 = PINC & 0b00000001;
		}*/
	while(pin == 0)
 1f0:	89 2b       	or	r24, r25
 1f2:	c9 f3       	breq	.-14     	; 0x1e6 <main+0xe>
	{
		pin = toggle_leds(random_value, 200);	
	}
}
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	08 95       	ret

000001fa <__cmpsf2>:
 1fa:	71 d0       	rcall	.+226    	; 0x2de <__fp_cmp>
 1fc:	08 f4       	brcc	.+2      	; 0x200 <__cmpsf2+0x6>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	08 95       	ret

00000202 <__fixsfsi>:
 202:	04 d0       	rcall	.+8      	; 0x20c <__fixunssfsi>
 204:	68 94       	set
 206:	b1 11       	cpse	r27, r1
 208:	b1 c0       	rjmp	.+354    	; 0x36c <__fp_szero>
 20a:	08 95       	ret

0000020c <__fixunssfsi>:
 20c:	94 d0       	rcall	.+296    	; 0x336 <__fp_splitA>
 20e:	88 f0       	brcs	.+34     	; 0x232 <__fixunssfsi+0x26>
 210:	9f 57       	subi	r25, 0x7F	; 127
 212:	90 f0       	brcs	.+36     	; 0x238 <__fixunssfsi+0x2c>
 214:	b9 2f       	mov	r27, r25
 216:	99 27       	eor	r25, r25
 218:	b7 51       	subi	r27, 0x17	; 23
 21a:	a0 f0       	brcs	.+40     	; 0x244 <__fixunssfsi+0x38>
 21c:	d1 f0       	breq	.+52     	; 0x252 <__fixunssfsi+0x46>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	88 1f       	adc	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	1a f0       	brmi	.+6      	; 0x22e <__fixunssfsi+0x22>
 228:	ba 95       	dec	r27
 22a:	c9 f7       	brne	.-14     	; 0x21e <__fixunssfsi+0x12>
 22c:	12 c0       	rjmp	.+36     	; 0x252 <__fixunssfsi+0x46>
 22e:	b1 30       	cpi	r27, 0x01	; 1
 230:	81 f0       	breq	.+32     	; 0x252 <__fixunssfsi+0x46>
 232:	9b d0       	rcall	.+310    	; 0x36a <__fp_zero>
 234:	b1 e0       	ldi	r27, 0x01	; 1
 236:	08 95       	ret
 238:	98 c0       	rjmp	.+304    	; 0x36a <__fp_zero>
 23a:	67 2f       	mov	r22, r23
 23c:	78 2f       	mov	r23, r24
 23e:	88 27       	eor	r24, r24
 240:	b8 5f       	subi	r27, 0xF8	; 248
 242:	39 f0       	breq	.+14     	; 0x252 <__fixunssfsi+0x46>
 244:	b9 3f       	cpi	r27, 0xF9	; 249
 246:	cc f3       	brlt	.-14     	; 0x23a <__fixunssfsi+0x2e>
 248:	86 95       	lsr	r24
 24a:	77 95       	ror	r23
 24c:	67 95       	ror	r22
 24e:	b3 95       	inc	r27
 250:	d9 f7       	brne	.-10     	; 0x248 <__fixunssfsi+0x3c>
 252:	3e f4       	brtc	.+14     	; 0x262 <__fixunssfsi+0x56>
 254:	90 95       	com	r25
 256:	80 95       	com	r24
 258:	70 95       	com	r23
 25a:	61 95       	neg	r22
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	8f 4f       	sbci	r24, 0xFF	; 255
 260:	9f 4f       	sbci	r25, 0xFF	; 255
 262:	08 95       	ret

00000264 <__floatunsisf>:
 264:	e8 94       	clt
 266:	09 c0       	rjmp	.+18     	; 0x27a <__floatsisf+0x12>

00000268 <__floatsisf>:
 268:	97 fb       	bst	r25, 7
 26a:	3e f4       	brtc	.+14     	; 0x27a <__floatsisf+0x12>
 26c:	90 95       	com	r25
 26e:	80 95       	com	r24
 270:	70 95       	com	r23
 272:	61 95       	neg	r22
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	8f 4f       	sbci	r24, 0xFF	; 255
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	99 23       	and	r25, r25
 27c:	a9 f0       	breq	.+42     	; 0x2a8 <__floatsisf+0x40>
 27e:	f9 2f       	mov	r31, r25
 280:	96 e9       	ldi	r25, 0x96	; 150
 282:	bb 27       	eor	r27, r27
 284:	93 95       	inc	r25
 286:	f6 95       	lsr	r31
 288:	87 95       	ror	r24
 28a:	77 95       	ror	r23
 28c:	67 95       	ror	r22
 28e:	b7 95       	ror	r27
 290:	f1 11       	cpse	r31, r1
 292:	f8 cf       	rjmp	.-16     	; 0x284 <__floatsisf+0x1c>
 294:	fa f4       	brpl	.+62     	; 0x2d4 <__floatsisf+0x6c>
 296:	bb 0f       	add	r27, r27
 298:	11 f4       	brne	.+4      	; 0x29e <__floatsisf+0x36>
 29a:	60 ff       	sbrs	r22, 0
 29c:	1b c0       	rjmp	.+54     	; 0x2d4 <__floatsisf+0x6c>
 29e:	6f 5f       	subi	r22, 0xFF	; 255
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255
 2a2:	8f 4f       	sbci	r24, 0xFF	; 255
 2a4:	9f 4f       	sbci	r25, 0xFF	; 255
 2a6:	16 c0       	rjmp	.+44     	; 0x2d4 <__floatsisf+0x6c>
 2a8:	88 23       	and	r24, r24
 2aa:	11 f0       	breq	.+4      	; 0x2b0 <__floatsisf+0x48>
 2ac:	96 e9       	ldi	r25, 0x96	; 150
 2ae:	11 c0       	rjmp	.+34     	; 0x2d2 <__floatsisf+0x6a>
 2b0:	77 23       	and	r23, r23
 2b2:	21 f0       	breq	.+8      	; 0x2bc <__floatsisf+0x54>
 2b4:	9e e8       	ldi	r25, 0x8E	; 142
 2b6:	87 2f       	mov	r24, r23
 2b8:	76 2f       	mov	r23, r22
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <__floatsisf+0x5e>
 2bc:	66 23       	and	r22, r22
 2be:	71 f0       	breq	.+28     	; 0x2dc <__floatsisf+0x74>
 2c0:	96 e8       	ldi	r25, 0x86	; 134
 2c2:	86 2f       	mov	r24, r22
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	2a f0       	brmi	.+10     	; 0x2d4 <__floatsisf+0x6c>
 2ca:	9a 95       	dec	r25
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	88 1f       	adc	r24, r24
 2d2:	da f7       	brpl	.-10     	; 0x2ca <__floatsisf+0x62>
 2d4:	88 0f       	add	r24, r24
 2d6:	96 95       	lsr	r25
 2d8:	87 95       	ror	r24
 2da:	97 f9       	bld	r25, 7
 2dc:	08 95       	ret

000002de <__fp_cmp>:
 2de:	99 0f       	add	r25, r25
 2e0:	00 08       	sbc	r0, r0
 2e2:	55 0f       	add	r21, r21
 2e4:	aa 0b       	sbc	r26, r26
 2e6:	e0 e8       	ldi	r30, 0x80	; 128
 2e8:	fe ef       	ldi	r31, 0xFE	; 254
 2ea:	16 16       	cp	r1, r22
 2ec:	17 06       	cpc	r1, r23
 2ee:	e8 07       	cpc	r30, r24
 2f0:	f9 07       	cpc	r31, r25
 2f2:	c0 f0       	brcs	.+48     	; 0x324 <__fp_cmp+0x46>
 2f4:	12 16       	cp	r1, r18
 2f6:	13 06       	cpc	r1, r19
 2f8:	e4 07       	cpc	r30, r20
 2fa:	f5 07       	cpc	r31, r21
 2fc:	98 f0       	brcs	.+38     	; 0x324 <__fp_cmp+0x46>
 2fe:	62 1b       	sub	r22, r18
 300:	73 0b       	sbc	r23, r19
 302:	84 0b       	sbc	r24, r20
 304:	95 0b       	sbc	r25, r21
 306:	39 f4       	brne	.+14     	; 0x316 <__fp_cmp+0x38>
 308:	0a 26       	eor	r0, r26
 30a:	61 f0       	breq	.+24     	; 0x324 <__fp_cmp+0x46>
 30c:	23 2b       	or	r18, r19
 30e:	24 2b       	or	r18, r20
 310:	25 2b       	or	r18, r21
 312:	21 f4       	brne	.+8      	; 0x31c <__fp_cmp+0x3e>
 314:	08 95       	ret
 316:	0a 26       	eor	r0, r26
 318:	09 f4       	brne	.+2      	; 0x31c <__fp_cmp+0x3e>
 31a:	a1 40       	sbci	r26, 0x01	; 1
 31c:	a6 95       	lsr	r26
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	81 1d       	adc	r24, r1
 322:	81 1d       	adc	r24, r1
 324:	08 95       	ret

00000326 <__fp_split3>:
 326:	57 fd       	sbrc	r21, 7
 328:	90 58       	subi	r25, 0x80	; 128
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	59 f0       	breq	.+22     	; 0x346 <__fp_splitA+0x10>
 330:	5f 3f       	cpi	r21, 0xFF	; 255
 332:	71 f0       	breq	.+28     	; 0x350 <__fp_splitA+0x1a>
 334:	47 95       	ror	r20

00000336 <__fp_splitA>:
 336:	88 0f       	add	r24, r24
 338:	97 fb       	bst	r25, 7
 33a:	99 1f       	adc	r25, r25
 33c:	61 f0       	breq	.+24     	; 0x356 <__fp_splitA+0x20>
 33e:	9f 3f       	cpi	r25, 0xFF	; 255
 340:	79 f0       	breq	.+30     	; 0x360 <__fp_splitA+0x2a>
 342:	87 95       	ror	r24
 344:	08 95       	ret
 346:	12 16       	cp	r1, r18
 348:	13 06       	cpc	r1, r19
 34a:	14 06       	cpc	r1, r20
 34c:	55 1f       	adc	r21, r21
 34e:	f2 cf       	rjmp	.-28     	; 0x334 <__fp_split3+0xe>
 350:	46 95       	lsr	r20
 352:	f1 df       	rcall	.-30     	; 0x336 <__fp_splitA>
 354:	08 c0       	rjmp	.+16     	; 0x366 <__fp_splitA+0x30>
 356:	16 16       	cp	r1, r22
 358:	17 06       	cpc	r1, r23
 35a:	18 06       	cpc	r1, r24
 35c:	99 1f       	adc	r25, r25
 35e:	f1 cf       	rjmp	.-30     	; 0x342 <__fp_splitA+0xc>
 360:	86 95       	lsr	r24
 362:	71 05       	cpc	r23, r1
 364:	61 05       	cpc	r22, r1
 366:	08 94       	sec
 368:	08 95       	ret

0000036a <__fp_zero>:
 36a:	e8 94       	clt

0000036c <__fp_szero>:
 36c:	bb 27       	eor	r27, r27
 36e:	66 27       	eor	r22, r22
 370:	77 27       	eor	r23, r23
 372:	cb 01       	movw	r24, r22
 374:	97 f9       	bld	r25, 7
 376:	08 95       	ret

00000378 <__gesf2>:
 378:	b2 df       	rcall	.-156    	; 0x2de <__fp_cmp>
 37a:	08 f4       	brcc	.+2      	; 0x37e <__gesf2+0x6>
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	08 95       	ret

00000380 <__mulsf3>:
 380:	0b d0       	rcall	.+22     	; 0x398 <__mulsf3x>
 382:	78 c0       	rjmp	.+240    	; 0x474 <__fp_round>
 384:	69 d0       	rcall	.+210    	; 0x458 <__fp_pscA>
 386:	28 f0       	brcs	.+10     	; 0x392 <__mulsf3+0x12>
 388:	6e d0       	rcall	.+220    	; 0x466 <__fp_pscB>
 38a:	18 f0       	brcs	.+6      	; 0x392 <__mulsf3+0x12>
 38c:	95 23       	and	r25, r21
 38e:	09 f0       	breq	.+2      	; 0x392 <__mulsf3+0x12>
 390:	5a c0       	rjmp	.+180    	; 0x446 <__fp_inf>
 392:	5f c0       	rjmp	.+190    	; 0x452 <__fp_nan>
 394:	11 24       	eor	r1, r1
 396:	ea cf       	rjmp	.-44     	; 0x36c <__fp_szero>

00000398 <__mulsf3x>:
 398:	c6 df       	rcall	.-116    	; 0x326 <__fp_split3>
 39a:	a0 f3       	brcs	.-24     	; 0x384 <__mulsf3+0x4>

0000039c <__mulsf3_pse>:
 39c:	95 9f       	mul	r25, r21
 39e:	d1 f3       	breq	.-12     	; 0x394 <__mulsf3+0x14>
 3a0:	95 0f       	add	r25, r21
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	55 1f       	adc	r21, r21
 3a6:	62 9f       	mul	r22, r18
 3a8:	f0 01       	movw	r30, r0
 3aa:	72 9f       	mul	r23, r18
 3ac:	bb 27       	eor	r27, r27
 3ae:	f0 0d       	add	r31, r0
 3b0:	b1 1d       	adc	r27, r1
 3b2:	63 9f       	mul	r22, r19
 3b4:	aa 27       	eor	r26, r26
 3b6:	f0 0d       	add	r31, r0
 3b8:	b1 1d       	adc	r27, r1
 3ba:	aa 1f       	adc	r26, r26
 3bc:	64 9f       	mul	r22, r20
 3be:	66 27       	eor	r22, r22
 3c0:	b0 0d       	add	r27, r0
 3c2:	a1 1d       	adc	r26, r1
 3c4:	66 1f       	adc	r22, r22
 3c6:	82 9f       	mul	r24, r18
 3c8:	22 27       	eor	r18, r18
 3ca:	b0 0d       	add	r27, r0
 3cc:	a1 1d       	adc	r26, r1
 3ce:	62 1f       	adc	r22, r18
 3d0:	73 9f       	mul	r23, r19
 3d2:	b0 0d       	add	r27, r0
 3d4:	a1 1d       	adc	r26, r1
 3d6:	62 1f       	adc	r22, r18
 3d8:	83 9f       	mul	r24, r19
 3da:	a0 0d       	add	r26, r0
 3dc:	61 1d       	adc	r22, r1
 3de:	22 1f       	adc	r18, r18
 3e0:	74 9f       	mul	r23, r20
 3e2:	33 27       	eor	r19, r19
 3e4:	a0 0d       	add	r26, r0
 3e6:	61 1d       	adc	r22, r1
 3e8:	23 1f       	adc	r18, r19
 3ea:	84 9f       	mul	r24, r20
 3ec:	60 0d       	add	r22, r0
 3ee:	21 1d       	adc	r18, r1
 3f0:	82 2f       	mov	r24, r18
 3f2:	76 2f       	mov	r23, r22
 3f4:	6a 2f       	mov	r22, r26
 3f6:	11 24       	eor	r1, r1
 3f8:	9f 57       	subi	r25, 0x7F	; 127
 3fa:	50 40       	sbci	r21, 0x00	; 0
 3fc:	8a f0       	brmi	.+34     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3fe:	e1 f0       	breq	.+56     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 400:	88 23       	and	r24, r24
 402:	4a f0       	brmi	.+18     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	bb 1f       	adc	r27, r27
 40a:	66 1f       	adc	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	88 1f       	adc	r24, r24
 410:	91 50       	subi	r25, 0x01	; 1
 412:	50 40       	sbci	r21, 0x00	; 0
 414:	a9 f7       	brne	.-22     	; 0x400 <__LOCK_REGION_LENGTH__>
 416:	9e 3f       	cpi	r25, 0xFE	; 254
 418:	51 05       	cpc	r21, r1
 41a:	70 f0       	brcs	.+28     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 41c:	14 c0       	rjmp	.+40     	; 0x446 <__fp_inf>
 41e:	a6 cf       	rjmp	.-180    	; 0x36c <__fp_szero>
 420:	5f 3f       	cpi	r21, 0xFF	; 255
 422:	ec f3       	brlt	.-6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 424:	98 3e       	cpi	r25, 0xE8	; 232
 426:	dc f3       	brlt	.-10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 428:	86 95       	lsr	r24
 42a:	77 95       	ror	r23
 42c:	67 95       	ror	r22
 42e:	b7 95       	ror	r27
 430:	f7 95       	ror	r31
 432:	e7 95       	ror	r30
 434:	9f 5f       	subi	r25, 0xFF	; 255
 436:	c1 f7       	brne	.-16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 438:	fe 2b       	or	r31, r30
 43a:	88 0f       	add	r24, r24
 43c:	91 1d       	adc	r25, r1
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	97 f9       	bld	r25, 7
 444:	08 95       	ret

00000446 <__fp_inf>:
 446:	97 f9       	bld	r25, 7
 448:	9f 67       	ori	r25, 0x7F	; 127
 44a:	80 e8       	ldi	r24, 0x80	; 128
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	08 95       	ret

00000452 <__fp_nan>:
 452:	9f ef       	ldi	r25, 0xFF	; 255
 454:	80 ec       	ldi	r24, 0xC0	; 192
 456:	08 95       	ret

00000458 <__fp_pscA>:
 458:	00 24       	eor	r0, r0
 45a:	0a 94       	dec	r0
 45c:	16 16       	cp	r1, r22
 45e:	17 06       	cpc	r1, r23
 460:	18 06       	cpc	r1, r24
 462:	09 06       	cpc	r0, r25
 464:	08 95       	ret

00000466 <__fp_pscB>:
 466:	00 24       	eor	r0, r0
 468:	0a 94       	dec	r0
 46a:	12 16       	cp	r1, r18
 46c:	13 06       	cpc	r1, r19
 46e:	14 06       	cpc	r1, r20
 470:	05 06       	cpc	r0, r21
 472:	08 95       	ret

00000474 <__fp_round>:
 474:	09 2e       	mov	r0, r25
 476:	03 94       	inc	r0
 478:	00 0c       	add	r0, r0
 47a:	11 f4       	brne	.+4      	; 0x480 <__fp_round+0xc>
 47c:	88 23       	and	r24, r24
 47e:	52 f0       	brmi	.+20     	; 0x494 <__fp_round+0x20>
 480:	bb 0f       	add	r27, r27
 482:	40 f4       	brcc	.+16     	; 0x494 <__fp_round+0x20>
 484:	bf 2b       	or	r27, r31
 486:	11 f4       	brne	.+4      	; 0x48c <__fp_round+0x18>
 488:	60 ff       	sbrs	r22, 0
 48a:	04 c0       	rjmp	.+8      	; 0x494 <__fp_round+0x20>
 48c:	6f 5f       	subi	r22, 0xFF	; 255
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	08 95       	ret

00000496 <_exit>:
 496:	f8 94       	cli

00000498 <__stop_program>:
 498:	ff cf       	rjmp	.-2      	; 0x498 <__stop_program>
