
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b3c  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000910  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038e  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000514  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000361  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000026a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	b3 d0       	rcall	.+358    	; 0x200 <main>
  9a:	13 c2       	rjmp	.+1062   	; 0x4c2 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_ZN6Toggle5startEv>:
        Delay = delay;
    }
	//Getter
	int get_delay() {return Delay;}
	// Start of the program
	void start()
  9e:	3f 92       	push	r3
  a0:	4f 92       	push	r4
  a2:	5f 92       	push	r5
  a4:	6f 92       	push	r6
  a6:	7f 92       	push	r7
  a8:	8f 92       	push	r8
  aa:	9f 92       	push	r9
  ac:	af 92       	push	r10
  ae:	bf 92       	push	r11
  b0:	cf 92       	push	r12
  b2:	df 92       	push	r13
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	6c 01       	movw	r12, r24
		bool state; // Pin for getting
		bool toggle = 0; // State for starting the toggle
		int random_value = 69; // Random value that should have been working commented below
		//srand(8);
		//int random_value = rand() % 7;
		DDRA =  0b11111111; // Pins for the LEDs 
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	81 b9       	out	0x01, r24	; 1
		PORTA = 0b00000000; // Pins for the LEDs 
  c6:	12 b8       	out	0x02, r1	; 2
		DDRC = 0b00000000; // Pin for the button1
  c8:	17 b8       	out	0x07, r1	; 7
		PINC = 0b00000001; // Pin for the button1
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	86 b9       	out	0x06, r24	; 6
		button1 = PINC & 0b00000001;
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	28 2f       	mov	r18, r24
  d2:	21 70       	andi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
		while(1) // This loop works until the button is pressed
		{
			if(button1 == 1)
  d6:	21 30       	cpi	r18, 0x01	; 1
  d8:	31 05       	cpc	r19, r1
  da:	29 f4       	brne	.+10     	; 0xe6 <_ZN6Toggle5startEv+0x48>
			{
				button1 = PINC & 0b00000001;
  dc:	86 b1       	in	r24, 0x06	; 6
  de:	28 2f       	mov	r18, r24
  e0:	21 70       	andi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
		DDRA =  0b11111111; // Pins for the LEDs 
		PORTA = 0b00000000; // Pins for the LEDs 
		DDRC = 0b00000000; // Pin for the button1
		PINC = 0b00000001; // Pin for the button1
		button1 = PINC & 0b00000001;
		while(1) // This loop works until the button is pressed
  e4:	f8 cf       	rjmp	.-16     	; 0xd6 <_ZN6Toggle5startEv+0x38>
				break;
			}
		}
		if (toggle == 1) // Changes the state to toggling LEDs
		{
			while(state == 0) // Stops the loop if the LEDs no longer run
  e6:	41 11       	cpse	r20, r1
  e8:	79 c0       	rjmp	.+242    	; 0x1dc <_ZN6Toggle5startEv+0x13e>
	Toggle(int delay) //Constructor for the Toggle class
    {
        Delay = delay;
    }
	//Getter
	int get_delay() {return Delay;}
  ea:	f6 01       	movw	r30, r12
  ec:	00 81       	ld	r16, Z
  ee:	11 81       	ldd	r17, Z+1	; 0x01
	// LEDs get toggled
	int toggle_leds(int random_number, int delay) // Method for toggling LEDs
	{
		int a = 0; // Counter for delay
		bool off = 0; // Indicator that the roulette has stopped
		for(int i=0; i<random_number; i++)
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	d0 e0       	ldi	r29, 0x00	; 0
	int Delay;
	// LEDs get toggled
	int toggle_leds(int random_number, int delay) // Method for toggling LEDs
	{
		int a = 0; // Counter for delay
		bool off = 0; // Indicator that the roulette has stopped
  f4:	31 2c       	mov	r3, r1
	private: // Inaccessible variables and/or methods
	int Delay;
	// LEDs get toggled
	int toggle_leds(int random_number, int delay) // Method for toggling LEDs
	{
		int a = 0; // Counter for delay
  f6:	e1 2c       	mov	r14, r1
  f8:	f1 2c       	mov	r15, r1
		bool off = 0; // Indicator that the roulette has stopped
		for(int i=0; i<random_number; i++)
  fa:	c5 34       	cpi	r28, 0x45	; 69
  fc:	d1 05       	cpc	r29, r1
  fe:	0c f0       	brlt	.+2      	; 0x102 <_ZN6Toggle5startEv+0x64>
 100:	60 c0       	rjmp	.+192    	; 0x1c2 <_ZN6Toggle5startEv+0x124>
		{
			a++; // Counts up to 8 to slow down the delay every time
 102:	ff ef       	ldi	r31, 0xFF	; 255
 104:	ef 1a       	sub	r14, r31
 106:	ff 0a       	sbc	r15, r31
			if(i%8 == 0)
 108:	ce 01       	movw	r24, r28
 10a:	87 70       	andi	r24, 0x07	; 7
 10c:	99 27       	eor	r25, r25
 10e:	89 2b       	or	r24, r25
 110:	71 f4       	brne	.+28     	; 0x12e <_ZN6Toggle5startEv+0x90>
			{
				a = 0; // Renews the LED in the roulette
				delay*=1.4; // Slows down the roulette every 8 LED flashes
 112:	b8 01       	movw	r22, r16
 114:	11 0f       	add	r17, r17
 116:	88 0b       	sbc	r24, r24
 118:	99 0b       	sbc	r25, r25
 11a:	bc d0       	rcall	.+376    	; 0x294 <__floatsisf>
 11c:	23 e3       	ldi	r18, 0x33	; 51
 11e:	33 e3       	ldi	r19, 0x33	; 51
 120:	43 eb       	ldi	r20, 0xB3	; 179
 122:	5f e3       	ldi	r21, 0x3F	; 63
 124:	43 d1       	rcall	.+646    	; 0x3ac <__mulsf3>
 126:	83 d0       	rcall	.+262    	; 0x22e <__fixsfsi>
 128:	8b 01       	movw	r16, r22
		for(int i=0; i<random_number; i++)
		{
			a++; // Counts up to 8 to slow down the delay every time
			if(i%8 == 0)
			{
				a = 0; // Renews the LED in the roulette
 12a:	e1 2c       	mov	r14, r1
 12c:	f1 2c       	mov	r15, r1
				delay*=1.4; // Slows down the roulette every 8 LED flashes
			}
			PORTA = (1<<a);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 2c       	mov	r0, r14
 134:	02 c0       	rjmp	.+4      	; 0x13a <_ZN6Toggle5startEv+0x9c>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <_ZN6Toggle5startEv+0x98>
 13e:	82 b9       	out	0x02, r24	; 2
			_delay_ms(delay);
 140:	b8 01       	movw	r22, r16
 142:	01 2e       	mov	r0, r17
 144:	00 0c       	add	r0, r0
 146:	88 0b       	sbc	r24, r24
 148:	99 0b       	sbc	r25, r25
 14a:	a4 d0       	rcall	.+328    	; 0x294 <__floatsisf>
 14c:	2b 01       	movw	r4, r22
 14e:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	4a e7       	ldi	r20, 0x7A	; 122
 156:	55 e4       	ldi	r21, 0x45	; 69
 158:	29 d1       	rcall	.+594    	; 0x3ac <__mulsf3>
 15a:	4b 01       	movw	r8, r22
 15c:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	5f e3       	ldi	r21, 0x3F	; 63
 166:	5f d0       	rcall	.+190    	; 0x226 <__cmpsf2>
 168:	88 23       	and	r24, r24
 16a:	fc f0       	brlt	.+62     	; 0x1aa <_ZN6Toggle5startEv+0x10c>
 16c:	20 e0       	ldi	r18, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
 16e:	3f ef       	ldi	r19, 0xFF	; 255
 170:	4f e7       	ldi	r20, 0x7F	; 127
 172:	57 e4       	ldi	r21, 0x47	; 71
 174:	c5 01       	movw	r24, r10
 176:	b4 01       	movw	r22, r8
 178:	15 d1       	rcall	.+554    	; 0x3a4 <__gesf2>
 17a:	18 16       	cp	r1, r24
 17c:	94 f4       	brge	.+36     	; 0x1a2 <_ZN6Toggle5startEv+0x104>
 17e:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	40 e2       	ldi	r20, 0x20	; 32
 184:	51 e4       	ldi	r21, 0x41	; 65
 186:	c3 01       	movw	r24, r6
 188:	b2 01       	movw	r22, r4
 18a:	10 d1       	rcall	.+544    	; 0x3ac <__mulsf3>
 18c:	55 d0       	rcall	.+170    	; 0x238 <__fixunssfsi>
 18e:	61 15       	cp	r22, r1
 190:	71 05       	cpc	r23, r1
		while(__ticks)
 192:	81 f0       	breq	.+32     	; 0x1b4 <_ZN6Toggle5startEv+0x116>
 194:	80 e9       	ldi	r24, 0x90	; 144
 196:	91 e0       	ldi	r25, 0x01	; 1
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <_ZN6Toggle5startEv+0xfa>
 19c:	61 50       	subi	r22, 0x01	; 1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19e:	71 09       	sbc	r23, r1
 1a0:	f6 cf       	rjmp	.-20     	; 0x18e <_ZN6Toggle5startEv+0xf0>
 1a2:	c5 01       	movw	r24, r10
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1a4:	b4 01       	movw	r22, r8
 1a6:	48 d0       	rcall	.+144    	; 0x238 <__fixunssfsi>
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <_ZN6Toggle5startEv+0x110>
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	70 e0       	ldi	r23, 0x00	; 0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 1ae:	cb 01       	movw	r24, r22
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <_ZN6Toggle5startEv+0x112>
 1b4:	c4 34       	cpi	r28, 0x44	; 68
 1b6:	d1 05       	cpc	r29, r1
			if(i== random_number-1)  // Indicator showing that the state is off
 1b8:	11 f4       	brne	.+4      	; 0x1be <_ZN6Toggle5startEv+0x120>
 1ba:	33 24       	eor	r3, r3
 1bc:	33 94       	inc	r3
			{
				off = 1;
 1be:	21 96       	adiw	r28, 0x01	; 1
 1c0:	9c cf       	rjmp	.-200    	; 0xfa <_ZN6Toggle5startEv+0x5c>
	// LEDs get toggled
	int toggle_leds(int random_number, int delay) // Method for toggling LEDs
	{
		int a = 0; // Counter for delay
		bool off = 0; // Indicator that the roulette has stopped
		for(int i=0; i<random_number; i++)
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
			if(i== random_number-1)  // Indicator showing that the state is off
			{
				off = 1;
			}	
		}
		PORTA = (1<<a); // Keeps the last LED on once finished
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <_ZN6Toggle5startEv+0x12e>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	ea 94       	dec	r14
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <_ZN6Toggle5startEv+0x12a>
 1d0:	82 b9       	out	0x02, r24	; 2
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	31 10       	cpse	r3, r1
		}
		if (toggle == 1) // Changes the state to toggling LEDs
		{
			while(state == 0) // Stops the loop if the LEDs no longer run
			{
				state = toggle_leds(random_value, get_delay());	// Sets the delay and the 'random' value to the toggling
 1d6:	87 cf       	rjmp	.-242    	; 0xe6 <_ZN6Toggle5startEv+0x48>
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	85 cf       	rjmp	.-246    	; 0xe6 <_ZN6Toggle5startEv+0x48>
 1dc:	df 91       	pop	r29
				break;
			}
		}
		if (toggle == 1) // Changes the state to toggling LEDs
		{
			while(state == 0) // Stops the loop if the LEDs no longer run
 1de:	cf 91       	pop	r28
			{
				state = toggle_leds(random_value, get_delay());	// Sets the delay and the 'random' value to the toggling
			}
		}
		toggle = 0;
	}
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	bf 90       	pop	r11
 1ee:	af 90       	pop	r10
 1f0:	9f 90       	pop	r9
 1f2:	8f 90       	pop	r8
 1f4:	7f 90       	pop	r7
 1f6:	6f 90       	pop	r6
 1f8:	5f 90       	pop	r5
 1fa:	4f 90       	pop	r4
 1fc:	3f 90       	pop	r3
 1fe:	08 95       	ret

00000200 <main>:
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
};

int main(void) // Main function where the class is called out
{
 204:	00 d0       	rcall	.+0      	; 0x206 <main+0x6>
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
	}
	
	public: // Accessible variables and/or methods
	Toggle(int delay) //Constructor for the Toggle class
    {
        Delay = delay;
 20a:	8e e1       	ldi	r24, 0x1E	; 30
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	9a 83       	std	Y+2, r25	; 0x02
 210:	89 83       	std	Y+1, r24	; 0x01

int main(void) // Main function where the class is called out
{
	int delay = 30; // 30 ms delay set for the program
	Toggle program = Toggle(delay); // program is the object of the toggle class
	program.start(); // Program is started by calling out the start() method
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	43 df       	rcall	.-378    	; 0x9e <_ZN6Toggle5startEv>
}
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <__cmpsf2>:
 226:	71 d0       	rcall	.+226    	; 0x30a <__fp_cmp>
 228:	08 f4       	brcc	.+2      	; 0x22c <__cmpsf2+0x6>
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	08 95       	ret

0000022e <__fixsfsi>:
 22e:	04 d0       	rcall	.+8      	; 0x238 <__fixunssfsi>
 230:	68 94       	set
 232:	b1 11       	cpse	r27, r1
 234:	b1 c0       	rjmp	.+354    	; 0x398 <__fp_szero>
 236:	08 95       	ret

00000238 <__fixunssfsi>:
 238:	94 d0       	rcall	.+296    	; 0x362 <__fp_splitA>
 23a:	88 f0       	brcs	.+34     	; 0x25e <__fixunssfsi+0x26>
 23c:	9f 57       	subi	r25, 0x7F	; 127
 23e:	90 f0       	brcs	.+36     	; 0x264 <__fixunssfsi+0x2c>
 240:	b9 2f       	mov	r27, r25
 242:	99 27       	eor	r25, r25
 244:	b7 51       	subi	r27, 0x17	; 23
 246:	a0 f0       	brcs	.+40     	; 0x270 <__fixunssfsi+0x38>
 248:	d1 f0       	breq	.+52     	; 0x27e <__fixunssfsi+0x46>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	88 1f       	adc	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	1a f0       	brmi	.+6      	; 0x25a <__fixunssfsi+0x22>
 254:	ba 95       	dec	r27
 256:	c9 f7       	brne	.-14     	; 0x24a <__fixunssfsi+0x12>
 258:	12 c0       	rjmp	.+36     	; 0x27e <__fixunssfsi+0x46>
 25a:	b1 30       	cpi	r27, 0x01	; 1
 25c:	81 f0       	breq	.+32     	; 0x27e <__fixunssfsi+0x46>
 25e:	9b d0       	rcall	.+310    	; 0x396 <__fp_zero>
 260:	b1 e0       	ldi	r27, 0x01	; 1
 262:	08 95       	ret
 264:	98 c0       	rjmp	.+304    	; 0x396 <__fp_zero>
 266:	67 2f       	mov	r22, r23
 268:	78 2f       	mov	r23, r24
 26a:	88 27       	eor	r24, r24
 26c:	b8 5f       	subi	r27, 0xF8	; 248
 26e:	39 f0       	breq	.+14     	; 0x27e <__fixunssfsi+0x46>
 270:	b9 3f       	cpi	r27, 0xF9	; 249
 272:	cc f3       	brlt	.-14     	; 0x266 <__fixunssfsi+0x2e>
 274:	86 95       	lsr	r24
 276:	77 95       	ror	r23
 278:	67 95       	ror	r22
 27a:	b3 95       	inc	r27
 27c:	d9 f7       	brne	.-10     	; 0x274 <__fixunssfsi+0x3c>
 27e:	3e f4       	brtc	.+14     	; 0x28e <__fixunssfsi+0x56>
 280:	90 95       	com	r25
 282:	80 95       	com	r24
 284:	70 95       	com	r23
 286:	61 95       	neg	r22
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	8f 4f       	sbci	r24, 0xFF	; 255
 28c:	9f 4f       	sbci	r25, 0xFF	; 255
 28e:	08 95       	ret

00000290 <__floatunsisf>:
 290:	e8 94       	clt
 292:	09 c0       	rjmp	.+18     	; 0x2a6 <__floatsisf+0x12>

00000294 <__floatsisf>:
 294:	97 fb       	bst	r25, 7
 296:	3e f4       	brtc	.+14     	; 0x2a6 <__floatsisf+0x12>
 298:	90 95       	com	r25
 29a:	80 95       	com	r24
 29c:	70 95       	com	r23
 29e:	61 95       	neg	r22
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255
 2a2:	8f 4f       	sbci	r24, 0xFF	; 255
 2a4:	9f 4f       	sbci	r25, 0xFF	; 255
 2a6:	99 23       	and	r25, r25
 2a8:	a9 f0       	breq	.+42     	; 0x2d4 <__floatsisf+0x40>
 2aa:	f9 2f       	mov	r31, r25
 2ac:	96 e9       	ldi	r25, 0x96	; 150
 2ae:	bb 27       	eor	r27, r27
 2b0:	93 95       	inc	r25
 2b2:	f6 95       	lsr	r31
 2b4:	87 95       	ror	r24
 2b6:	77 95       	ror	r23
 2b8:	67 95       	ror	r22
 2ba:	b7 95       	ror	r27
 2bc:	f1 11       	cpse	r31, r1
 2be:	f8 cf       	rjmp	.-16     	; 0x2b0 <__floatsisf+0x1c>
 2c0:	fa f4       	brpl	.+62     	; 0x300 <__floatsisf+0x6c>
 2c2:	bb 0f       	add	r27, r27
 2c4:	11 f4       	brne	.+4      	; 0x2ca <__floatsisf+0x36>
 2c6:	60 ff       	sbrs	r22, 0
 2c8:	1b c0       	rjmp	.+54     	; 0x300 <__floatsisf+0x6c>
 2ca:	6f 5f       	subi	r22, 0xFF	; 255
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	16 c0       	rjmp	.+44     	; 0x300 <__floatsisf+0x6c>
 2d4:	88 23       	and	r24, r24
 2d6:	11 f0       	breq	.+4      	; 0x2dc <__floatsisf+0x48>
 2d8:	96 e9       	ldi	r25, 0x96	; 150
 2da:	11 c0       	rjmp	.+34     	; 0x2fe <__floatsisf+0x6a>
 2dc:	77 23       	and	r23, r23
 2de:	21 f0       	breq	.+8      	; 0x2e8 <__floatsisf+0x54>
 2e0:	9e e8       	ldi	r25, 0x8E	; 142
 2e2:	87 2f       	mov	r24, r23
 2e4:	76 2f       	mov	r23, r22
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <__floatsisf+0x5e>
 2e8:	66 23       	and	r22, r22
 2ea:	71 f0       	breq	.+28     	; 0x308 <__floatsisf+0x74>
 2ec:	96 e8       	ldi	r25, 0x86	; 134
 2ee:	86 2f       	mov	r24, r22
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	2a f0       	brmi	.+10     	; 0x300 <__floatsisf+0x6c>
 2f6:	9a 95       	dec	r25
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	88 1f       	adc	r24, r24
 2fe:	da f7       	brpl	.-10     	; 0x2f6 <__floatsisf+0x62>
 300:	88 0f       	add	r24, r24
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	97 f9       	bld	r25, 7
 308:	08 95       	ret

0000030a <__fp_cmp>:
 30a:	99 0f       	add	r25, r25
 30c:	00 08       	sbc	r0, r0
 30e:	55 0f       	add	r21, r21
 310:	aa 0b       	sbc	r26, r26
 312:	e0 e8       	ldi	r30, 0x80	; 128
 314:	fe ef       	ldi	r31, 0xFE	; 254
 316:	16 16       	cp	r1, r22
 318:	17 06       	cpc	r1, r23
 31a:	e8 07       	cpc	r30, r24
 31c:	f9 07       	cpc	r31, r25
 31e:	c0 f0       	brcs	.+48     	; 0x350 <__fp_cmp+0x46>
 320:	12 16       	cp	r1, r18
 322:	13 06       	cpc	r1, r19
 324:	e4 07       	cpc	r30, r20
 326:	f5 07       	cpc	r31, r21
 328:	98 f0       	brcs	.+38     	; 0x350 <__fp_cmp+0x46>
 32a:	62 1b       	sub	r22, r18
 32c:	73 0b       	sbc	r23, r19
 32e:	84 0b       	sbc	r24, r20
 330:	95 0b       	sbc	r25, r21
 332:	39 f4       	brne	.+14     	; 0x342 <__fp_cmp+0x38>
 334:	0a 26       	eor	r0, r26
 336:	61 f0       	breq	.+24     	; 0x350 <__fp_cmp+0x46>
 338:	23 2b       	or	r18, r19
 33a:	24 2b       	or	r18, r20
 33c:	25 2b       	or	r18, r21
 33e:	21 f4       	brne	.+8      	; 0x348 <__fp_cmp+0x3e>
 340:	08 95       	ret
 342:	0a 26       	eor	r0, r26
 344:	09 f4       	brne	.+2      	; 0x348 <__fp_cmp+0x3e>
 346:	a1 40       	sbci	r26, 0x01	; 1
 348:	a6 95       	lsr	r26
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	81 1d       	adc	r24, r1
 34e:	81 1d       	adc	r24, r1
 350:	08 95       	ret

00000352 <__fp_split3>:
 352:	57 fd       	sbrc	r21, 7
 354:	90 58       	subi	r25, 0x80	; 128
 356:	44 0f       	add	r20, r20
 358:	55 1f       	adc	r21, r21
 35a:	59 f0       	breq	.+22     	; 0x372 <__fp_splitA+0x10>
 35c:	5f 3f       	cpi	r21, 0xFF	; 255
 35e:	71 f0       	breq	.+28     	; 0x37c <__fp_splitA+0x1a>
 360:	47 95       	ror	r20

00000362 <__fp_splitA>:
 362:	88 0f       	add	r24, r24
 364:	97 fb       	bst	r25, 7
 366:	99 1f       	adc	r25, r25
 368:	61 f0       	breq	.+24     	; 0x382 <__fp_splitA+0x20>
 36a:	9f 3f       	cpi	r25, 0xFF	; 255
 36c:	79 f0       	breq	.+30     	; 0x38c <__fp_splitA+0x2a>
 36e:	87 95       	ror	r24
 370:	08 95       	ret
 372:	12 16       	cp	r1, r18
 374:	13 06       	cpc	r1, r19
 376:	14 06       	cpc	r1, r20
 378:	55 1f       	adc	r21, r21
 37a:	f2 cf       	rjmp	.-28     	; 0x360 <__fp_split3+0xe>
 37c:	46 95       	lsr	r20
 37e:	f1 df       	rcall	.-30     	; 0x362 <__fp_splitA>
 380:	08 c0       	rjmp	.+16     	; 0x392 <__fp_splitA+0x30>
 382:	16 16       	cp	r1, r22
 384:	17 06       	cpc	r1, r23
 386:	18 06       	cpc	r1, r24
 388:	99 1f       	adc	r25, r25
 38a:	f1 cf       	rjmp	.-30     	; 0x36e <__fp_splitA+0xc>
 38c:	86 95       	lsr	r24
 38e:	71 05       	cpc	r23, r1
 390:	61 05       	cpc	r22, r1
 392:	08 94       	sec
 394:	08 95       	ret

00000396 <__fp_zero>:
 396:	e8 94       	clt

00000398 <__fp_szero>:
 398:	bb 27       	eor	r27, r27
 39a:	66 27       	eor	r22, r22
 39c:	77 27       	eor	r23, r23
 39e:	cb 01       	movw	r24, r22
 3a0:	97 f9       	bld	r25, 7
 3a2:	08 95       	ret

000003a4 <__gesf2>:
 3a4:	b2 df       	rcall	.-156    	; 0x30a <__fp_cmp>
 3a6:	08 f4       	brcc	.+2      	; 0x3aa <__gesf2+0x6>
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	08 95       	ret

000003ac <__mulsf3>:
 3ac:	0b d0       	rcall	.+22     	; 0x3c4 <__mulsf3x>
 3ae:	78 c0       	rjmp	.+240    	; 0x4a0 <__fp_round>
 3b0:	69 d0       	rcall	.+210    	; 0x484 <__fp_pscA>
 3b2:	28 f0       	brcs	.+10     	; 0x3be <__mulsf3+0x12>
 3b4:	6e d0       	rcall	.+220    	; 0x492 <__fp_pscB>
 3b6:	18 f0       	brcs	.+6      	; 0x3be <__mulsf3+0x12>
 3b8:	95 23       	and	r25, r21
 3ba:	09 f0       	breq	.+2      	; 0x3be <__mulsf3+0x12>
 3bc:	5a c0       	rjmp	.+180    	; 0x472 <__fp_inf>
 3be:	5f c0       	rjmp	.+190    	; 0x47e <__fp_nan>
 3c0:	11 24       	eor	r1, r1
 3c2:	ea cf       	rjmp	.-44     	; 0x398 <__fp_szero>

000003c4 <__mulsf3x>:
 3c4:	c6 df       	rcall	.-116    	; 0x352 <__fp_split3>
 3c6:	a0 f3       	brcs	.-24     	; 0x3b0 <__mulsf3+0x4>

000003c8 <__mulsf3_pse>:
 3c8:	95 9f       	mul	r25, r21
 3ca:	d1 f3       	breq	.-12     	; 0x3c0 <__mulsf3+0x14>
 3cc:	95 0f       	add	r25, r21
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	55 1f       	adc	r21, r21
 3d2:	62 9f       	mul	r22, r18
 3d4:	f0 01       	movw	r30, r0
 3d6:	72 9f       	mul	r23, r18
 3d8:	bb 27       	eor	r27, r27
 3da:	f0 0d       	add	r31, r0
 3dc:	b1 1d       	adc	r27, r1
 3de:	63 9f       	mul	r22, r19
 3e0:	aa 27       	eor	r26, r26
 3e2:	f0 0d       	add	r31, r0
 3e4:	b1 1d       	adc	r27, r1
 3e6:	aa 1f       	adc	r26, r26
 3e8:	64 9f       	mul	r22, r20
 3ea:	66 27       	eor	r22, r22
 3ec:	b0 0d       	add	r27, r0
 3ee:	a1 1d       	adc	r26, r1
 3f0:	66 1f       	adc	r22, r22
 3f2:	82 9f       	mul	r24, r18
 3f4:	22 27       	eor	r18, r18
 3f6:	b0 0d       	add	r27, r0
 3f8:	a1 1d       	adc	r26, r1
 3fa:	62 1f       	adc	r22, r18
 3fc:	73 9f       	mul	r23, r19
 3fe:	b0 0d       	add	r27, r0
 400:	a1 1d       	adc	r26, r1
 402:	62 1f       	adc	r22, r18
 404:	83 9f       	mul	r24, r19
 406:	a0 0d       	add	r26, r0
 408:	61 1d       	adc	r22, r1
 40a:	22 1f       	adc	r18, r18
 40c:	74 9f       	mul	r23, r20
 40e:	33 27       	eor	r19, r19
 410:	a0 0d       	add	r26, r0
 412:	61 1d       	adc	r22, r1
 414:	23 1f       	adc	r18, r19
 416:	84 9f       	mul	r24, r20
 418:	60 0d       	add	r22, r0
 41a:	21 1d       	adc	r18, r1
 41c:	82 2f       	mov	r24, r18
 41e:	76 2f       	mov	r23, r22
 420:	6a 2f       	mov	r22, r26
 422:	11 24       	eor	r1, r1
 424:	9f 57       	subi	r25, 0x7F	; 127
 426:	50 40       	sbci	r21, 0x00	; 0
 428:	8a f0       	brmi	.+34     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 42a:	e1 f0       	breq	.+56     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 42c:	88 23       	and	r24, r24
 42e:	4a f0       	brmi	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	bb 1f       	adc	r27, r27
 436:	66 1f       	adc	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	88 1f       	adc	r24, r24
 43c:	91 50       	subi	r25, 0x01	; 1
 43e:	50 40       	sbci	r21, 0x00	; 0
 440:	a9 f7       	brne	.-22     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 442:	9e 3f       	cpi	r25, 0xFE	; 254
 444:	51 05       	cpc	r21, r1
 446:	70 f0       	brcs	.+28     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 448:	14 c0       	rjmp	.+40     	; 0x472 <__fp_inf>
 44a:	a6 cf       	rjmp	.-180    	; 0x398 <__fp_szero>
 44c:	5f 3f       	cpi	r21, 0xFF	; 255
 44e:	ec f3       	brlt	.-6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 450:	98 3e       	cpi	r25, 0xE8	; 232
 452:	dc f3       	brlt	.-10     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 454:	86 95       	lsr	r24
 456:	77 95       	ror	r23
 458:	67 95       	ror	r22
 45a:	b7 95       	ror	r27
 45c:	f7 95       	ror	r31
 45e:	e7 95       	ror	r30
 460:	9f 5f       	subi	r25, 0xFF	; 255
 462:	c1 f7       	brne	.-16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 464:	fe 2b       	or	r31, r30
 466:	88 0f       	add	r24, r24
 468:	91 1d       	adc	r25, r1
 46a:	96 95       	lsr	r25
 46c:	87 95       	ror	r24
 46e:	97 f9       	bld	r25, 7
 470:	08 95       	ret

00000472 <__fp_inf>:
 472:	97 f9       	bld	r25, 7
 474:	9f 67       	ori	r25, 0x7F	; 127
 476:	80 e8       	ldi	r24, 0x80	; 128
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	08 95       	ret

0000047e <__fp_nan>:
 47e:	9f ef       	ldi	r25, 0xFF	; 255
 480:	80 ec       	ldi	r24, 0xC0	; 192
 482:	08 95       	ret

00000484 <__fp_pscA>:
 484:	00 24       	eor	r0, r0
 486:	0a 94       	dec	r0
 488:	16 16       	cp	r1, r22
 48a:	17 06       	cpc	r1, r23
 48c:	18 06       	cpc	r1, r24
 48e:	09 06       	cpc	r0, r25
 490:	08 95       	ret

00000492 <__fp_pscB>:
 492:	00 24       	eor	r0, r0
 494:	0a 94       	dec	r0
 496:	12 16       	cp	r1, r18
 498:	13 06       	cpc	r1, r19
 49a:	14 06       	cpc	r1, r20
 49c:	05 06       	cpc	r0, r21
 49e:	08 95       	ret

000004a0 <__fp_round>:
 4a0:	09 2e       	mov	r0, r25
 4a2:	03 94       	inc	r0
 4a4:	00 0c       	add	r0, r0
 4a6:	11 f4       	brne	.+4      	; 0x4ac <__fp_round+0xc>
 4a8:	88 23       	and	r24, r24
 4aa:	52 f0       	brmi	.+20     	; 0x4c0 <__fp_round+0x20>
 4ac:	bb 0f       	add	r27, r27
 4ae:	40 f4       	brcc	.+16     	; 0x4c0 <__fp_round+0x20>
 4b0:	bf 2b       	or	r27, r31
 4b2:	11 f4       	brne	.+4      	; 0x4b8 <__fp_round+0x18>
 4b4:	60 ff       	sbrs	r22, 0
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <__fp_round+0x20>
 4b8:	6f 5f       	subi	r22, 0xFF	; 255
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8f 4f       	sbci	r24, 0xFF	; 255
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	08 95       	ret

000004c2 <_exit>:
 4c2:	f8 94       	cli

000004c4 <__stop_program>:
 4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <__stop_program>
