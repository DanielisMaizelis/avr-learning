
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000464  000004f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  000004fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b59  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b7  00000000  00000000  0000110d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000470  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000535  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000283  00000000  00000000  00002421  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	70 c0       	rjmp	.+224    	; 0x12a <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8b d0       	rcall	.+278    	; 0x1da <main>
  c4:	cd c1       	rjmp	.+922    	; 0x460 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:
int score;
int time_delay;
//bool on = 0;

ISR(INT0_vect) // interrupt vector
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
	if (reaction_timer_on == 1)
  da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <reaction_timer_on>
  de:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <reaction_timer_on+0x1>
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	c9 f4       	brne	.+50     	; 0x118 <__vector_1+0x50>
	{	
		int counter = TCNT1;
  e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  ea:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		reaction_time = 1.4;
  ee:	83 e3       	ldi	r24, 0x33	; 51
  f0:	93 e3       	ldi	r25, 0x33	; 51
  f2:	a3 eb       	ldi	r26, 0xB3	; 179
  f4:	bf e3       	ldi	r27, 0x3F	; 63
  f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <reaction_time>
  fa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <reaction_time+0x1>
  fe:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <reaction_time+0x2>
 102:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <reaction_time+0x3>
			reaction_time = 0.8;
			PORTB = 0b00000100;
		 
		}
		score = round((1/reaction_time)*10-5); // a score from 0 to 5*/
		PORTB |= 0b00000010; // turns on a second led
 106:	85 b1       	in	r24, 0x05	; 5
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	85 b9       	out	0x05, r24	; 5
		//_delay_ms(1000);
		reaction_timer_on = 3;
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <reaction_timer_on+0x1>
 114:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <reaction_timer_on>
	}
}
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <__vector_18>:

ISR(TIMER0_OVF_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
	Overflows++;
 13e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Overflows>
 142:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Overflows+0x1>
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <Overflows+0x1>
 14c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Overflows>
	//if (reaction_timer_on == 2)
	//{
		if((PINC & 0x01) == 0x01) // If the output is high
 150:	30 9b       	sbis	0x06, 0	; 6
 152:	14 c0       	rjmp	.+40     	; 0x17c <__vector_18+0x52>
		{
			if(Overflows >= (62*time_delay)) // 1 or 2 ms has elapsed
 154:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 158:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 15c:	4e e3       	ldi	r20, 0x3E	; 62
 15e:	48 9f       	mul	r20, r24
 160:	90 01       	movw	r18, r0
 162:	49 9f       	mul	r20, r25
 164:	30 0d       	add	r19, r0
 166:	11 24       	eor	r1, r1
 168:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Overflows>
 16c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Overflows+0x1>
 170:	82 17       	cp	r24, r18
 172:	93 07       	cpc	r25, r19
 174:	18 f0       	brcs	.+6      	; 0x17c <__vector_18+0x52>
			{
				PORTC &= ~(1<<PORTC0); // Turn the output low
 176:	88 b1       	in	r24, 0x08	; 8
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	88 b9       	out	0x08, r24	; 8
			}
		}
		if((PINC & 0x01) == 0x00)  // If the output is low
 17c:	30 99       	sbic	0x06, 0	; 6
 17e:	0e c0       	rjmp	.+28     	; 0x19c <__vector_18+0x72>
		{
			if(Overflows >= (1249)) // 20 ms has elapsed the whole thing
 180:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Overflows>
 184:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Overflows+0x1>
 188:	81 3e       	cpi	r24, 0xE1	; 225
 18a:	94 40       	sbci	r25, 0x04	; 4
 18c:	38 f0       	brcs	.+14     	; 0x19c <__vector_18+0x72>
			{
				PORTC |= (1<<PORTC0); // Turn the output high
 18e:	88 b1       	in	r24, 0x08	; 8
 190:	81 60       	ori	r24, 0x01	; 1
 192:	88 b9       	out	0x08, r24	; 8
				Overflows = 0; // Reset overflows
 194:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <Overflows+0x1>
 198:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Overflows>
			}
		}
	//	reaction_timer_on = 0;
	//}
}
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <_Z12Set_servomaxv>:


void Set_servomax()
{
	time_delay = 2;
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1bc:	08 95       	ret

000001be <_Z12Set_servominv>:
}

void Set_servomin()
{
	time_delay = 1;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1ca:	08 95       	ret

000001cc <_Z8random_vv>:
	}
}

int random_v()
{
	int hello = rand() % 2000 + 2000; 
 1cc:	de d0       	rcall	.+444    	; 0x38a <rand>
 1ce:	60 ed       	ldi	r22, 0xD0	; 208
 1d0:	77 e0       	ldi	r23, 0x07	; 7
 1d2:	6d d0       	rcall	.+218    	; 0x2ae <__divmodhi4>
	return hello; // Set from 2-4seconds
}
 1d4:	80 53       	subi	r24, 0x30	; 48
 1d6:	98 4f       	sbci	r25, 0xF8	; 248
 1d8:	08 95       	ret

000001da <main>:
}


int main(void)
{
	int random_value = random_v();// Random value that should have been working commented below
 1da:	f8 df       	rcall	.-16     	; 0x1cc <_Z8random_vv>
 1dc:	ac 01       	movw	r20, r24
	
	//Timer 0 
	DDRC = 0b11111111;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	87 b9       	out	0x07, r24	; 7
	TCNT0 = 0;
 1e2:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1<<CS00); // no pre-scaler
 1e4:	95 b5       	in	r25, 0x25	; 37
 1e6:	91 60       	ori	r25, 0x01	; 1
 1e8:	95 bd       	out	0x25, r25	; 37
	TIMSK0 |= (1<<TOIE0);
 1ea:	ee e6       	ldi	r30, 0x6E	; 110
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	90 81       	ld	r25, Z
 1f0:	91 60       	ori	r25, 0x01	; 1
 1f2:	90 83       	st	Z, r25
	
	
	//Timer 1
	TCNT1 |= 0b0000100;
 1f4:	e4 e8       	ldi	r30, 0x84	; 132
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	20 81       	ld	r18, Z
 1fa:	31 81       	ldd	r19, Z+1	; 0x01
 1fc:	24 60       	ori	r18, 0x04	; 4
 1fe:	31 83       	std	Z+1, r19	; 0x01
 200:	20 83       	st	Z, r18
	TCCR1B |= (1<<CS02); // Selects a pre-scaler
 202:	e1 e8       	ldi	r30, 0x81	; 129
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	90 81       	ld	r25, Z
 208:	94 60       	ori	r25, 0x04	; 4
 20a:	90 83       	st	Z, r25
	
	
	// Pins for the LEDs
	DDRB = 0b00001111; // Sets PB0 and PB1 as outputs
 20c:	8f e0       	ldi	r24, 0x0F	; 15
 20e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
 210:	15 b8       	out	0x05, r1	; 5
	
	// Pull-up for a button
	DDRD = 0b00000000;
 212:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00000100;
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	8b b9       	out	0x0b, r24	; 11
	
	//interrupt
	EICRA = 0b00000010; //ISC0n to be sent on falling edge - so when the button is pressed from 1 to 0
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	//EICRA = 0b00000010; //ISC0n to be sent on rising edge - so when the button is pressed from 0 to 1
	EIMSK = 0b00000001; // Enables INT0, basically the interrupt, otherwise it won't work
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	8d bb       	out	0x1d, r24	; 29
	
	//Allows the interrupts
	sei();
 222:	78 94       	sei
	
	while(reaction_timer_on != 2)
 224:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <reaction_timer_on>
 228:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <reaction_timer_on+0x1>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	91 05       	cpc	r25, r1
 230:	d1 f0       	breq	.+52     	; 0x266 <main+0x8c>
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(int i=0; i<=random_value; i++)
 236:	42 17       	cp	r20, r18
 238:	53 07       	cpc	r21, r19
 23a:	3c f0       	brlt	.+14     	; 0x24a <main+0x70>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 23c:	80 ea       	ldi	r24, 0xA0	; 160
 23e:	9f e0       	ldi	r25, 0x0F	; 15
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x66>
 244:	2f 5f       	subi	r18, 0xFF	; 255
 246:	3f 4f       	sbci	r19, 0xFF	; 255
 248:	f6 cf       	rjmp	.-20     	; 0x236 <main+0x5c>
		{
			_delay_ms(1);
		}
		//n = 1;
		PORTB |= 0b00000001; // turns on a first led
 24a:	95 b1       	in	r25, 0x05	; 5
 24c:	91 60       	ori	r25, 0x01	; 1
 24e:	95 b9       	out	0x05, r25	; 5
		TCNT1 = 0; // Starts the counter
 250:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 254:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		//while(reaction_timer_on != 2){}
		reaction_timer_on = 1;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <reaction_timer_on+0x1>
 260:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <reaction_timer_on>
	EIMSK = 0b00000001; // Enables INT0, basically the interrupt, otherwise it won't work
	
	//Allows the interrupts
	sei();
	
	while(reaction_timer_on != 2)
 264:	df cf       	rjmp	.-66     	; 0x224 <main+0x4a>
		TCNT1 = 0; // Starts the counter
		//while(reaction_timer_on != 2){}
		reaction_timer_on = 1;

	}
	while(reaction_timer_on!=3){}
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	91 05       	cpc	r25, r1
	while(1)
	{
		Set_servomax();
 26a:	e9 f7       	brne	.-6      	; 0x266 <main+0x8c>
 26c:	a1 df       	rcall	.-190    	; 0x1b0 <_Z12Set_servomaxv>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 26e:	80 e1       	ldi	r24, 0x10	; 16
 270:	97 e2       	ldi	r25, 0x27	; 39
		while(__ticks)
 272:	00 97       	sbiw	r24, 0x00	; 0
 274:	31 f0       	breq	.+12     	; 0x282 <main+0xa8>
 276:	e0 e9       	ldi	r30, 0x90	; 144
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 27e:	01 97       	sbiw	r24, 0x01	; 1
		_delay_ms(1000);
		Set_servomin();
 280:	f8 cf       	rjmp	.-16     	; 0x272 <main+0x98>
 282:	9d df       	rcall	.-198    	; 0x1be <_Z12Set_servominv>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 284:	80 e5       	ldi	r24, 0x50	; 80
 286:	93 ec       	ldi	r25, 0xC3	; 195
		while(__ticks)
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	31 f0       	breq	.+12     	; 0x298 <main+0xbe>
 28c:	e0 e9       	ldi	r30, 0x90	; 144
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	31 97       	sbiw	r30, 0x01	; 1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 292:	f1 f7       	brne	.-4      	; 0x290 <main+0xb6>
 294:	01 97       	sbiw	r24, 0x01	; 1
		_delay_ms(5000);
		Set_servomax();
 296:	f8 cf       	rjmp	.-16     	; 0x288 <main+0xae>
 298:	8b df       	rcall	.-234    	; 0x1b0 <_Z12Set_servomaxv>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 29a:	80 e3       	ldi	r24, 0x30	; 48
 29c:	95 e7       	ldi	r25, 0x75	; 117
		while(__ticks)
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	29 f3       	breq	.-54     	; 0x26c <main+0x92>
 2a2:	e0 e9       	ldi	r30, 0x90	; 144
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0xcc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f8 cf       	rjmp	.-16     	; 0x29e <main+0xc4>

000002ae <__divmodhi4>:
 2ae:	97 fb       	bst	r25, 7
 2b0:	07 2e       	mov	r0, r23
 2b2:	16 f4       	brtc	.+4      	; 0x2b8 <__divmodhi4+0xa>
 2b4:	00 94       	com	r0
 2b6:	06 d0       	rcall	.+12     	; 0x2c4 <__divmodhi4_neg1>
 2b8:	77 fd       	sbrc	r23, 7
 2ba:	08 d0       	rcall	.+16     	; 0x2cc <__divmodhi4_neg2>
 2bc:	0b d0       	rcall	.+22     	; 0x2d4 <__udivmodhi4>
 2be:	07 fc       	sbrc	r0, 7
 2c0:	05 d0       	rcall	.+10     	; 0x2cc <__divmodhi4_neg2>
 2c2:	3e f4       	brtc	.+14     	; 0x2d2 <__divmodhi4_exit>

000002c4 <__divmodhi4_neg1>:
 2c4:	90 95       	com	r25
 2c6:	81 95       	neg	r24
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	08 95       	ret

000002cc <__divmodhi4_neg2>:
 2cc:	70 95       	com	r23
 2ce:	61 95       	neg	r22
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255

000002d2 <__divmodhi4_exit>:
 2d2:	08 95       	ret

000002d4 <__udivmodhi4>:
 2d4:	aa 1b       	sub	r26, r26
 2d6:	bb 1b       	sub	r27, r27
 2d8:	51 e1       	ldi	r21, 0x11	; 17
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <__udivmodhi4_ep>

000002dc <__udivmodhi4_loop>:
 2dc:	aa 1f       	adc	r26, r26
 2de:	bb 1f       	adc	r27, r27
 2e0:	a6 17       	cp	r26, r22
 2e2:	b7 07       	cpc	r27, r23
 2e4:	10 f0       	brcs	.+4      	; 0x2ea <__udivmodhi4_ep>
 2e6:	a6 1b       	sub	r26, r22
 2e8:	b7 0b       	sbc	r27, r23

000002ea <__udivmodhi4_ep>:
 2ea:	88 1f       	adc	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	5a 95       	dec	r21
 2f0:	a9 f7       	brne	.-22     	; 0x2dc <__udivmodhi4_loop>
 2f2:	80 95       	com	r24
 2f4:	90 95       	com	r25
 2f6:	bc 01       	movw	r22, r24
 2f8:	cd 01       	movw	r24, r26
 2fa:	08 95       	ret

000002fc <do_rand>:
 2fc:	8f 92       	push	r8
 2fe:	9f 92       	push	r9
 300:	af 92       	push	r10
 302:	bf 92       	push	r11
 304:	cf 92       	push	r12
 306:	df 92       	push	r13
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	ec 01       	movw	r28, r24
 312:	68 81       	ld	r22, Y
 314:	79 81       	ldd	r23, Y+1	; 0x01
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	9b 81       	ldd	r25, Y+3	; 0x03
 31a:	61 15       	cp	r22, r1
 31c:	71 05       	cpc	r23, r1
 31e:	81 05       	cpc	r24, r1
 320:	91 05       	cpc	r25, r1
 322:	21 f4       	brne	.+8      	; 0x32c <do_rand+0x30>
 324:	64 e2       	ldi	r22, 0x24	; 36
 326:	79 ed       	ldi	r23, 0xD9	; 217
 328:	8b e5       	ldi	r24, 0x5B	; 91
 32a:	97 e0       	ldi	r25, 0x07	; 7
 32c:	2d e1       	ldi	r18, 0x1D	; 29
 32e:	33 ef       	ldi	r19, 0xF3	; 243
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	38 d0       	rcall	.+112    	; 0x3a6 <__divmodsi4>
 336:	49 01       	movw	r8, r18
 338:	5a 01       	movw	r10, r20
 33a:	9b 01       	movw	r18, r22
 33c:	ac 01       	movw	r20, r24
 33e:	a7 ea       	ldi	r26, 0xA7	; 167
 340:	b1 e4       	ldi	r27, 0x41	; 65
 342:	4d d0       	rcall	.+154    	; 0x3de <__muluhisi3>
 344:	6b 01       	movw	r12, r22
 346:	7c 01       	movw	r14, r24
 348:	ac ee       	ldi	r26, 0xEC	; 236
 34a:	b4 ef       	ldi	r27, 0xF4	; 244
 34c:	a5 01       	movw	r20, r10
 34e:	94 01       	movw	r18, r8
 350:	52 d0       	rcall	.+164    	; 0x3f6 <__mulohisi3>
 352:	dc 01       	movw	r26, r24
 354:	cb 01       	movw	r24, r22
 356:	8c 0d       	add	r24, r12
 358:	9d 1d       	adc	r25, r13
 35a:	ae 1d       	adc	r26, r14
 35c:	bf 1d       	adc	r27, r15
 35e:	b7 ff       	sbrs	r27, 7
 360:	03 c0       	rjmp	.+6      	; 0x368 <do_rand+0x6c>
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	a1 09       	sbc	r26, r1
 366:	b0 48       	sbci	r27, 0x80	; 128
 368:	88 83       	st	Y, r24
 36a:	99 83       	std	Y+1, r25	; 0x01
 36c:	aa 83       	std	Y+2, r26	; 0x02
 36e:	bb 83       	std	Y+3, r27	; 0x03
 370:	9f 77       	andi	r25, 0x7F	; 127
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	ff 90       	pop	r15
 378:	ef 90       	pop	r14
 37a:	df 90       	pop	r13
 37c:	cf 90       	pop	r12
 37e:	bf 90       	pop	r11
 380:	af 90       	pop	r10
 382:	9f 90       	pop	r9
 384:	8f 90       	pop	r8
 386:	08 95       	ret

00000388 <rand_r>:
 388:	b9 cf       	rjmp	.-142    	; 0x2fc <do_rand>

0000038a <rand>:
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	b6 cf       	rjmp	.-148    	; 0x2fc <do_rand>

00000390 <srand>:
 390:	a0 e0       	ldi	r26, 0x00	; 0
 392:	b0 e0       	ldi	r27, 0x00	; 0
 394:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 398:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 39c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3a0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 3a4:	08 95       	ret

000003a6 <__divmodsi4>:
 3a6:	05 2e       	mov	r0, r21
 3a8:	97 fb       	bst	r25, 7
 3aa:	16 f4       	brtc	.+4      	; 0x3b0 <__divmodsi4+0xa>
 3ac:	00 94       	com	r0
 3ae:	0f d0       	rcall	.+30     	; 0x3ce <__negsi2>
 3b0:	57 fd       	sbrc	r21, 7
 3b2:	05 d0       	rcall	.+10     	; 0x3be <__divmodsi4_neg2>
 3b4:	24 d0       	rcall	.+72     	; 0x3fe <__udivmodsi4>
 3b6:	07 fc       	sbrc	r0, 7
 3b8:	02 d0       	rcall	.+4      	; 0x3be <__divmodsi4_neg2>
 3ba:	46 f4       	brtc	.+16     	; 0x3cc <__divmodsi4_exit>
 3bc:	08 c0       	rjmp	.+16     	; 0x3ce <__negsi2>

000003be <__divmodsi4_neg2>:
 3be:	50 95       	com	r21
 3c0:	40 95       	com	r20
 3c2:	30 95       	com	r19
 3c4:	21 95       	neg	r18
 3c6:	3f 4f       	sbci	r19, 0xFF	; 255
 3c8:	4f 4f       	sbci	r20, 0xFF	; 255
 3ca:	5f 4f       	sbci	r21, 0xFF	; 255

000003cc <__divmodsi4_exit>:
 3cc:	08 95       	ret

000003ce <__negsi2>:
 3ce:	90 95       	com	r25
 3d0:	80 95       	com	r24
 3d2:	70 95       	com	r23
 3d4:	61 95       	neg	r22
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	8f 4f       	sbci	r24, 0xFF	; 255
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	08 95       	ret

000003de <__muluhisi3>:
 3de:	31 d0       	rcall	.+98     	; 0x442 <__umulhisi3>
 3e0:	a5 9f       	mul	r26, r21
 3e2:	90 0d       	add	r25, r0
 3e4:	b4 9f       	mul	r27, r20
 3e6:	90 0d       	add	r25, r0
 3e8:	a4 9f       	mul	r26, r20
 3ea:	80 0d       	add	r24, r0
 3ec:	91 1d       	adc	r25, r1
 3ee:	11 24       	eor	r1, r1
 3f0:	08 95       	ret

000003f2 <__mulshisi3>:
 3f2:	b7 ff       	sbrs	r27, 7
 3f4:	f4 cf       	rjmp	.-24     	; 0x3de <__muluhisi3>

000003f6 <__mulohisi3>:
 3f6:	f3 df       	rcall	.-26     	; 0x3de <__muluhisi3>
 3f8:	82 1b       	sub	r24, r18
 3fa:	93 0b       	sbc	r25, r19
 3fc:	08 95       	ret

000003fe <__udivmodsi4>:
 3fe:	a1 e2       	ldi	r26, 0x21	; 33
 400:	1a 2e       	mov	r1, r26
 402:	aa 1b       	sub	r26, r26
 404:	bb 1b       	sub	r27, r27
 406:	fd 01       	movw	r30, r26
 408:	0d c0       	rjmp	.+26     	; 0x424 <__udivmodsi4_ep>

0000040a <__udivmodsi4_loop>:
 40a:	aa 1f       	adc	r26, r26
 40c:	bb 1f       	adc	r27, r27
 40e:	ee 1f       	adc	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	a2 17       	cp	r26, r18
 414:	b3 07       	cpc	r27, r19
 416:	e4 07       	cpc	r30, r20
 418:	f5 07       	cpc	r31, r21
 41a:	20 f0       	brcs	.+8      	; 0x424 <__udivmodsi4_ep>
 41c:	a2 1b       	sub	r26, r18
 41e:	b3 0b       	sbc	r27, r19
 420:	e4 0b       	sbc	r30, r20
 422:	f5 0b       	sbc	r31, r21

00000424 <__udivmodsi4_ep>:
 424:	66 1f       	adc	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	1a 94       	dec	r1
 42e:	69 f7       	brne	.-38     	; 0x40a <__udivmodsi4_loop>
 430:	60 95       	com	r22
 432:	70 95       	com	r23
 434:	80 95       	com	r24
 436:	90 95       	com	r25
 438:	9b 01       	movw	r18, r22
 43a:	ac 01       	movw	r20, r24
 43c:	bd 01       	movw	r22, r26
 43e:	cf 01       	movw	r24, r30
 440:	08 95       	ret

00000442 <__umulhisi3>:
 442:	a2 9f       	mul	r26, r18
 444:	b0 01       	movw	r22, r0
 446:	b3 9f       	mul	r27, r19
 448:	c0 01       	movw	r24, r0
 44a:	a3 9f       	mul	r26, r19
 44c:	70 0d       	add	r23, r0
 44e:	81 1d       	adc	r24, r1
 450:	11 24       	eor	r1, r1
 452:	91 1d       	adc	r25, r1
 454:	b2 9f       	mul	r27, r18
 456:	70 0d       	add	r23, r0
 458:	81 1d       	adc	r24, r1
 45a:	11 24       	eor	r1, r1
 45c:	91 1d       	adc	r25, r1
 45e:	08 95       	ret

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
