
lab 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc2  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b2  00000000  00000000  00000fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074f  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b3  00000000  00000000  000025f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000028a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  88:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <btnSetupIrq>:
#include "../main.h"


void btnSetupIrq(void)
{
	EICRA |= (1<<ISC01);
  90:	e9 e6       	ldi	r30, 0x69	; 105
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 60       	ori	r24, 0x02	; 2
  98:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
  9a:	8d b3       	in	r24, 0x1d	; 29
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8d bb       	out	0x1d, r24	; 29
  a0:	08 95       	ret

000000a2 <pinSetup>:


void pinSetup(void) // Led's
{
	// Pins for Leds and button
	DDRB  |= (1<<PORTB0)|(1<<PORTB1)|(1<<PORTB5);
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	83 62       	ori	r24, 0x23	; 35
  a6:	84 b9       	out	0x04, r24	; 4
	
	// Pins for the traffic light
	DDRD  |= (1<<PORTD7)|(1<<PORTD6)|(1<<PORTD5);
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 6e       	ori	r24, 0xE0	; 224
  ac:	8a b9       	out	0x0a, r24	; 10
	
	// Button pull-up setup polling
	DDRD  &= ~(1<<PORTD2);
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD2);
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	8b b9       	out	0x0b, r24	; 11
  ba:	08 95       	ret

000000bc <setupTim0Irq>:
#include "../main.h"


void setupTim0Irq(void)
{
	TCCR0B |= (1 << CS01)|(1<<CS00);
  bc:	85 b5       	in	r24, 0x25	; 37
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);
  c2:	ee e6       	ldi	r30, 0x6E	; 110
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <setupTim1Irq>:
	TCNT1 = 0;						// Counter starts from 0
}

void setupTim1Irq(void) // Task 2
{
	TCNT1  = 0;							 //initialize counter value to 0
  ce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  d2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A = 31249;                       // 2*((16*10^6)/1024)-1 -> 2 Sec delay (value must be <65536)
  d6:	81 e1       	ldi	r24, 0x11	; 17
  d8:	9a e7       	ldi	r25, 0x7A	; 122
  da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1 << WGM12);				 // turn on CTC mode
  e2:	e1 e8       	ldi	r30, 0x81	; 129
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1A0);			 // Pin mode CTC
  ec:	a0 e8       	ldi	r26, 0x80	; 128
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	8c 91       	ld	r24, X
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS12) | (1 << CS10); // Set CS12 and CS10 bits for 1024 prescaler
  f6:	80 81       	ld	r24, Z
  f8:	85 60       	ori	r24, 0x05	; 5
  fa:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);			 // enable timer compare interrupt
  fc:	ef e6       	ldi	r30, 0x6F	; 111
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <clearLeds>:
}


static void clearLeds(void)
{
	PORTD &= ~((1<<RED_LED)|(1<<GREEN_LED)|(1<<YELLOW_LED));			
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	8f 71       	andi	r24, 0x1F	; 31
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	08 95       	ret

00000110 <__vector_1>:
// Global variables
uint8_t gBtnFlag = 0;		 // btn flags for debounce
uint8_t gOverflowTim0 = 0;   // Overflow counter for timer 0

ISR(INT0_vect) // Button Interrupt
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
	if(gBtnFlag == 0)
 11e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <gBtnFlag>
 122:	81 11       	cpse	r24, r1
 124:	03 c0       	rjmp	.+6      	; 0x12c <__vector_1+0x1c>
	{
		gBtnFlag = 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <gBtnFlag>
	}
	if(gBtnFlag == 1) // Button is pressed
 12c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <gBtnFlag>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	41 f4       	brne	.+16     	; 0x144 <__vector_1+0x34>
	{
		TCNT0    = 0;			// Start counting the tim0 counter
 134:	16 bc       	out	0x26, r1	; 38
		PORTB   ^= (1<<PORTB5); // Toggle the pin for LED
 136:	95 b1       	in	r25, 0x05	; 5
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	89 27       	eor	r24, r25
 13c:	85 b9       	out	0x05, r24	; 5
		gBtnFlag = 2;			// Set a different state for debounce
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <gBtnFlag>
	}
	
}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_16>:

ISR(TIMER0_OVF_vect) // Debounce Timer 0 Interrupt
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
	gOverflowTim0++;
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(gBtnFlag == 2 && gOverflowTim0 >= 200) // Counter is reached and button was pressed
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <gBtnFlag>
 16e:	92 30       	cpi	r25, 0x02	; 2
 170:	31 f4       	brne	.+12     	; 0x17e <__vector_16+0x2c>
 172:	88 3c       	cpi	r24, 0xC8	; 200
 174:	20 f0       	brcs	.+8      	; 0x17e <__vector_16+0x2c>
	{
		gBtnFlag     = 0;		//
 176:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <gBtnFlag>
		gOverflowTim0 = 0;
 17a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__vector_11>:

ISR(TIMER1_COMPA_vect) // Blink Timer 1 Interrupt, whithout ctc pin
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
	PORTB ^= (1<<PORTB0);
 19a:	95 b1       	in	r25, 0x05	; 5
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	89 27       	eor	r24, r25
 1a0:	85 b9       	out	0x05, r24	; 5
}
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <main>:
}

int main(void)
{
	lightStates_t ls = STOP;
	cli();				// Disables all interrupts
 1b0:	f8 94       	cli
	pinSetup();			// GPIO pin setup - leds and buttons
 1b2:	0e 94 51 00 	call	0xa2	; 0xa2 <pinSetup>
	setupTim1Irq();		// Timer 1 setup blink led using CTC
 1b6:	0e 94 67 00 	call	0xce	; 0xce <setupTim1Irq>
	setupTim0Irq();		// Timer 0 for button debounce
 1ba:	0e 94 5e 00 	call	0xbc	; 0xbc <setupTim0Irq>
	btnSetupIrq();
 1be:	0e 94 48 00 	call	0x90	; 0x90 <btnSetupIrq>
	sei();				// Enables all interrupts
 1c2:	78 94       	sei
	PORTD &= ~((1<<RED_LED)|(1<<GREEN_LED)|(1<<YELLOW_LED));			
}

int main(void)
{
	lightStates_t ls = STOP;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
	sei();				// Enables all interrupts

    while (1) 
    {
		//btnPolling();
		switch(ls)
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	b1 f0       	breq	.+44     	; 0x1f6 <main+0x46>
 1ca:	28 f0       	brcs	.+10     	; 0x1d6 <main+0x26>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	19 f1       	breq	.+70     	; 0x216 <main+0x66>
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	99 f1       	breq	.+102    	; 0x23a <main+0x8a>
 1d4:	f8 cf       	rjmp	.-16     	; 0x1c6 <main+0x16>
		{
			case STOP:
				clearLeds();
 1d6:	0e 94 84 00 	call	0x108	; 0x108 <clearLeds>
				PORTD |= (1<<RED_LED);
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	3f e4       	ldi	r19, 0x4F	; 79
 1e4:	83 ec       	ldi	r24, 0xC3	; 195
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	30 40       	sbci	r19, 0x00	; 0
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x36>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x40>
 1f0:	00 00       	nop
				_delay_ms(4000);
				ls = PREPARE;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
				break;	
 1f4:	e8 cf       	rjmp	.-48     	; 0x1c6 <main+0x16>
			case PREPARE:
				clearLeds();
 1f6:	0e 94 84 00 	call	0x108	; 0x108 <clearLeds>
				PORTD |= (1<<RED_LED)|(1<<YELLOW_LED);
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	80 66       	ori	r24, 0x60	; 96
 1fe:	8b b9       	out	0x0b, r24	; 11
 200:	9f ef       	ldi	r25, 0xFF	; 255
 202:	27 ea       	ldi	r18, 0xA7	; 167
 204:	31 e6       	ldi	r19, 0x61	; 97
 206:	91 50       	subi	r25, 0x01	; 1
 208:	20 40       	sbci	r18, 0x00	; 0
 20a:	30 40       	sbci	r19, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x56>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x60>
 210:	00 00       	nop
				_delay_ms(2000);
				ls = GO;
 212:	82 e0       	ldi	r24, 0x02	; 2
				break;
 214:	d8 cf       	rjmp	.-80     	; 0x1c6 <main+0x16>
			case GO:
				clearLeds();
 216:	0e 94 84 00 	call	0x108	; 0x108 <clearLeds>
				PORTD |= (1<<GREEN_LED);
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	93 e2       	ldi	r25, 0x23	; 35
 224:	24 ef       	ldi	r18, 0xF4	; 244
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	81 50       	subi	r24, 0x01	; 1
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	20 40       	sbci	r18, 0x00	; 0
 22e:	30 40       	sbci	r19, 0x00	; 0
 230:	d9 f7       	brne	.-10     	; 0x228 <main+0x78>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x84>
 234:	00 00       	nop
				_delay_ms(6000);
				ls = STOP_IF_NOT_SAFE;
 236:	83 e0       	ldi	r24, 0x03	; 3
				break;
 238:	c6 cf       	rjmp	.-116    	; 0x1c6 <main+0x16>
			case STOP_IF_NOT_SAFE:
				clearLeds();
 23a:	0e 94 84 00 	call	0x108	; 0x108 <clearLeds>
				PORTD |= (1<<YELLOW_LED);
 23e:	8b b1       	in	r24, 0x0b	; 11
 240:	80 64       	ori	r24, 0x40	; 64
 242:	8b b9       	out	0x0b, r24	; 11
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	97 ea       	ldi	r25, 0xA7	; 167
 248:	21 e6       	ldi	r18, 0x61	; 97
 24a:	81 50       	subi	r24, 0x01	; 1
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	20 40       	sbci	r18, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x9a>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0xa4>
 254:	00 00       	nop
				_delay_ms(2000);
				ls = STOP;
 256:	80 e0       	ldi	r24, 0x00	; 0
				break;
 258:	b6 cf       	rjmp	.-148    	; 0x1c6 <main+0x16>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
