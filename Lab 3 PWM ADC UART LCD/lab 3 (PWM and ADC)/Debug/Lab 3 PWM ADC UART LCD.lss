
Lab 3 PWM ADC UART LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000d78  00000e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  00000e10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c9a  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f2  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005af  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a7  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000611  00000000  00000000  00003057  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
  9e:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <command>:
#include "main.h"

void command(char cmd) // RS = 0 (Command), R/W = 0 (Write), Enable is 1
{
	DATA    = cmd;
  a6:	8b b9       	out	0x0b, r24	; 11
	CONTROL |= (1<<EN);
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f e9       	ldi	r24, 0x9F	; 159
  b0:	9f e0       	ldi	r25, 0x0F	; 15
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <command+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <command+0x12>
  b8:	00 00       	nop
	_delay_ms(1);
	CONTROL &= 0x00;
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	15 b8       	out	0x05, r1	; 5
  be:	08 95       	ret

000000c0 <setData>:
}

void setData(char data) // RS = 1 R/W = 0, Enable = 1
{
  DATA = data;
  c0:	8b b9       	out	0x0b, r24	; 11
  CONTROL |= (1 << RS);  // RS = 1 for data
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	85 b9       	out	0x05, r24	; 5
  CONTROL &= ~(1 << RW); // RW = 0 for write
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8f 7e       	andi	r24, 0xEF	; 239
  cc:	85 b9       	out	0x05, r24	; 5
  CONTROL |= (1 << EN);  // Enable pulse
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	85 e0       	ldi	r24, 0x05	; 5
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <setData+0x16>
  da:	00 00       	nop
  _delay_us(1);          // Short delay
  CONTROL &= ~(1 << EN); // Disable pulse
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	8f 7d       	andi	r24, 0xDF	; 223
  e0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9f e1       	ldi	r25, 0x1F	; 31
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <setData+0x26>
  ea:	00 c0       	rjmp	.+0      	; 0xec <setData+0x2c>
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <clearScreen>:
  _delay_ms(2);          // Wait for the data to be written

}
void clearScreen()
{
	command(0b00000110);
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <command>
	command(0b00000001);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <command>
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <clearScreen+0x12>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <clearScreen+0x1c>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <lcdInit>:
	_delay_ms(20);
}

void lcdInit()
{
	DDRD |= 0xFF;
 110:	8a b1       	in	r24, 0x0a	; 10
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<< RS)|(1<< RW)|(1<< EN);
 116:	84 b1       	in	r24, 0x04	; 4
 118:	88 63       	ori	r24, 0x38	; 56
 11a:	84 b9       	out	0x04, r24	; 4
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	80 e7       	ldi	r24, 0x70	; 112
 120:	92 e0       	ldi	r25, 0x02	; 2
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <lcdInit+0x12>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcdInit+0x1c>
 12c:	00 00       	nop
	//clearScreen();
	
	_delay_ms(50); // Wait for the LCD to power up
	
	// 8-bit mode 2 rows
	command(0b00110000);
 12e:	80 e3       	ldi	r24, 0x30	; 48
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <command>
	
	// Display on/off
	command(0b00001100);
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <command>
	//setData('0');
	clearScreen();
 13a:	0e 94 78 00 	call	0xf0	; 0xf0 <clearScreen>
 13e:	08 95       	ret

00000140 <displayVoltageLcd>:




void displayVoltageLcd(char * word)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
	while (*word)
 146:	03 c0       	rjmp	.+6      	; 0x14e <displayVoltageLcd+0xe>
	setData(*word++);
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	0e 94 60 00 	call	0xc0	; 0xc0 <setData>



void displayVoltageLcd(char * word)
{
	while (*word)
 14e:	88 81       	ld	r24, Y
 150:	81 11       	cpse	r24, r1
 152:	fa cf       	rjmp	.-12     	; 0x148 <displayVoltageLcd+0x8>
	setData(*word++);
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <__vector_21>:
void lcdInit();



ISR(ADC_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	result = ADC;
 168:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 16c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 170:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 174:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <float_to_string>:


void float_to_string(float value, char* buffer, int precision) {
 186:	4f 92       	push	r4
 188:	5f 92       	push	r5
 18a:	6f 92       	push	r6
 18c:	7f 92       	push	r7
 18e:	af 92       	push	r10
 190:	bf 92       	push	r11
 192:	cf 92       	push	r12
 194:	df 92       	push	r13
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	2b 01       	movw	r4, r22
 1a4:	3c 01       	movw	r6, r24
 1a6:	7a 01       	movw	r14, r20
 1a8:	59 01       	movw	r10, r18
	int int_part = (int)value; 
 1aa:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__fixsfsi>
 1ae:	8b 01       	movw	r16, r22
	float remainder = value - int_part;
 1b0:	07 2e       	mov	r0, r23
 1b2:	00 0c       	add	r0, r0
 1b4:	88 0b       	sbc	r24, r24
 1b6:	99 0b       	sbc	r25, r25
 1b8:	0e 94 a4 02 	call	0x548	; 0x548 <__floatsisf>
 1bc:	9b 01       	movw	r18, r22
 1be:	ac 01       	movw	r20, r24
 1c0:	c3 01       	movw	r24, r6
 1c2:	b2 01       	movw	r22, r4
 1c4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__subsf3>
 1c8:	2b 01       	movw	r4, r22
 1ca:	3c 01       	movw	r6, r24
	int index = 0;
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0

	// Convert the integer part to string
	while (int_part != 0) {
 1d0:	0e c0       	rjmp	.+28     	; 0x1ee <float_to_string+0x68>
		buffer[index++] = int_part % 10 + '0';
 1d2:	f7 01       	movw	r30, r14
 1d4:	e2 0f       	add	r30, r18
 1d6:	f3 1f       	adc	r31, r19
 1d8:	c8 01       	movw	r24, r16
 1da:	6a e0       	ldi	r22, 0x0A	; 10
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	0e 94 9d 03 	call	0x73a	; 0x73a <__divmodhi4>
 1e2:	80 5d       	subi	r24, 0xD0	; 208
 1e4:	80 83       	st	Z, r24
		int_part /= 10;
 1e6:	06 2f       	mov	r16, r22
 1e8:	17 2f       	mov	r17, r23
	float remainder = value - int_part;
	int index = 0;

	// Convert the integer part to string
	while (int_part != 0) {
		buffer[index++] = int_part % 10 + '0';
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
	int int_part = (int)value; 
	float remainder = value - int_part;
	int index = 0;

	// Convert the integer part to string
	while (int_part != 0) {
 1ee:	01 15       	cp	r16, r1
 1f0:	11 05       	cpc	r17, r1
 1f2:	79 f7       	brne	.-34     	; 0x1d2 <float_to_string+0x4c>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e c0       	rjmp	.+28     	; 0x216 <float_to_string+0x90>
		int_part /= 10;
	}

	// Reverse the integer part in the buffer
	for (int i = 0; i < index / 2; i++) {
		char temp = buffer[i];
 1fa:	d7 01       	movw	r26, r14
 1fc:	a8 0f       	add	r26, r24
 1fe:	b9 1f       	adc	r27, r25
 200:	4c 91       	ld	r20, X
		buffer[i] = buffer[index - i - 1];
 202:	f9 01       	movw	r30, r18
 204:	e8 1b       	sub	r30, r24
 206:	f9 0b       	sbc	r31, r25
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	ee 0d       	add	r30, r14
 20c:	ff 1d       	adc	r31, r15
 20e:	50 81       	ld	r21, Z
 210:	5c 93       	st	X, r21
		buffer[index - i - 1] = temp;
 212:	40 83       	st	Z, r20
		buffer[index++] = int_part % 10 + '0';
		int_part /= 10;
	}

	// Reverse the integer part in the buffer
	for (int i = 0; i < index / 2; i++) {
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	a9 01       	movw	r20, r18
 218:	33 23       	and	r19, r19
 21a:	14 f4       	brge	.+4      	; 0x220 <float_to_string+0x9a>
 21c:	4f 5f       	subi	r20, 0xFF	; 255
 21e:	5f 4f       	sbci	r21, 0xFF	; 255
 220:	55 95       	asr	r21
 222:	47 95       	ror	r20
 224:	84 17       	cp	r24, r20
 226:	95 07       	cpc	r25, r21
 228:	44 f3       	brlt	.-48     	; 0x1fa <float_to_string+0x74>
		buffer[i] = buffer[index - i - 1];
		buffer[index - i - 1] = temp;
	}

	// Append the decimal point
	buffer[index++] = '.';
 22a:	e9 01       	movw	r28, r18
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	f7 01       	movw	r30, r14
 230:	e2 0f       	add	r30, r18
 232:	f3 1f       	adc	r31, r19
 234:	8e e2       	ldi	r24, 0x2E	; 46
 236:	80 83       	st	Z, r24

	// Convert the fractional part to string
	for (int i = 0; i < precision; i++) {
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	26 c0       	rjmp	.+76     	; 0x28a <float_to_string+0x104>
		remainder *= 10;
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	40 e2       	ldi	r20, 0x20	; 32
 244:	51 e4       	ldi	r21, 0x41	; 65
 246:	c3 01       	movw	r24, r6
 248:	b2 01       	movw	r22, r4
 24a:	0e 94 30 03 	call	0x660	; 0x660 <__mulsf3>
 24e:	2b 01       	movw	r4, r22
 250:	3c 01       	movw	r6, r24
		int digit = (int)remainder;
 252:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__fixsfsi>
		buffer[index++] = digit + '0';
 256:	6e 01       	movw	r12, r28
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	c2 1a       	sub	r12, r18
 25c:	d2 0a       	sbc	r13, r18
 25e:	ce 0d       	add	r28, r14
 260:	df 1d       	adc	r29, r15
 262:	20 e3       	ldi	r18, 0x30	; 48
 264:	26 0f       	add	r18, r22
 266:	28 83       	st	Y, r18
		remainder -= digit;
 268:	07 2e       	mov	r0, r23
 26a:	00 0c       	add	r0, r0
 26c:	88 0b       	sbc	r24, r24
 26e:	99 0b       	sbc	r25, r25
 270:	0e 94 a4 02 	call	0x548	; 0x548 <__floatsisf>
 274:	9b 01       	movw	r18, r22
 276:	ac 01       	movw	r20, r24
 278:	c3 01       	movw	r24, r6
 27a:	b2 01       	movw	r22, r4
 27c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__subsf3>
 280:	2b 01       	movw	r4, r22
 282:	3c 01       	movw	r6, r24

	// Append the decimal point
	buffer[index++] = '.';

	// Convert the fractional part to string
	for (int i = 0; i < precision; i++) {
 284:	0f 5f       	subi	r16, 0xFF	; 255
 286:	1f 4f       	sbci	r17, 0xFF	; 255
		remainder *= 10;
		int digit = (int)remainder;
		buffer[index++] = digit + '0';
 288:	e6 01       	movw	r28, r12

	// Append the decimal point
	buffer[index++] = '.';

	// Convert the fractional part to string
	for (int i = 0; i < precision; i++) {
 28a:	0a 15       	cp	r16, r10
 28c:	1b 05       	cpc	r17, r11
 28e:	bc f2       	brlt	.-82     	; 0x23e <float_to_string+0xb8>
		buffer[index++] = digit + '0';
		remainder -= digit;
	}

	// Null-terminate the string
	buffer[index] = '\0';
 290:	ce 0d       	add	r28, r14
 292:	df 1d       	adc	r29, r15
 294:	18 82       	st	Y, r1
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	df 90       	pop	r13
 2a4:	cf 90       	pop	r12
 2a6:	bf 90       	pop	r11
 2a8:	af 90       	pop	r10
 2aa:	7f 90       	pop	r7
 2ac:	6f 90       	pop	r6
 2ae:	5f 90       	pop	r5
 2b0:	4f 90       	pop	r4
 2b2:	08 95       	ret

000002b4 <getVoltage>:


void getVoltage()
{
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	64 97       	sbiw	r28, 0x14	; 20
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	f8 94       	cli
 2ce:	de bf       	out	0x3e, r29	; 62
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	cd bf       	out	0x3d, r28	; 61
	ADCSRA |= (1 << ADSC)|(1<< ADIE); // Start adc interrupts and adc 
 2d4:	0f 2e       	mov	r0, r31
 2d6:	fa e7       	ldi	r31, 0x7A	; 122
 2d8:	ef 2e       	mov	r14, r31
 2da:	f1 2c       	mov	r15, r1
 2dc:	f0 2d       	mov	r31, r0
 2de:	f7 01       	movw	r30, r14
 2e0:	80 81       	ld	r24, Z
 2e2:	88 64       	ori	r24, 0x48	; 72
 2e4:	80 83       	st	Z, r24
	char msg[10];
	char msg3[10];
	
	float resultf    = (float)(result/1024.0)*100;
 2e6:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 2ea:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 a2 02 	call	0x544	; 0x544 <__floatunsisf>
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	40 e8       	ldi	r20, 0x80	; 128
 2fc:	5a e3       	ldi	r21, 0x3A	; 58
 2fe:	0e 94 30 03 	call	0x660	; 0x660 <__mulsf3>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	48 ec       	ldi	r20, 0xC8	; 200
 308:	52 e4       	ldi	r21, 0x42	; 66
 30a:	0e 94 30 03 	call	0x660	; 0x660 <__mulsf3>
	uint8_t resultInt = (uint8_t)resultf;
 30e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixunssfsi>
 312:	d6 2e       	mov	r13, r22
	
	
	float_to_string((result*5.0)/1024.0, msg, 3);
 314:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 318:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 a2 02 	call	0x544	; 0x544 <__floatunsisf>
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 ea       	ldi	r20, 0xA0	; 160
 32a:	50 e4       	ldi	r21, 0x40	; 64
 32c:	0e 94 30 03 	call	0x660	; 0x660 <__mulsf3>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 e8       	ldi	r20, 0x80	; 128
 336:	5a e3       	ldi	r21, 0x3A	; 58
 338:	0e 94 30 03 	call	0x660	; 0x660 <__mulsf3>
 33c:	23 e0       	ldi	r18, 0x03	; 3
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	8e 01       	movw	r16, r28
 342:	0f 5f       	subi	r16, 0xFF	; 255
 344:	1f 4f       	sbci	r17, 0xFF	; 255
 346:	a8 01       	movw	r20, r16
 348:	0e 94 c3 00 	call	0x186	; 0x186 <float_to_string>
	sprintf(msg3, "%d", (uint8_t)resultInt);
 34c:	1f 92       	push	r1
 34e:	df 92       	push	r13
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	9f 93       	push	r25
 356:	8f 93       	push	r24
 358:	6e 01       	movw	r12, r28
 35a:	fb e0       	ldi	r31, 0x0B	; 11
 35c:	cf 0e       	add	r12, r31
 35e:	d1 1c       	adc	r13, r1
 360:	df 92       	push	r13
 362:	cf 92       	push	r12
 364:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <sprintf>
	strcat(msg," V ");
 368:	f8 01       	movw	r30, r16
 36a:	01 90       	ld	r0, Z+
 36c:	00 20       	and	r0, r0
 36e:	e9 f7       	brne	.-6      	; 0x36a <getVoltage+0xb6>
 370:	31 97       	sbiw	r30, 0x01	; 1
 372:	80 e2       	ldi	r24, 0x20	; 32
 374:	96 e5       	ldi	r25, 0x56	; 86
 376:	91 83       	std	Z+1, r25	; 0x01
 378:	80 83       	st	Z, r24
 37a:	80 e2       	ldi	r24, 0x20	; 32
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	93 83       	std	Z+3, r25	; 0x03
 380:	82 83       	std	Z+2, r24	; 0x02
	strcat(msg, msg3);
 382:	b6 01       	movw	r22, r12
 384:	c8 01       	movw	r24, r16
 386:	0e 94 c5 03 	call	0x78a	; 0x78a <strcat>
	strcat(msg, "%");
 38a:	f8 01       	movw	r30, r16
 38c:	01 90       	ld	r0, Z+
 38e:	00 20       	and	r0, r0
 390:	e9 f7       	brne	.-6      	; 0x38c <getVoltage+0xd8>
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	85 e2       	ldi	r24, 0x25	; 37
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	91 83       	std	Z+1, r25	; 0x01
 39a:	80 83       	st	Z, r24
	
	displayVoltageLcd(msg);
 39c:	c8 01       	movw	r24, r16
 39e:	0e 94 a0 00 	call	0x140	; 0x140 <displayVoltageLcd>
 3a2:	2f ef       	ldi	r18, 0xFF	; 255
 3a4:	81 ee       	ldi	r24, 0xE1	; 225
 3a6:	94 e0       	ldi	r25, 0x04	; 4
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <getVoltage+0xf4>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <getVoltage+0xfe>
 3b2:	00 00       	nop
	_delay_ms(100);						 // Intentional Delay
	clearScreen();
 3b4:	0e 94 78 00 	call	0xf0	; 0xf0 <clearScreen>
	//usartTransmitString(msg);
	ADCSRA &= ~((1 << ADSC)|(1<< ADIE)); // Stop adc interrupts and adc	
 3b8:	f7 01       	movw	r30, r14
 3ba:	80 81       	ld	r24, Z
 3bc:	87 7b       	andi	r24, 0xB7	; 183
 3be:	80 83       	st	Z, r24
}
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	64 96       	adiw	r28, 0x14	; 20
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	f8 94       	cli
 3d2:	de bf       	out	0x3e, r29	; 62
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	cd bf       	out	0x3d, r28	; 61
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	ff 90       	pop	r15
 3e2:	ef 90       	pop	r14
 3e4:	df 90       	pop	r13
 3e6:	cf 90       	pop	r12
 3e8:	08 95       	ret

000003ea <main>:
int main(void)
{

	// Setup usart
	//USART_Init(MYUBRR);
	lcdInit();
 3ea:	0e 94 88 00 	call	0x110	; 0x110 <lcdInit>
	//adcSetup();
	sei();
 3ee:	78 94       	sei
    {
		//PORTB |= (1<<PORTB5);
		//PORTB |= (1<<PORTB2);
	
	
		float resultf     = (float)(result/1024.0)*100;
 3f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
		uint8_t resultInt = (uint8_t)resultf;
		getVoltage();
 3f8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <getVoltage>
 3fc:	f9 cf       	rjmp	.-14     	; 0x3f0 <main+0x6>

000003fe <__subsf3>:
 3fe:	50 58       	subi	r21, 0x80	; 128

00000400 <__addsf3>:
 400:	bb 27       	eor	r27, r27
 402:	aa 27       	eor	r26, r26
 404:	0e 94 17 02 	call	0x42e	; 0x42e <__addsf3x>
 408:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_round>
 40c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_pscA>
 410:	38 f0       	brcs	.+14     	; 0x420 <__addsf3+0x20>
 412:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_pscB>
 416:	20 f0       	brcs	.+8      	; 0x420 <__addsf3+0x20>
 418:	39 f4       	brne	.+14     	; 0x428 <__addsf3+0x28>
 41a:	9f 3f       	cpi	r25, 0xFF	; 255
 41c:	19 f4       	brne	.+6      	; 0x424 <__addsf3+0x24>
 41e:	26 f4       	brtc	.+8      	; 0x428 <__addsf3+0x28>
 420:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_nan>
 424:	0e f4       	brtc	.+2      	; 0x428 <__addsf3+0x28>
 426:	e0 95       	com	r30
 428:	e7 fb       	bst	r30, 7
 42a:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>

0000042e <__addsf3x>:
 42e:	e9 2f       	mov	r30, r25
 430:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_split3>
 434:	58 f3       	brcs	.-42     	; 0x40c <__addsf3+0xc>
 436:	ba 17       	cp	r27, r26
 438:	62 07       	cpc	r22, r18
 43a:	73 07       	cpc	r23, r19
 43c:	84 07       	cpc	r24, r20
 43e:	95 07       	cpc	r25, r21
 440:	20 f0       	brcs	.+8      	; 0x44a <__addsf3x+0x1c>
 442:	79 f4       	brne	.+30     	; 0x462 <__addsf3x+0x34>
 444:	a6 f5       	brtc	.+104    	; 0x4ae <__addsf3x+0x80>
 446:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_zero>
 44a:	0e f4       	brtc	.+2      	; 0x44e <__addsf3x+0x20>
 44c:	e0 95       	com	r30
 44e:	0b 2e       	mov	r0, r27
 450:	ba 2f       	mov	r27, r26
 452:	a0 2d       	mov	r26, r0
 454:	0b 01       	movw	r0, r22
 456:	b9 01       	movw	r22, r18
 458:	90 01       	movw	r18, r0
 45a:	0c 01       	movw	r0, r24
 45c:	ca 01       	movw	r24, r20
 45e:	a0 01       	movw	r20, r0
 460:	11 24       	eor	r1, r1
 462:	ff 27       	eor	r31, r31
 464:	59 1b       	sub	r21, r25
 466:	99 f0       	breq	.+38     	; 0x48e <__addsf3x+0x60>
 468:	59 3f       	cpi	r21, 0xF9	; 249
 46a:	50 f4       	brcc	.+20     	; 0x480 <__addsf3x+0x52>
 46c:	50 3e       	cpi	r21, 0xE0	; 224
 46e:	68 f1       	brcs	.+90     	; 0x4ca <__addsf3x+0x9c>
 470:	1a 16       	cp	r1, r26
 472:	f0 40       	sbci	r31, 0x00	; 0
 474:	a2 2f       	mov	r26, r18
 476:	23 2f       	mov	r18, r19
 478:	34 2f       	mov	r19, r20
 47a:	44 27       	eor	r20, r20
 47c:	58 5f       	subi	r21, 0xF8	; 248
 47e:	f3 cf       	rjmp	.-26     	; 0x466 <__addsf3x+0x38>
 480:	46 95       	lsr	r20
 482:	37 95       	ror	r19
 484:	27 95       	ror	r18
 486:	a7 95       	ror	r26
 488:	f0 40       	sbci	r31, 0x00	; 0
 48a:	53 95       	inc	r21
 48c:	c9 f7       	brne	.-14     	; 0x480 <__addsf3x+0x52>
 48e:	7e f4       	brtc	.+30     	; 0x4ae <__addsf3x+0x80>
 490:	1f 16       	cp	r1, r31
 492:	ba 0b       	sbc	r27, r26
 494:	62 0b       	sbc	r22, r18
 496:	73 0b       	sbc	r23, r19
 498:	84 0b       	sbc	r24, r20
 49a:	ba f0       	brmi	.+46     	; 0x4ca <__addsf3x+0x9c>
 49c:	91 50       	subi	r25, 0x01	; 1
 49e:	a1 f0       	breq	.+40     	; 0x4c8 <__addsf3x+0x9a>
 4a0:	ff 0f       	add	r31, r31
 4a2:	bb 1f       	adc	r27, r27
 4a4:	66 1f       	adc	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	c2 f7       	brpl	.-16     	; 0x49c <__addsf3x+0x6e>
 4ac:	0e c0       	rjmp	.+28     	; 0x4ca <__addsf3x+0x9c>
 4ae:	ba 0f       	add	r27, r26
 4b0:	62 1f       	adc	r22, r18
 4b2:	73 1f       	adc	r23, r19
 4b4:	84 1f       	adc	r24, r20
 4b6:	48 f4       	brcc	.+18     	; 0x4ca <__addsf3x+0x9c>
 4b8:	87 95       	ror	r24
 4ba:	77 95       	ror	r23
 4bc:	67 95       	ror	r22
 4be:	b7 95       	ror	r27
 4c0:	f7 95       	ror	r31
 4c2:	9e 3f       	cpi	r25, 0xFE	; 254
 4c4:	08 f0       	brcs	.+2      	; 0x4c8 <__addsf3x+0x9a>
 4c6:	b0 cf       	rjmp	.-160    	; 0x428 <__addsf3+0x28>
 4c8:	93 95       	inc	r25
 4ca:	88 0f       	add	r24, r24
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <__addsf3x+0xa2>
 4ce:	99 27       	eor	r25, r25
 4d0:	ee 0f       	add	r30, r30
 4d2:	97 95       	ror	r25
 4d4:	87 95       	ror	r24
 4d6:	08 95       	ret

000004d8 <__fixsfsi>:
 4d8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixunssfsi>
 4dc:	68 94       	set
 4de:	b1 11       	cpse	r27, r1
 4e0:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_szero>
 4e4:	08 95       	ret

000004e6 <__fixunssfsi>:
 4e6:	0e 94 0f 03 	call	0x61e	; 0x61e <__fp_splitA>
 4ea:	88 f0       	brcs	.+34     	; 0x50e <__fixunssfsi+0x28>
 4ec:	9f 57       	subi	r25, 0x7F	; 127
 4ee:	98 f0       	brcs	.+38     	; 0x516 <__fixunssfsi+0x30>
 4f0:	b9 2f       	mov	r27, r25
 4f2:	99 27       	eor	r25, r25
 4f4:	b7 51       	subi	r27, 0x17	; 23
 4f6:	b0 f0       	brcs	.+44     	; 0x524 <__fixunssfsi+0x3e>
 4f8:	e1 f0       	breq	.+56     	; 0x532 <__fixunssfsi+0x4c>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	1a f0       	brmi	.+6      	; 0x50a <__fixunssfsi+0x24>
 504:	ba 95       	dec	r27
 506:	c9 f7       	brne	.-14     	; 0x4fa <__fixunssfsi+0x14>
 508:	14 c0       	rjmp	.+40     	; 0x532 <__fixunssfsi+0x4c>
 50a:	b1 30       	cpi	r27, 0x01	; 1
 50c:	91 f0       	breq	.+36     	; 0x532 <__fixunssfsi+0x4c>
 50e:	0e 94 29 03 	call	0x652	; 0x652 <__fp_zero>
 512:	b1 e0       	ldi	r27, 0x01	; 1
 514:	08 95       	ret
 516:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_zero>
 51a:	67 2f       	mov	r22, r23
 51c:	78 2f       	mov	r23, r24
 51e:	88 27       	eor	r24, r24
 520:	b8 5f       	subi	r27, 0xF8	; 248
 522:	39 f0       	breq	.+14     	; 0x532 <__fixunssfsi+0x4c>
 524:	b9 3f       	cpi	r27, 0xF9	; 249
 526:	cc f3       	brlt	.-14     	; 0x51a <__fixunssfsi+0x34>
 528:	86 95       	lsr	r24
 52a:	77 95       	ror	r23
 52c:	67 95       	ror	r22
 52e:	b3 95       	inc	r27
 530:	d9 f7       	brne	.-10     	; 0x528 <__fixunssfsi+0x42>
 532:	3e f4       	brtc	.+14     	; 0x542 <__fixunssfsi+0x5c>
 534:	90 95       	com	r25
 536:	80 95       	com	r24
 538:	70 95       	com	r23
 53a:	61 95       	neg	r22
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	08 95       	ret

00000544 <__floatunsisf>:
 544:	e8 94       	clt
 546:	09 c0       	rjmp	.+18     	; 0x55a <__floatsisf+0x12>

00000548 <__floatsisf>:
 548:	97 fb       	bst	r25, 7
 54a:	3e f4       	brtc	.+14     	; 0x55a <__floatsisf+0x12>
 54c:	90 95       	com	r25
 54e:	80 95       	com	r24
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	99 23       	and	r25, r25
 55c:	a9 f0       	breq	.+42     	; 0x588 <__floatsisf+0x40>
 55e:	f9 2f       	mov	r31, r25
 560:	96 e9       	ldi	r25, 0x96	; 150
 562:	bb 27       	eor	r27, r27
 564:	93 95       	inc	r25
 566:	f6 95       	lsr	r31
 568:	87 95       	ror	r24
 56a:	77 95       	ror	r23
 56c:	67 95       	ror	r22
 56e:	b7 95       	ror	r27
 570:	f1 11       	cpse	r31, r1
 572:	f8 cf       	rjmp	.-16     	; 0x564 <__floatsisf+0x1c>
 574:	fa f4       	brpl	.+62     	; 0x5b4 <__floatsisf+0x6c>
 576:	bb 0f       	add	r27, r27
 578:	11 f4       	brne	.+4      	; 0x57e <__floatsisf+0x36>
 57a:	60 ff       	sbrs	r22, 0
 57c:	1b c0       	rjmp	.+54     	; 0x5b4 <__floatsisf+0x6c>
 57e:	6f 5f       	subi	r22, 0xFF	; 255
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	16 c0       	rjmp	.+44     	; 0x5b4 <__floatsisf+0x6c>
 588:	88 23       	and	r24, r24
 58a:	11 f0       	breq	.+4      	; 0x590 <__floatsisf+0x48>
 58c:	96 e9       	ldi	r25, 0x96	; 150
 58e:	11 c0       	rjmp	.+34     	; 0x5b2 <__floatsisf+0x6a>
 590:	77 23       	and	r23, r23
 592:	21 f0       	breq	.+8      	; 0x59c <__floatsisf+0x54>
 594:	9e e8       	ldi	r25, 0x8E	; 142
 596:	87 2f       	mov	r24, r23
 598:	76 2f       	mov	r23, r22
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <__floatsisf+0x5e>
 59c:	66 23       	and	r22, r22
 59e:	71 f0       	breq	.+28     	; 0x5bc <__floatsisf+0x74>
 5a0:	96 e8       	ldi	r25, 0x86	; 134
 5a2:	86 2f       	mov	r24, r22
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	2a f0       	brmi	.+10     	; 0x5b4 <__floatsisf+0x6c>
 5aa:	9a 95       	dec	r25
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	da f7       	brpl	.-10     	; 0x5aa <__floatsisf+0x62>
 5b4:	88 0f       	add	r24, r24
 5b6:	96 95       	lsr	r25
 5b8:	87 95       	ror	r24
 5ba:	97 f9       	bld	r25, 7
 5bc:	08 95       	ret

000005be <__fp_inf>:
 5be:	97 f9       	bld	r25, 7
 5c0:	9f 67       	ori	r25, 0x7F	; 127
 5c2:	80 e8       	ldi	r24, 0x80	; 128
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	08 95       	ret

000005ca <__fp_nan>:
 5ca:	9f ef       	ldi	r25, 0xFF	; 255
 5cc:	80 ec       	ldi	r24, 0xC0	; 192
 5ce:	08 95       	ret

000005d0 <__fp_pscA>:
 5d0:	00 24       	eor	r0, r0
 5d2:	0a 94       	dec	r0
 5d4:	16 16       	cp	r1, r22
 5d6:	17 06       	cpc	r1, r23
 5d8:	18 06       	cpc	r1, r24
 5da:	09 06       	cpc	r0, r25
 5dc:	08 95       	ret

000005de <__fp_pscB>:
 5de:	00 24       	eor	r0, r0
 5e0:	0a 94       	dec	r0
 5e2:	12 16       	cp	r1, r18
 5e4:	13 06       	cpc	r1, r19
 5e6:	14 06       	cpc	r1, r20
 5e8:	05 06       	cpc	r0, r21
 5ea:	08 95       	ret

000005ec <__fp_round>:
 5ec:	09 2e       	mov	r0, r25
 5ee:	03 94       	inc	r0
 5f0:	00 0c       	add	r0, r0
 5f2:	11 f4       	brne	.+4      	; 0x5f8 <__fp_round+0xc>
 5f4:	88 23       	and	r24, r24
 5f6:	52 f0       	brmi	.+20     	; 0x60c <__fp_round+0x20>
 5f8:	bb 0f       	add	r27, r27
 5fa:	40 f4       	brcc	.+16     	; 0x60c <__fp_round+0x20>
 5fc:	bf 2b       	or	r27, r31
 5fe:	11 f4       	brne	.+4      	; 0x604 <__fp_round+0x18>
 600:	60 ff       	sbrs	r22, 0
 602:	04 c0       	rjmp	.+8      	; 0x60c <__fp_round+0x20>
 604:	6f 5f       	subi	r22, 0xFF	; 255
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	8f 4f       	sbci	r24, 0xFF	; 255
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	08 95       	ret

0000060e <__fp_split3>:
 60e:	57 fd       	sbrc	r21, 7
 610:	90 58       	subi	r25, 0x80	; 128
 612:	44 0f       	add	r20, r20
 614:	55 1f       	adc	r21, r21
 616:	59 f0       	breq	.+22     	; 0x62e <__fp_splitA+0x10>
 618:	5f 3f       	cpi	r21, 0xFF	; 255
 61a:	71 f0       	breq	.+28     	; 0x638 <__fp_splitA+0x1a>
 61c:	47 95       	ror	r20

0000061e <__fp_splitA>:
 61e:	88 0f       	add	r24, r24
 620:	97 fb       	bst	r25, 7
 622:	99 1f       	adc	r25, r25
 624:	61 f0       	breq	.+24     	; 0x63e <__fp_splitA+0x20>
 626:	9f 3f       	cpi	r25, 0xFF	; 255
 628:	79 f0       	breq	.+30     	; 0x648 <__fp_splitA+0x2a>
 62a:	87 95       	ror	r24
 62c:	08 95       	ret
 62e:	12 16       	cp	r1, r18
 630:	13 06       	cpc	r1, r19
 632:	14 06       	cpc	r1, r20
 634:	55 1f       	adc	r21, r21
 636:	f2 cf       	rjmp	.-28     	; 0x61c <__fp_split3+0xe>
 638:	46 95       	lsr	r20
 63a:	f1 df       	rcall	.-30     	; 0x61e <__fp_splitA>
 63c:	08 c0       	rjmp	.+16     	; 0x64e <__fp_splitA+0x30>
 63e:	16 16       	cp	r1, r22
 640:	17 06       	cpc	r1, r23
 642:	18 06       	cpc	r1, r24
 644:	99 1f       	adc	r25, r25
 646:	f1 cf       	rjmp	.-30     	; 0x62a <__fp_splitA+0xc>
 648:	86 95       	lsr	r24
 64a:	71 05       	cpc	r23, r1
 64c:	61 05       	cpc	r22, r1
 64e:	08 94       	sec
 650:	08 95       	ret

00000652 <__fp_zero>:
 652:	e8 94       	clt

00000654 <__fp_szero>:
 654:	bb 27       	eor	r27, r27
 656:	66 27       	eor	r22, r22
 658:	77 27       	eor	r23, r23
 65a:	cb 01       	movw	r24, r22
 65c:	97 f9       	bld	r25, 7
 65e:	08 95       	ret

00000660 <__mulsf3>:
 660:	0e 94 43 03 	call	0x686	; 0x686 <__mulsf3x>
 664:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_round>
 668:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_pscA>
 66c:	38 f0       	brcs	.+14     	; 0x67c <__mulsf3+0x1c>
 66e:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_pscB>
 672:	20 f0       	brcs	.+8      	; 0x67c <__mulsf3+0x1c>
 674:	95 23       	and	r25, r21
 676:	11 f0       	breq	.+4      	; 0x67c <__mulsf3+0x1c>
 678:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 67c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_nan>
 680:	11 24       	eor	r1, r1
 682:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_szero>

00000686 <__mulsf3x>:
 686:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_split3>
 68a:	70 f3       	brcs	.-36     	; 0x668 <__mulsf3+0x8>

0000068c <__mulsf3_pse>:
 68c:	95 9f       	mul	r25, r21
 68e:	c1 f3       	breq	.-16     	; 0x680 <__mulsf3+0x20>
 690:	95 0f       	add	r25, r21
 692:	50 e0       	ldi	r21, 0x00	; 0
 694:	55 1f       	adc	r21, r21
 696:	62 9f       	mul	r22, r18
 698:	f0 01       	movw	r30, r0
 69a:	72 9f       	mul	r23, r18
 69c:	bb 27       	eor	r27, r27
 69e:	f0 0d       	add	r31, r0
 6a0:	b1 1d       	adc	r27, r1
 6a2:	63 9f       	mul	r22, r19
 6a4:	aa 27       	eor	r26, r26
 6a6:	f0 0d       	add	r31, r0
 6a8:	b1 1d       	adc	r27, r1
 6aa:	aa 1f       	adc	r26, r26
 6ac:	64 9f       	mul	r22, r20
 6ae:	66 27       	eor	r22, r22
 6b0:	b0 0d       	add	r27, r0
 6b2:	a1 1d       	adc	r26, r1
 6b4:	66 1f       	adc	r22, r22
 6b6:	82 9f       	mul	r24, r18
 6b8:	22 27       	eor	r18, r18
 6ba:	b0 0d       	add	r27, r0
 6bc:	a1 1d       	adc	r26, r1
 6be:	62 1f       	adc	r22, r18
 6c0:	73 9f       	mul	r23, r19
 6c2:	b0 0d       	add	r27, r0
 6c4:	a1 1d       	adc	r26, r1
 6c6:	62 1f       	adc	r22, r18
 6c8:	83 9f       	mul	r24, r19
 6ca:	a0 0d       	add	r26, r0
 6cc:	61 1d       	adc	r22, r1
 6ce:	22 1f       	adc	r18, r18
 6d0:	74 9f       	mul	r23, r20
 6d2:	33 27       	eor	r19, r19
 6d4:	a0 0d       	add	r26, r0
 6d6:	61 1d       	adc	r22, r1
 6d8:	23 1f       	adc	r18, r19
 6da:	84 9f       	mul	r24, r20
 6dc:	60 0d       	add	r22, r0
 6de:	21 1d       	adc	r18, r1
 6e0:	82 2f       	mov	r24, r18
 6e2:	76 2f       	mov	r23, r22
 6e4:	6a 2f       	mov	r22, r26
 6e6:	11 24       	eor	r1, r1
 6e8:	9f 57       	subi	r25, 0x7F	; 127
 6ea:	50 40       	sbci	r21, 0x00	; 0
 6ec:	9a f0       	brmi	.+38     	; 0x714 <__mulsf3_pse+0x88>
 6ee:	f1 f0       	breq	.+60     	; 0x72c <__mulsf3_pse+0xa0>
 6f0:	88 23       	and	r24, r24
 6f2:	4a f0       	brmi	.+18     	; 0x706 <__mulsf3_pse+0x7a>
 6f4:	ee 0f       	add	r30, r30
 6f6:	ff 1f       	adc	r31, r31
 6f8:	bb 1f       	adc	r27, r27
 6fa:	66 1f       	adc	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	88 1f       	adc	r24, r24
 700:	91 50       	subi	r25, 0x01	; 1
 702:	50 40       	sbci	r21, 0x00	; 0
 704:	a9 f7       	brne	.-22     	; 0x6f0 <__mulsf3_pse+0x64>
 706:	9e 3f       	cpi	r25, 0xFE	; 254
 708:	51 05       	cpc	r21, r1
 70a:	80 f0       	brcs	.+32     	; 0x72c <__mulsf3_pse+0xa0>
 70c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 710:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_szero>
 714:	5f 3f       	cpi	r21, 0xFF	; 255
 716:	e4 f3       	brlt	.-8      	; 0x710 <__mulsf3_pse+0x84>
 718:	98 3e       	cpi	r25, 0xE8	; 232
 71a:	d4 f3       	brlt	.-12     	; 0x710 <__mulsf3_pse+0x84>
 71c:	86 95       	lsr	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b7 95       	ror	r27
 724:	f7 95       	ror	r31
 726:	e7 95       	ror	r30
 728:	9f 5f       	subi	r25, 0xFF	; 255
 72a:	c1 f7       	brne	.-16     	; 0x71c <__mulsf3_pse+0x90>
 72c:	fe 2b       	or	r31, r30
 72e:	88 0f       	add	r24, r24
 730:	91 1d       	adc	r25, r1
 732:	96 95       	lsr	r25
 734:	87 95       	ror	r24
 736:	97 f9       	bld	r25, 7
 738:	08 95       	ret

0000073a <__divmodhi4>:
 73a:	97 fb       	bst	r25, 7
 73c:	07 2e       	mov	r0, r23
 73e:	16 f4       	brtc	.+4      	; 0x744 <__divmodhi4+0xa>
 740:	00 94       	com	r0
 742:	07 d0       	rcall	.+14     	; 0x752 <__divmodhi4_neg1>
 744:	77 fd       	sbrc	r23, 7
 746:	09 d0       	rcall	.+18     	; 0x75a <__divmodhi4_neg2>
 748:	0e 94 b1 03 	call	0x762	; 0x762 <__udivmodhi4>
 74c:	07 fc       	sbrc	r0, 7
 74e:	05 d0       	rcall	.+10     	; 0x75a <__divmodhi4_neg2>
 750:	3e f4       	brtc	.+14     	; 0x760 <__divmodhi4_exit>

00000752 <__divmodhi4_neg1>:
 752:	90 95       	com	r25
 754:	81 95       	neg	r24
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	08 95       	ret

0000075a <__divmodhi4_neg2>:
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255

00000760 <__divmodhi4_exit>:
 760:	08 95       	ret

00000762 <__udivmodhi4>:
 762:	aa 1b       	sub	r26, r26
 764:	bb 1b       	sub	r27, r27
 766:	51 e1       	ldi	r21, 0x11	; 17
 768:	07 c0       	rjmp	.+14     	; 0x778 <__udivmodhi4_ep>

0000076a <__udivmodhi4_loop>:
 76a:	aa 1f       	adc	r26, r26
 76c:	bb 1f       	adc	r27, r27
 76e:	a6 17       	cp	r26, r22
 770:	b7 07       	cpc	r27, r23
 772:	10 f0       	brcs	.+4      	; 0x778 <__udivmodhi4_ep>
 774:	a6 1b       	sub	r26, r22
 776:	b7 0b       	sbc	r27, r23

00000778 <__udivmodhi4_ep>:
 778:	88 1f       	adc	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	5a 95       	dec	r21
 77e:	a9 f7       	brne	.-22     	; 0x76a <__udivmodhi4_loop>
 780:	80 95       	com	r24
 782:	90 95       	com	r25
 784:	bc 01       	movw	r22, r24
 786:	cd 01       	movw	r24, r26
 788:	08 95       	ret

0000078a <strcat>:
 78a:	fb 01       	movw	r30, r22
 78c:	dc 01       	movw	r26, r24
 78e:	0d 90       	ld	r0, X+
 790:	00 20       	and	r0, r0
 792:	e9 f7       	brne	.-6      	; 0x78e <strcat+0x4>
 794:	11 97       	sbiw	r26, 0x01	; 1
 796:	01 90       	ld	r0, Z+
 798:	0d 92       	st	X+, r0
 79a:	00 20       	and	r0, r0
 79c:	e1 f7       	brne	.-8      	; 0x796 <strcat+0xc>
 79e:	08 95       	ret

000007a0 <sprintf>:
 7a0:	ae e0       	ldi	r26, 0x0E	; 14
 7a2:	b0 e0       	ldi	r27, 0x00	; 0
 7a4:	e6 ed       	ldi	r30, 0xD6	; 214
 7a6:	f3 e0       	ldi	r31, 0x03	; 3
 7a8:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__prologue_saves__+0x1c>
 7ac:	0d 89       	ldd	r16, Y+21	; 0x15
 7ae:	1e 89       	ldd	r17, Y+22	; 0x16
 7b0:	86 e0       	ldi	r24, 0x06	; 6
 7b2:	8c 83       	std	Y+4, r24	; 0x04
 7b4:	1a 83       	std	Y+2, r17	; 0x02
 7b6:	09 83       	std	Y+1, r16	; 0x01
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	9f e7       	ldi	r25, 0x7F	; 127
 7bc:	9e 83       	std	Y+6, r25	; 0x06
 7be:	8d 83       	std	Y+5, r24	; 0x05
 7c0:	ae 01       	movw	r20, r28
 7c2:	47 5e       	subi	r20, 0xE7	; 231
 7c4:	5f 4f       	sbci	r21, 0xFF	; 255
 7c6:	6f 89       	ldd	r22, Y+23	; 0x17
 7c8:	78 8d       	ldd	r23, Y+24	; 0x18
 7ca:	ce 01       	movw	r24, r28
 7cc:	01 96       	adiw	r24, 0x01	; 1
 7ce:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <vfprintf>
 7d2:	ef 81       	ldd	r30, Y+7	; 0x07
 7d4:	f8 85       	ldd	r31, Y+8	; 0x08
 7d6:	e0 0f       	add	r30, r16
 7d8:	f1 1f       	adc	r31, r17
 7da:	10 82       	st	Z, r1
 7dc:	2e 96       	adiw	r28, 0x0e	; 14
 7de:	e4 e0       	ldi	r30, 0x04	; 4
 7e0:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__epilogue_restores__+0x1c>

000007e4 <vfprintf>:
 7e4:	ab e0       	ldi	r26, 0x0B	; 11
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
 7e8:	e8 ef       	ldi	r30, 0xF8	; 248
 7ea:	f3 e0       	ldi	r31, 0x03	; 3
 7ec:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__prologue_saves__>
 7f0:	6c 01       	movw	r12, r24
 7f2:	7b 01       	movw	r14, r22
 7f4:	8a 01       	movw	r16, r20
 7f6:	fc 01       	movw	r30, r24
 7f8:	17 82       	std	Z+7, r1	; 0x07
 7fa:	16 82       	std	Z+6, r1	; 0x06
 7fc:	83 81       	ldd	r24, Z+3	; 0x03
 7fe:	81 ff       	sbrs	r24, 1
 800:	cc c1       	rjmp	.+920    	; 0xb9a <__stack+0x29b>
 802:	ce 01       	movw	r24, r28
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	3c 01       	movw	r6, r24
 808:	f6 01       	movw	r30, r12
 80a:	93 81       	ldd	r25, Z+3	; 0x03
 80c:	f7 01       	movw	r30, r14
 80e:	93 fd       	sbrc	r25, 3
 810:	85 91       	lpm	r24, Z+
 812:	93 ff       	sbrs	r25, 3
 814:	81 91       	ld	r24, Z+
 816:	7f 01       	movw	r14, r30
 818:	88 23       	and	r24, r24
 81a:	09 f4       	brne	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81c:	ba c1       	rjmp	.+884    	; 0xb92 <__stack+0x293>
 81e:	85 32       	cpi	r24, 0x25	; 37
 820:	39 f4       	brne	.+14     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 822:	93 fd       	sbrc	r25, 3
 824:	85 91       	lpm	r24, Z+
 826:	93 ff       	sbrs	r25, 3
 828:	81 91       	ld	r24, Z+
 82a:	7f 01       	movw	r14, r30
 82c:	85 32       	cpi	r24, 0x25	; 37
 82e:	29 f4       	brne	.+10     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 830:	b6 01       	movw	r22, r12
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 838:	e7 cf       	rjmp	.-50     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 83a:	91 2c       	mov	r9, r1
 83c:	21 2c       	mov	r2, r1
 83e:	31 2c       	mov	r3, r1
 840:	ff e1       	ldi	r31, 0x1F	; 31
 842:	f3 15       	cp	r31, r3
 844:	d8 f0       	brcs	.+54     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 846:	8b 32       	cpi	r24, 0x2B	; 43
 848:	79 f0       	breq	.+30     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 84a:	38 f4       	brcc	.+14     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 84c:	80 32       	cpi	r24, 0x20	; 32
 84e:	79 f0       	breq	.+30     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 850:	83 32       	cpi	r24, 0x23	; 35
 852:	a1 f4       	brne	.+40     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 854:	23 2d       	mov	r18, r3
 856:	20 61       	ori	r18, 0x10	; 16
 858:	1d c0       	rjmp	.+58     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 85a:	8d 32       	cpi	r24, 0x2D	; 45
 85c:	61 f0       	breq	.+24     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 85e:	80 33       	cpi	r24, 0x30	; 48
 860:	69 f4       	brne	.+26     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 862:	23 2d       	mov	r18, r3
 864:	21 60       	ori	r18, 0x01	; 1
 866:	16 c0       	rjmp	.+44     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 868:	83 2d       	mov	r24, r3
 86a:	82 60       	ori	r24, 0x02	; 2
 86c:	38 2e       	mov	r3, r24
 86e:	e3 2d       	mov	r30, r3
 870:	e4 60       	ori	r30, 0x04	; 4
 872:	3e 2e       	mov	r3, r30
 874:	2a c0       	rjmp	.+84     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 876:	f3 2d       	mov	r31, r3
 878:	f8 60       	ori	r31, 0x08	; 8
 87a:	1d c0       	rjmp	.+58     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 87c:	37 fc       	sbrc	r3, 7
 87e:	2d c0       	rjmp	.+90     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 880:	20 ed       	ldi	r18, 0xD0	; 208
 882:	28 0f       	add	r18, r24
 884:	2a 30       	cpi	r18, 0x0A	; 10
 886:	40 f0       	brcs	.+16     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 888:	8e 32       	cpi	r24, 0x2E	; 46
 88a:	b9 f4       	brne	.+46     	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
 88c:	36 fc       	sbrc	r3, 6
 88e:	81 c1       	rjmp	.+770    	; 0xb92 <__stack+0x293>
 890:	23 2d       	mov	r18, r3
 892:	20 64       	ori	r18, 0x40	; 64
 894:	32 2e       	mov	r3, r18
 896:	19 c0       	rjmp	.+50     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 898:	36 fe       	sbrs	r3, 6
 89a:	06 c0       	rjmp	.+12     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 89c:	8a e0       	ldi	r24, 0x0A	; 10
 89e:	98 9e       	mul	r9, r24
 8a0:	20 0d       	add	r18, r0
 8a2:	11 24       	eor	r1, r1
 8a4:	92 2e       	mov	r9, r18
 8a6:	11 c0       	rjmp	.+34     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8a8:	ea e0       	ldi	r30, 0x0A	; 10
 8aa:	2e 9e       	mul	r2, r30
 8ac:	20 0d       	add	r18, r0
 8ae:	11 24       	eor	r1, r1
 8b0:	22 2e       	mov	r2, r18
 8b2:	f3 2d       	mov	r31, r3
 8b4:	f0 62       	ori	r31, 0x20	; 32
 8b6:	3f 2e       	mov	r3, r31
 8b8:	08 c0       	rjmp	.+16     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8ba:	8c 36       	cpi	r24, 0x6C	; 108
 8bc:	21 f4       	brne	.+8      	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8be:	83 2d       	mov	r24, r3
 8c0:	80 68       	ori	r24, 0x80	; 128
 8c2:	38 2e       	mov	r3, r24
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8c6:	88 36       	cpi	r24, 0x68	; 104
 8c8:	41 f4       	brne	.+16     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8ca:	f7 01       	movw	r30, r14
 8cc:	93 fd       	sbrc	r25, 3
 8ce:	85 91       	lpm	r24, Z+
 8d0:	93 ff       	sbrs	r25, 3
 8d2:	81 91       	ld	r24, Z+
 8d4:	7f 01       	movw	r14, r30
 8d6:	81 11       	cpse	r24, r1
 8d8:	b3 cf       	rjmp	.-154    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 8da:	98 2f       	mov	r25, r24
 8dc:	9f 7d       	andi	r25, 0xDF	; 223
 8de:	95 54       	subi	r25, 0x45	; 69
 8e0:	93 30       	cpi	r25, 0x03	; 3
 8e2:	28 f4       	brcc	.+10     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8e4:	0c 5f       	subi	r16, 0xFC	; 252
 8e6:	1f 4f       	sbci	r17, 0xFF	; 255
 8e8:	9f e3       	ldi	r25, 0x3F	; 63
 8ea:	99 83       	std	Y+1, r25	; 0x01
 8ec:	0d c0       	rjmp	.+26     	; 0x908 <__stack+0x9>
 8ee:	83 36       	cpi	r24, 0x63	; 99
 8f0:	31 f0       	breq	.+12     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8f2:	83 37       	cpi	r24, 0x73	; 115
 8f4:	71 f0       	breq	.+28     	; 0x912 <__stack+0x13>
 8f6:	83 35       	cpi	r24, 0x53	; 83
 8f8:	09 f0       	breq	.+2      	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8fa:	59 c0       	rjmp	.+178    	; 0x9ae <__stack+0xaf>
 8fc:	21 c0       	rjmp	.+66     	; 0x940 <__stack+0x41>
 8fe:	f8 01       	movw	r30, r16
 900:	80 81       	ld	r24, Z
 902:	89 83       	std	Y+1, r24	; 0x01
 904:	0e 5f       	subi	r16, 0xFE	; 254
 906:	1f 4f       	sbci	r17, 0xFF	; 255
 908:	88 24       	eor	r8, r8
 90a:	83 94       	inc	r8
 90c:	91 2c       	mov	r9, r1
 90e:	53 01       	movw	r10, r6
 910:	13 c0       	rjmp	.+38     	; 0x938 <__stack+0x39>
 912:	28 01       	movw	r4, r16
 914:	f2 e0       	ldi	r31, 0x02	; 2
 916:	4f 0e       	add	r4, r31
 918:	51 1c       	adc	r5, r1
 91a:	f8 01       	movw	r30, r16
 91c:	a0 80       	ld	r10, Z
 91e:	b1 80       	ldd	r11, Z+1	; 0x01
 920:	36 fe       	sbrs	r3, 6
 922:	03 c0       	rjmp	.+6      	; 0x92a <__stack+0x2b>
 924:	69 2d       	mov	r22, r9
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0x2f>
 92a:	6f ef       	ldi	r22, 0xFF	; 255
 92c:	7f ef       	ldi	r23, 0xFF	; 255
 92e:	c5 01       	movw	r24, r10
 930:	0e 94 de 05 	call	0xbbc	; 0xbbc <strnlen>
 934:	4c 01       	movw	r8, r24
 936:	82 01       	movw	r16, r4
 938:	f3 2d       	mov	r31, r3
 93a:	ff 77       	andi	r31, 0x7F	; 127
 93c:	3f 2e       	mov	r3, r31
 93e:	16 c0       	rjmp	.+44     	; 0x96c <__stack+0x6d>
 940:	28 01       	movw	r4, r16
 942:	22 e0       	ldi	r18, 0x02	; 2
 944:	42 0e       	add	r4, r18
 946:	51 1c       	adc	r5, r1
 948:	f8 01       	movw	r30, r16
 94a:	a0 80       	ld	r10, Z
 94c:	b1 80       	ldd	r11, Z+1	; 0x01
 94e:	36 fe       	sbrs	r3, 6
 950:	03 c0       	rjmp	.+6      	; 0x958 <__stack+0x59>
 952:	69 2d       	mov	r22, r9
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
 958:	6f ef       	ldi	r22, 0xFF	; 255
 95a:	7f ef       	ldi	r23, 0xFF	; 255
 95c:	c5 01       	movw	r24, r10
 95e:	0e 94 d3 05 	call	0xba6	; 0xba6 <strnlen_P>
 962:	4c 01       	movw	r8, r24
 964:	f3 2d       	mov	r31, r3
 966:	f0 68       	ori	r31, 0x80	; 128
 968:	3f 2e       	mov	r3, r31
 96a:	82 01       	movw	r16, r4
 96c:	33 fc       	sbrc	r3, 3
 96e:	1b c0       	rjmp	.+54     	; 0x9a6 <__stack+0xa7>
 970:	82 2d       	mov	r24, r2
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	88 16       	cp	r8, r24
 976:	99 06       	cpc	r9, r25
 978:	b0 f4       	brcc	.+44     	; 0x9a6 <__stack+0xa7>
 97a:	b6 01       	movw	r22, r12
 97c:	80 e2       	ldi	r24, 0x20	; 32
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 984:	2a 94       	dec	r2
 986:	f4 cf       	rjmp	.-24     	; 0x970 <__stack+0x71>
 988:	f5 01       	movw	r30, r10
 98a:	37 fc       	sbrc	r3, 7
 98c:	85 91       	lpm	r24, Z+
 98e:	37 fe       	sbrs	r3, 7
 990:	81 91       	ld	r24, Z+
 992:	5f 01       	movw	r10, r30
 994:	b6 01       	movw	r22, r12
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 99c:	21 10       	cpse	r2, r1
 99e:	2a 94       	dec	r2
 9a0:	21 e0       	ldi	r18, 0x01	; 1
 9a2:	82 1a       	sub	r8, r18
 9a4:	91 08       	sbc	r9, r1
 9a6:	81 14       	cp	r8, r1
 9a8:	91 04       	cpc	r9, r1
 9aa:	71 f7       	brne	.-36     	; 0x988 <__stack+0x89>
 9ac:	e8 c0       	rjmp	.+464    	; 0xb7e <__stack+0x27f>
 9ae:	84 36       	cpi	r24, 0x64	; 100
 9b0:	11 f0       	breq	.+4      	; 0x9b6 <__stack+0xb7>
 9b2:	89 36       	cpi	r24, 0x69	; 105
 9b4:	41 f5       	brne	.+80     	; 0xa06 <__stack+0x107>
 9b6:	f8 01       	movw	r30, r16
 9b8:	37 fe       	sbrs	r3, 7
 9ba:	07 c0       	rjmp	.+14     	; 0x9ca <__stack+0xcb>
 9bc:	60 81       	ld	r22, Z
 9be:	71 81       	ldd	r23, Z+1	; 0x01
 9c0:	82 81       	ldd	r24, Z+2	; 0x02
 9c2:	93 81       	ldd	r25, Z+3	; 0x03
 9c4:	0c 5f       	subi	r16, 0xFC	; 252
 9c6:	1f 4f       	sbci	r17, 0xFF	; 255
 9c8:	08 c0       	rjmp	.+16     	; 0x9da <__stack+0xdb>
 9ca:	60 81       	ld	r22, Z
 9cc:	71 81       	ldd	r23, Z+1	; 0x01
 9ce:	07 2e       	mov	r0, r23
 9d0:	00 0c       	add	r0, r0
 9d2:	88 0b       	sbc	r24, r24
 9d4:	99 0b       	sbc	r25, r25
 9d6:	0e 5f       	subi	r16, 0xFE	; 254
 9d8:	1f 4f       	sbci	r17, 0xFF	; 255
 9da:	f3 2d       	mov	r31, r3
 9dc:	ff 76       	andi	r31, 0x6F	; 111
 9de:	3f 2e       	mov	r3, r31
 9e0:	97 ff       	sbrs	r25, 7
 9e2:	09 c0       	rjmp	.+18     	; 0x9f6 <__stack+0xf7>
 9e4:	90 95       	com	r25
 9e6:	80 95       	com	r24
 9e8:	70 95       	com	r23
 9ea:	61 95       	neg	r22
 9ec:	7f 4f       	sbci	r23, 0xFF	; 255
 9ee:	8f 4f       	sbci	r24, 0xFF	; 255
 9f0:	9f 4f       	sbci	r25, 0xFF	; 255
 9f2:	f0 68       	ori	r31, 0x80	; 128
 9f4:	3f 2e       	mov	r3, r31
 9f6:	2a e0       	ldi	r18, 0x0A	; 10
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	a3 01       	movw	r20, r6
 9fc:	0e 94 25 06 	call	0xc4a	; 0xc4a <__ultoa_invert>
 a00:	88 2e       	mov	r8, r24
 a02:	86 18       	sub	r8, r6
 a04:	45 c0       	rjmp	.+138    	; 0xa90 <__stack+0x191>
 a06:	85 37       	cpi	r24, 0x75	; 117
 a08:	31 f4       	brne	.+12     	; 0xa16 <__stack+0x117>
 a0a:	23 2d       	mov	r18, r3
 a0c:	2f 7e       	andi	r18, 0xEF	; 239
 a0e:	b2 2e       	mov	r11, r18
 a10:	2a e0       	ldi	r18, 0x0A	; 10
 a12:	30 e0       	ldi	r19, 0x00	; 0
 a14:	25 c0       	rjmp	.+74     	; 0xa60 <__stack+0x161>
 a16:	93 2d       	mov	r25, r3
 a18:	99 7f       	andi	r25, 0xF9	; 249
 a1a:	b9 2e       	mov	r11, r25
 a1c:	8f 36       	cpi	r24, 0x6F	; 111
 a1e:	c1 f0       	breq	.+48     	; 0xa50 <__stack+0x151>
 a20:	18 f4       	brcc	.+6      	; 0xa28 <__stack+0x129>
 a22:	88 35       	cpi	r24, 0x58	; 88
 a24:	79 f0       	breq	.+30     	; 0xa44 <__stack+0x145>
 a26:	b5 c0       	rjmp	.+362    	; 0xb92 <__stack+0x293>
 a28:	80 37       	cpi	r24, 0x70	; 112
 a2a:	19 f0       	breq	.+6      	; 0xa32 <__stack+0x133>
 a2c:	88 37       	cpi	r24, 0x78	; 120
 a2e:	21 f0       	breq	.+8      	; 0xa38 <__stack+0x139>
 a30:	b0 c0       	rjmp	.+352    	; 0xb92 <__stack+0x293>
 a32:	e9 2f       	mov	r30, r25
 a34:	e0 61       	ori	r30, 0x10	; 16
 a36:	be 2e       	mov	r11, r30
 a38:	b4 fe       	sbrs	r11, 4
 a3a:	0d c0       	rjmp	.+26     	; 0xa56 <__stack+0x157>
 a3c:	fb 2d       	mov	r31, r11
 a3e:	f4 60       	ori	r31, 0x04	; 4
 a40:	bf 2e       	mov	r11, r31
 a42:	09 c0       	rjmp	.+18     	; 0xa56 <__stack+0x157>
 a44:	34 fe       	sbrs	r3, 4
 a46:	0a c0       	rjmp	.+20     	; 0xa5c <__stack+0x15d>
 a48:	29 2f       	mov	r18, r25
 a4a:	26 60       	ori	r18, 0x06	; 6
 a4c:	b2 2e       	mov	r11, r18
 a4e:	06 c0       	rjmp	.+12     	; 0xa5c <__stack+0x15d>
 a50:	28 e0       	ldi	r18, 0x08	; 8
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	05 c0       	rjmp	.+10     	; 0xa60 <__stack+0x161>
 a56:	20 e1       	ldi	r18, 0x10	; 16
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <__stack+0x161>
 a5c:	20 e1       	ldi	r18, 0x10	; 16
 a5e:	32 e0       	ldi	r19, 0x02	; 2
 a60:	f8 01       	movw	r30, r16
 a62:	b7 fe       	sbrs	r11, 7
 a64:	07 c0       	rjmp	.+14     	; 0xa74 <__stack+0x175>
 a66:	60 81       	ld	r22, Z
 a68:	71 81       	ldd	r23, Z+1	; 0x01
 a6a:	82 81       	ldd	r24, Z+2	; 0x02
 a6c:	93 81       	ldd	r25, Z+3	; 0x03
 a6e:	0c 5f       	subi	r16, 0xFC	; 252
 a70:	1f 4f       	sbci	r17, 0xFF	; 255
 a72:	06 c0       	rjmp	.+12     	; 0xa80 <__stack+0x181>
 a74:	60 81       	ld	r22, Z
 a76:	71 81       	ldd	r23, Z+1	; 0x01
 a78:	80 e0       	ldi	r24, 0x00	; 0
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	0e 5f       	subi	r16, 0xFE	; 254
 a7e:	1f 4f       	sbci	r17, 0xFF	; 255
 a80:	a3 01       	movw	r20, r6
 a82:	0e 94 25 06 	call	0xc4a	; 0xc4a <__ultoa_invert>
 a86:	88 2e       	mov	r8, r24
 a88:	86 18       	sub	r8, r6
 a8a:	fb 2d       	mov	r31, r11
 a8c:	ff 77       	andi	r31, 0x7F	; 127
 a8e:	3f 2e       	mov	r3, r31
 a90:	36 fe       	sbrs	r3, 6
 a92:	0d c0       	rjmp	.+26     	; 0xaae <__stack+0x1af>
 a94:	23 2d       	mov	r18, r3
 a96:	2e 7f       	andi	r18, 0xFE	; 254
 a98:	a2 2e       	mov	r10, r18
 a9a:	89 14       	cp	r8, r9
 a9c:	58 f4       	brcc	.+22     	; 0xab4 <__stack+0x1b5>
 a9e:	34 fe       	sbrs	r3, 4
 aa0:	0b c0       	rjmp	.+22     	; 0xab8 <__stack+0x1b9>
 aa2:	32 fc       	sbrc	r3, 2
 aa4:	09 c0       	rjmp	.+18     	; 0xab8 <__stack+0x1b9>
 aa6:	83 2d       	mov	r24, r3
 aa8:	8e 7e       	andi	r24, 0xEE	; 238
 aaa:	a8 2e       	mov	r10, r24
 aac:	05 c0       	rjmp	.+10     	; 0xab8 <__stack+0x1b9>
 aae:	b8 2c       	mov	r11, r8
 ab0:	a3 2c       	mov	r10, r3
 ab2:	03 c0       	rjmp	.+6      	; 0xaba <__stack+0x1bb>
 ab4:	b8 2c       	mov	r11, r8
 ab6:	01 c0       	rjmp	.+2      	; 0xaba <__stack+0x1bb>
 ab8:	b9 2c       	mov	r11, r9
 aba:	a4 fe       	sbrs	r10, 4
 abc:	0f c0       	rjmp	.+30     	; 0xadc <__stack+0x1dd>
 abe:	fe 01       	movw	r30, r28
 ac0:	e8 0d       	add	r30, r8
 ac2:	f1 1d       	adc	r31, r1
 ac4:	80 81       	ld	r24, Z
 ac6:	80 33       	cpi	r24, 0x30	; 48
 ac8:	21 f4       	brne	.+8      	; 0xad2 <__stack+0x1d3>
 aca:	9a 2d       	mov	r25, r10
 acc:	99 7e       	andi	r25, 0xE9	; 233
 ace:	a9 2e       	mov	r10, r25
 ad0:	09 c0       	rjmp	.+18     	; 0xae4 <__stack+0x1e5>
 ad2:	a2 fe       	sbrs	r10, 2
 ad4:	06 c0       	rjmp	.+12     	; 0xae2 <__stack+0x1e3>
 ad6:	b3 94       	inc	r11
 ad8:	b3 94       	inc	r11
 ada:	04 c0       	rjmp	.+8      	; 0xae4 <__stack+0x1e5>
 adc:	8a 2d       	mov	r24, r10
 ade:	86 78       	andi	r24, 0x86	; 134
 ae0:	09 f0       	breq	.+2      	; 0xae4 <__stack+0x1e5>
 ae2:	b3 94       	inc	r11
 ae4:	a3 fc       	sbrc	r10, 3
 ae6:	11 c0       	rjmp	.+34     	; 0xb0a <__stack+0x20b>
 ae8:	a0 fe       	sbrs	r10, 0
 aea:	06 c0       	rjmp	.+12     	; 0xaf8 <__stack+0x1f9>
 aec:	b2 14       	cp	r11, r2
 aee:	88 f4       	brcc	.+34     	; 0xb12 <__stack+0x213>
 af0:	28 0c       	add	r2, r8
 af2:	92 2c       	mov	r9, r2
 af4:	9b 18       	sub	r9, r11
 af6:	0e c0       	rjmp	.+28     	; 0xb14 <__stack+0x215>
 af8:	b2 14       	cp	r11, r2
 afa:	60 f4       	brcc	.+24     	; 0xb14 <__stack+0x215>
 afc:	b6 01       	movw	r22, r12
 afe:	80 e2       	ldi	r24, 0x20	; 32
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b06:	b3 94       	inc	r11
 b08:	f7 cf       	rjmp	.-18     	; 0xaf8 <__stack+0x1f9>
 b0a:	b2 14       	cp	r11, r2
 b0c:	18 f4       	brcc	.+6      	; 0xb14 <__stack+0x215>
 b0e:	2b 18       	sub	r2, r11
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <__stack+0x217>
 b12:	98 2c       	mov	r9, r8
 b14:	21 2c       	mov	r2, r1
 b16:	a4 fe       	sbrs	r10, 4
 b18:	10 c0       	rjmp	.+32     	; 0xb3a <__stack+0x23b>
 b1a:	b6 01       	movw	r22, r12
 b1c:	80 e3       	ldi	r24, 0x30	; 48
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b24:	a2 fe       	sbrs	r10, 2
 b26:	17 c0       	rjmp	.+46     	; 0xb56 <__stack+0x257>
 b28:	a1 fc       	sbrc	r10, 1
 b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__stack+0x233>
 b2c:	88 e7       	ldi	r24, 0x78	; 120
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <__stack+0x237>
 b32:	88 e5       	ldi	r24, 0x58	; 88
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	b6 01       	movw	r22, r12
 b38:	0c c0       	rjmp	.+24     	; 0xb52 <__stack+0x253>
 b3a:	8a 2d       	mov	r24, r10
 b3c:	86 78       	andi	r24, 0x86	; 134
 b3e:	59 f0       	breq	.+22     	; 0xb56 <__stack+0x257>
 b40:	a1 fe       	sbrs	r10, 1
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <__stack+0x249>
 b44:	8b e2       	ldi	r24, 0x2B	; 43
 b46:	01 c0       	rjmp	.+2      	; 0xb4a <__stack+0x24b>
 b48:	80 e2       	ldi	r24, 0x20	; 32
 b4a:	a7 fc       	sbrc	r10, 7
 b4c:	8d e2       	ldi	r24, 0x2D	; 45
 b4e:	b6 01       	movw	r22, r12
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b56:	89 14       	cp	r8, r9
 b58:	38 f4       	brcc	.+14     	; 0xb68 <__stack+0x269>
 b5a:	b6 01       	movw	r22, r12
 b5c:	80 e3       	ldi	r24, 0x30	; 48
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b64:	9a 94       	dec	r9
 b66:	f7 cf       	rjmp	.-18     	; 0xb56 <__stack+0x257>
 b68:	8a 94       	dec	r8
 b6a:	f3 01       	movw	r30, r6
 b6c:	e8 0d       	add	r30, r8
 b6e:	f1 1d       	adc	r31, r1
 b70:	80 81       	ld	r24, Z
 b72:	b6 01       	movw	r22, r12
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b7a:	81 10       	cpse	r8, r1
 b7c:	f5 cf       	rjmp	.-22     	; 0xb68 <__stack+0x269>
 b7e:	22 20       	and	r2, r2
 b80:	09 f4       	brne	.+2      	; 0xb84 <__stack+0x285>
 b82:	42 ce       	rjmp	.-892    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 b84:	b6 01       	movw	r22, r12
 b86:	80 e2       	ldi	r24, 0x20	; 32
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b8e:	2a 94       	dec	r2
 b90:	f6 cf       	rjmp	.-20     	; 0xb7e <__stack+0x27f>
 b92:	f6 01       	movw	r30, r12
 b94:	86 81       	ldd	r24, Z+6	; 0x06
 b96:	97 81       	ldd	r25, Z+7	; 0x07
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <__stack+0x29f>
 b9a:	8f ef       	ldi	r24, 0xFF	; 255
 b9c:	9f ef       	ldi	r25, 0xFF	; 255
 b9e:	2b 96       	adiw	r28, 0x0b	; 11
 ba0:	e2 e1       	ldi	r30, 0x12	; 18
 ba2:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__epilogue_restores__>

00000ba6 <strnlen_P>:
 ba6:	fc 01       	movw	r30, r24
 ba8:	05 90       	lpm	r0, Z+
 baa:	61 50       	subi	r22, 0x01	; 1
 bac:	70 40       	sbci	r23, 0x00	; 0
 bae:	01 10       	cpse	r0, r1
 bb0:	d8 f7       	brcc	.-10     	; 0xba8 <strnlen_P+0x2>
 bb2:	80 95       	com	r24
 bb4:	90 95       	com	r25
 bb6:	8e 0f       	add	r24, r30
 bb8:	9f 1f       	adc	r25, r31
 bba:	08 95       	ret

00000bbc <strnlen>:
 bbc:	fc 01       	movw	r30, r24
 bbe:	61 50       	subi	r22, 0x01	; 1
 bc0:	70 40       	sbci	r23, 0x00	; 0
 bc2:	01 90       	ld	r0, Z+
 bc4:	01 10       	cpse	r0, r1
 bc6:	d8 f7       	brcc	.-10     	; 0xbbe <strnlen+0x2>
 bc8:	80 95       	com	r24
 bca:	90 95       	com	r25
 bcc:	8e 0f       	add	r24, r30
 bce:	9f 1f       	adc	r25, r31
 bd0:	08 95       	ret

00000bd2 <fputc>:
 bd2:	0f 93       	push	r16
 bd4:	1f 93       	push	r17
 bd6:	cf 93       	push	r28
 bd8:	df 93       	push	r29
 bda:	fb 01       	movw	r30, r22
 bdc:	23 81       	ldd	r18, Z+3	; 0x03
 bde:	21 fd       	sbrc	r18, 1
 be0:	03 c0       	rjmp	.+6      	; 0xbe8 <fputc+0x16>
 be2:	8f ef       	ldi	r24, 0xFF	; 255
 be4:	9f ef       	ldi	r25, 0xFF	; 255
 be6:	2c c0       	rjmp	.+88     	; 0xc40 <fputc+0x6e>
 be8:	22 ff       	sbrs	r18, 2
 bea:	16 c0       	rjmp	.+44     	; 0xc18 <fputc+0x46>
 bec:	46 81       	ldd	r20, Z+6	; 0x06
 bee:	57 81       	ldd	r21, Z+7	; 0x07
 bf0:	24 81       	ldd	r18, Z+4	; 0x04
 bf2:	35 81       	ldd	r19, Z+5	; 0x05
 bf4:	42 17       	cp	r20, r18
 bf6:	53 07       	cpc	r21, r19
 bf8:	44 f4       	brge	.+16     	; 0xc0a <fputc+0x38>
 bfa:	a0 81       	ld	r26, Z
 bfc:	b1 81       	ldd	r27, Z+1	; 0x01
 bfe:	9d 01       	movw	r18, r26
 c00:	2f 5f       	subi	r18, 0xFF	; 255
 c02:	3f 4f       	sbci	r19, 0xFF	; 255
 c04:	31 83       	std	Z+1, r19	; 0x01
 c06:	20 83       	st	Z, r18
 c08:	8c 93       	st	X, r24
 c0a:	26 81       	ldd	r18, Z+6	; 0x06
 c0c:	37 81       	ldd	r19, Z+7	; 0x07
 c0e:	2f 5f       	subi	r18, 0xFF	; 255
 c10:	3f 4f       	sbci	r19, 0xFF	; 255
 c12:	37 83       	std	Z+7, r19	; 0x07
 c14:	26 83       	std	Z+6, r18	; 0x06
 c16:	14 c0       	rjmp	.+40     	; 0xc40 <fputc+0x6e>
 c18:	8b 01       	movw	r16, r22
 c1a:	ec 01       	movw	r28, r24
 c1c:	fb 01       	movw	r30, r22
 c1e:	00 84       	ldd	r0, Z+8	; 0x08
 c20:	f1 85       	ldd	r31, Z+9	; 0x09
 c22:	e0 2d       	mov	r30, r0
 c24:	09 95       	icall
 c26:	89 2b       	or	r24, r25
 c28:	e1 f6       	brne	.-72     	; 0xbe2 <fputc+0x10>
 c2a:	d8 01       	movw	r26, r16
 c2c:	16 96       	adiw	r26, 0x06	; 6
 c2e:	8d 91       	ld	r24, X+
 c30:	9c 91       	ld	r25, X
 c32:	17 97       	sbiw	r26, 0x07	; 7
 c34:	01 96       	adiw	r24, 0x01	; 1
 c36:	17 96       	adiw	r26, 0x07	; 7
 c38:	9c 93       	st	X, r25
 c3a:	8e 93       	st	-X, r24
 c3c:	16 97       	sbiw	r26, 0x06	; 6
 c3e:	ce 01       	movw	r24, r28
 c40:	df 91       	pop	r29
 c42:	cf 91       	pop	r28
 c44:	1f 91       	pop	r17
 c46:	0f 91       	pop	r16
 c48:	08 95       	ret

00000c4a <__ultoa_invert>:
 c4a:	fa 01       	movw	r30, r20
 c4c:	aa 27       	eor	r26, r26
 c4e:	28 30       	cpi	r18, 0x08	; 8
 c50:	51 f1       	breq	.+84     	; 0xca6 <__ultoa_invert+0x5c>
 c52:	20 31       	cpi	r18, 0x10	; 16
 c54:	81 f1       	breq	.+96     	; 0xcb6 <__ultoa_invert+0x6c>
 c56:	e8 94       	clt
 c58:	6f 93       	push	r22
 c5a:	6e 7f       	andi	r22, 0xFE	; 254
 c5c:	6e 5f       	subi	r22, 0xFE	; 254
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	8f 4f       	sbci	r24, 0xFF	; 255
 c62:	9f 4f       	sbci	r25, 0xFF	; 255
 c64:	af 4f       	sbci	r26, 0xFF	; 255
 c66:	b1 e0       	ldi	r27, 0x01	; 1
 c68:	3e d0       	rcall	.+124    	; 0xce6 <__ultoa_invert+0x9c>
 c6a:	b4 e0       	ldi	r27, 0x04	; 4
 c6c:	3c d0       	rcall	.+120    	; 0xce6 <__ultoa_invert+0x9c>
 c6e:	67 0f       	add	r22, r23
 c70:	78 1f       	adc	r23, r24
 c72:	89 1f       	adc	r24, r25
 c74:	9a 1f       	adc	r25, r26
 c76:	a1 1d       	adc	r26, r1
 c78:	68 0f       	add	r22, r24
 c7a:	79 1f       	adc	r23, r25
 c7c:	8a 1f       	adc	r24, r26
 c7e:	91 1d       	adc	r25, r1
 c80:	a1 1d       	adc	r26, r1
 c82:	6a 0f       	add	r22, r26
 c84:	71 1d       	adc	r23, r1
 c86:	81 1d       	adc	r24, r1
 c88:	91 1d       	adc	r25, r1
 c8a:	a1 1d       	adc	r26, r1
 c8c:	20 d0       	rcall	.+64     	; 0xcce <__ultoa_invert+0x84>
 c8e:	09 f4       	brne	.+2      	; 0xc92 <__ultoa_invert+0x48>
 c90:	68 94       	set
 c92:	3f 91       	pop	r19
 c94:	2a e0       	ldi	r18, 0x0A	; 10
 c96:	26 9f       	mul	r18, r22
 c98:	11 24       	eor	r1, r1
 c9a:	30 19       	sub	r19, r0
 c9c:	30 5d       	subi	r19, 0xD0	; 208
 c9e:	31 93       	st	Z+, r19
 ca0:	de f6       	brtc	.-74     	; 0xc58 <__ultoa_invert+0xe>
 ca2:	cf 01       	movw	r24, r30
 ca4:	08 95       	ret
 ca6:	46 2f       	mov	r20, r22
 ca8:	47 70       	andi	r20, 0x07	; 7
 caa:	40 5d       	subi	r20, 0xD0	; 208
 cac:	41 93       	st	Z+, r20
 cae:	b3 e0       	ldi	r27, 0x03	; 3
 cb0:	0f d0       	rcall	.+30     	; 0xcd0 <__ultoa_invert+0x86>
 cb2:	c9 f7       	brne	.-14     	; 0xca6 <__ultoa_invert+0x5c>
 cb4:	f6 cf       	rjmp	.-20     	; 0xca2 <__ultoa_invert+0x58>
 cb6:	46 2f       	mov	r20, r22
 cb8:	4f 70       	andi	r20, 0x0F	; 15
 cba:	40 5d       	subi	r20, 0xD0	; 208
 cbc:	4a 33       	cpi	r20, 0x3A	; 58
 cbe:	18 f0       	brcs	.+6      	; 0xcc6 <__ultoa_invert+0x7c>
 cc0:	49 5d       	subi	r20, 0xD9	; 217
 cc2:	31 fd       	sbrc	r19, 1
 cc4:	40 52       	subi	r20, 0x20	; 32
 cc6:	41 93       	st	Z+, r20
 cc8:	02 d0       	rcall	.+4      	; 0xcce <__ultoa_invert+0x84>
 cca:	a9 f7       	brne	.-22     	; 0xcb6 <__ultoa_invert+0x6c>
 ccc:	ea cf       	rjmp	.-44     	; 0xca2 <__ultoa_invert+0x58>
 cce:	b4 e0       	ldi	r27, 0x04	; 4
 cd0:	a6 95       	lsr	r26
 cd2:	97 95       	ror	r25
 cd4:	87 95       	ror	r24
 cd6:	77 95       	ror	r23
 cd8:	67 95       	ror	r22
 cda:	ba 95       	dec	r27
 cdc:	c9 f7       	brne	.-14     	; 0xcd0 <__ultoa_invert+0x86>
 cde:	00 97       	sbiw	r24, 0x00	; 0
 ce0:	61 05       	cpc	r22, r1
 ce2:	71 05       	cpc	r23, r1
 ce4:	08 95       	ret
 ce6:	9b 01       	movw	r18, r22
 ce8:	ac 01       	movw	r20, r24
 cea:	0a 2e       	mov	r0, r26
 cec:	06 94       	lsr	r0
 cee:	57 95       	ror	r21
 cf0:	47 95       	ror	r20
 cf2:	37 95       	ror	r19
 cf4:	27 95       	ror	r18
 cf6:	ba 95       	dec	r27
 cf8:	c9 f7       	brne	.-14     	; 0xcec <__ultoa_invert+0xa2>
 cfa:	62 0f       	add	r22, r18
 cfc:	73 1f       	adc	r23, r19
 cfe:	84 1f       	adc	r24, r20
 d00:	95 1f       	adc	r25, r21
 d02:	a0 1d       	adc	r26, r0
 d04:	08 95       	ret

00000d06 <__prologue_saves__>:
 d06:	2f 92       	push	r2
 d08:	3f 92       	push	r3
 d0a:	4f 92       	push	r4
 d0c:	5f 92       	push	r5
 d0e:	6f 92       	push	r6
 d10:	7f 92       	push	r7
 d12:	8f 92       	push	r8
 d14:	9f 92       	push	r9
 d16:	af 92       	push	r10
 d18:	bf 92       	push	r11
 d1a:	cf 92       	push	r12
 d1c:	df 92       	push	r13
 d1e:	ef 92       	push	r14
 d20:	ff 92       	push	r15
 d22:	0f 93       	push	r16
 d24:	1f 93       	push	r17
 d26:	cf 93       	push	r28
 d28:	df 93       	push	r29
 d2a:	cd b7       	in	r28, 0x3d	; 61
 d2c:	de b7       	in	r29, 0x3e	; 62
 d2e:	ca 1b       	sub	r28, r26
 d30:	db 0b       	sbc	r29, r27
 d32:	0f b6       	in	r0, 0x3f	; 63
 d34:	f8 94       	cli
 d36:	de bf       	out	0x3e, r29	; 62
 d38:	0f be       	out	0x3f, r0	; 63
 d3a:	cd bf       	out	0x3d, r28	; 61
 d3c:	09 94       	ijmp

00000d3e <__epilogue_restores__>:
 d3e:	2a 88       	ldd	r2, Y+18	; 0x12
 d40:	39 88       	ldd	r3, Y+17	; 0x11
 d42:	48 88       	ldd	r4, Y+16	; 0x10
 d44:	5f 84       	ldd	r5, Y+15	; 0x0f
 d46:	6e 84       	ldd	r6, Y+14	; 0x0e
 d48:	7d 84       	ldd	r7, Y+13	; 0x0d
 d4a:	8c 84       	ldd	r8, Y+12	; 0x0c
 d4c:	9b 84       	ldd	r9, Y+11	; 0x0b
 d4e:	aa 84       	ldd	r10, Y+10	; 0x0a
 d50:	b9 84       	ldd	r11, Y+9	; 0x09
 d52:	c8 84       	ldd	r12, Y+8	; 0x08
 d54:	df 80       	ldd	r13, Y+7	; 0x07
 d56:	ee 80       	ldd	r14, Y+6	; 0x06
 d58:	fd 80       	ldd	r15, Y+5	; 0x05
 d5a:	0c 81       	ldd	r16, Y+4	; 0x04
 d5c:	1b 81       	ldd	r17, Y+3	; 0x03
 d5e:	aa 81       	ldd	r26, Y+2	; 0x02
 d60:	b9 81       	ldd	r27, Y+1	; 0x01
 d62:	ce 0f       	add	r28, r30
 d64:	d1 1d       	adc	r29, r1
 d66:	0f b6       	in	r0, 0x3f	; 63
 d68:	f8 94       	cli
 d6a:	de bf       	out	0x3e, r29	; 62
 d6c:	0f be       	out	0x3f, r0	; 63
 d6e:	cd bf       	out	0x3d, r28	; 61
 d70:	ed 01       	movw	r28, r26
 d72:	08 95       	ret

00000d74 <_exit>:
 d74:	f8 94       	cli

00000d76 <__stop_program>:
 d76:	ff cf       	rjmp	.-2      	; 0xd76 <__stop_program>
