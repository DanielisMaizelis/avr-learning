
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000ac8  00000b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800138  00800138  00000b94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015d3  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad8  00000000  00000000  00002317  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b5d  00000000  00000000  00002def  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  0000394c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c9  00000000  00000000  00003c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b4e  00000000  00000000  000041f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004d43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 29 03 	jmp	0x652	; 0x652 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <main>
  9e:	0c 94 62 05 	jmp	0xac4	; 0xac4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_init_pinout>:
#include "../include/lcd.h"

/***** Functions **********************************************************/
void lcd_init_pinout(void) {
    /* 4 data lines */
    LCD_D7_DDR |= (1 << LCD_D7_BIT);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	84 b9       	out	0x04, r24	; 4
    LCD_D6_DDR |= (1 << LCD_D6_BIT);
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	84 b9       	out	0x04, r24	; 4
    LCD_D5_DDR |= (1 << LCD_D5_BIT);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	84 b9       	out	0x04, r24	; 4
    LCD_D4_DDR |= (1 << LCD_D4_BIT);
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	84 b9       	out	0x04, r24	; 4

    /* E line */
    LCD_E_DDR |= (1 << LCD_E_BIT);
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	84 b9       	out	0x04, r24	; 4

    /* RS line */
    LCD_RS_DDR |= (1 << LCD_RS_BIT);
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	84 b9       	out	0x04, r24	; 4
  ca:	08 95       	ret

000000cc <lcd_write>:

} /* End lcd_putcmd() */

void lcd_write(uint8_t b) {
    /* Assume that data is '0' */
    LCD_D7_PORT &= ~(1 << LCD_D7_BIT);
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	9f 7d       	andi	r25, 0xDF	; 223
  d0:	95 b9       	out	0x05, r25	; 5

    /* Make data '1' if necessary */
    if (b & 1 << 7) LCD_D7_PORT |= (1 << LCD_D7_BIT);
  d2:	88 23       	and	r24, r24
  d4:	1c f4       	brge	.+6      	; 0xdc <lcd_write+0x10>
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	90 62       	ori	r25, 0x20	; 32
  da:	95 b9       	out	0x05, r25	; 5

    /* Repeat for each data bit */
    LCD_D6_PORT &= ~(1 << LCD_D6_BIT);
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	9f 7e       	andi	r25, 0xEF	; 239
  e0:	95 b9       	out	0x05, r25	; 5

    if (b & 1 << 6) LCD_D6_PORT |= (1 << LCD_D6_BIT);
  e2:	86 ff       	sbrs	r24, 6
  e4:	03 c0       	rjmp	.+6      	; 0xec <lcd_write+0x20>
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	90 61       	ori	r25, 0x10	; 16
  ea:	95 b9       	out	0x05, r25	; 5

    LCD_D5_PORT &= ~(1 << LCD_D5_BIT);
  ec:	95 b1       	in	r25, 0x05	; 5
  ee:	97 7f       	andi	r25, 0xF7	; 247
  f0:	95 b9       	out	0x05, r25	; 5

    if (b & 1 << 5) LCD_D5_PORT |= (1 << LCD_D5_BIT);
  f2:	85 ff       	sbrs	r24, 5
  f4:	03 c0       	rjmp	.+6      	; 0xfc <lcd_write+0x30>
  f6:	95 b1       	in	r25, 0x05	; 5
  f8:	98 60       	ori	r25, 0x08	; 8
  fa:	95 b9       	out	0x05, r25	; 5

    LCD_D4_PORT &= ~(1 << LCD_D4_BIT);
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	9b 7f       	andi	r25, 0xFB	; 251
 100:	95 b9       	out	0x05, r25	; 5

    if (b & 1 << 4) LCD_D4_PORT |= (1 << LCD_D4_BIT);
 102:	84 ff       	sbrs	r24, 4
 104:	03 c0       	rjmp	.+6      	; 0x10c <lcd_write+0x40>
 106:	85 b1       	in	r24, 0x05	; 5
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	85 b9       	out	0x05, r24	; 5

    /* Enable pin high */
    LCD_E_PORT |= (1 << LCD_E_BIT);
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_write+0x48>
 118:	00 00       	nop
    /* Implement 'Data set-up time' (80 ns)
     * and 'Enable pulse width' (230 ns)
     */
    _delay_us(1);
    /* Enable pin low */
    LCD_E_PORT &= ~(1 << LCD_E_BIT);
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	85 b9       	out	0x05, r24	; 5
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_write+0x56>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <lcd_putc>:
        _delay_us(80);  // 40 uS delay (min)
    }

} /* End lcd_puts()*/

void lcd_putc(uint8_t data) {
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
    /* Select the Data Register (RS high) */
    LCD_RS_PORT |= (1 << LCD_RS_BIT);
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	81 60       	ori	r24, 0x01	; 1
 132:	85 b9       	out	0x05, r24	; 5

    /* Make sure E is initially low */
    LCD_E_PORT &= ~(1 << LCD_E_BIT);
 134:	85 b1       	in	r24, 0x05	; 5
 136:	8d 7f       	andi	r24, 0xFD	; 253
 138:	85 b9       	out	0x05, r24	; 5

    /* Write the upper 4-bits of the data */
    lcd_write(data);
 13a:	8c 2f       	mov	r24, r28
 13c:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>

    /* Write the lower 4-bits of the data */
    lcd_write(data << 4);
 140:	8c 2f       	mov	r24, r28
 142:	82 95       	swap	r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>

} /* End lcd_putc() */
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <lcd_puts>:

    /* 40 us delay (min) */
    _delay_us(80);
}

void lcd_puts(uint8_t *s) {
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	ec 01       	movw	r28, r24
    /* Character counter */
    // volatile uint8_t i = 0;
    while (*s) {
 154:	09 c0       	rjmp	.+18     	; 0x168 <lcd_puts+0x1a>
        // lcd_putc(s[i++]);
        lcd_putc(*s++);
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_putc>
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_puts+0x12>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_puts+0x18>
 166:	00 00       	nop
}

void lcd_puts(uint8_t *s) {
    /* Character counter */
    // volatile uint8_t i = 0;
    while (*s) {
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f4 cf       	rjmp	.-24     	; 0x156 <lcd_puts+0x8>
        // lcd_putc(s[i++]);
        lcd_putc(*s++);
        _delay_us(80);  // 40 uS delay (min)
    }

} /* End lcd_puts()*/
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <lcd_putcmd>:
    /* Write the lower 4-bits of the data */
    lcd_write(data << 4);

} /* End lcd_putc() */

void lcd_putcmd(uint8_t instr) {
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
    /* Select the Instruction Register (RS low) */
    LCD_RS_PORT &= ~(1 << LCD_RS_BIT);
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	85 b9       	out	0x05, r24	; 5

    /* Make sure E is initially low */
    LCD_E_PORT &= ~(1 << LCD_E_BIT);
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	8d 7f       	andi	r24, 0xFD	; 253
 182:	85 b9       	out	0x05, r24	; 5

    /* Write the upper 4-bits of the data */
    lcd_write(instr);
 184:	8c 2f       	mov	r24, r28
 186:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>

    /* Write the lower 4-bits of the data */
    lcd_write(instr << 4);
 18a:	8c 2f       	mov	r24, r28
 18c:	82 95       	swap	r24
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_putcmd+0x24>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_putcmd+0x2a>
 19e:	00 00       	nop

    _delay_us(80);

} /* End lcd_putcmd() */
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <lcd_init>:
    LCD_RS_DDR |= (1 << LCD_RS_BIT);

} /* End init_lcd_pinout() */

void lcd_init(void) {
    lcd_init_pinout();
 1a4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_init_pinout>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	81 ee       	ldi	r24, 0xE1	; 225
 1ac:	94 e0       	ldi	r25, 0x04	; 4
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <lcd_init+0xa>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x14>
 1b8:	00 00       	nop

    /* Initial 40 ms delay */
    _delay_ms(100);

    /* Select the Instruction Register (RS low) */
    LCD_RS_PORT &= ~(1 << LCD_RS_BIT);
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	8e 7f       	andi	r24, 0xFE	; 254
 1be:	85 b9       	out	0x05, r24	; 5

    /* Make sure E is initially low */
    LCD_E_PORT &= ~(1 << LCD_E_BIT);
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	8d 7f       	andi	r24, 0xFD	; 253
 1c4:	85 b9       	out	0x05, r24	; 5

    /* First part of reset sequence */
    lcd_write(LCD_FUNCTION_RESET);
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 1cc:	8f e3       	ldi	r24, 0x3F	; 63
 1ce:	9c e9       	ldi	r25, 0x9C	; 156
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x2c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init+0x32>
 1d6:	00 00       	nop

    /* 4.1 ms delay (min) */
    _delay_ms(10);

    /* Second part of reset sequence */
    lcd_write(LCD_FUNCTION_RESET);
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	8f e1       	ldi	r24, 0x1F	; 31
 1e0:	93 e0       	ldi	r25, 0x03	; 3
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x3e>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_init+0x44>
 1e8:	00 00       	nop

    /* 100 us delay (min) */
    _delay_us(200);

    /* Thirs part of reset sequence */
    lcd_write(LCD_FUNCTION_RESET);
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 1f0:	8f e1       	ldi	r24, 0x1F	; 31
 1f2:	93 e0       	ldi	r25, 0x03	; 3
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_init+0x50>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcd_init+0x56>
 1fa:	00 00       	nop

    /* This delay is omitted in the data sheet */
    _delay_us(200);

    /* Set 4-bit mode */
    lcd_write(LCD_FUNCTION_SET_4BIT);
 1fc:	88 e2       	ldi	r24, 0x28	; 40
 1fe:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 202:	8f e3       	ldi	r24, 0x3F	; 63
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd_init+0x62>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lcd_init+0x68>
 20c:	00 00       	nop

    /* 40 us delay (min) */
    _delay_us(80);

    /* Set mode, lines, and font */
    lcd_putcmd(LCD_FUNCTION_SET_4BIT);
 20e:	88 e2       	ldi	r24, 0x28	; 40
 210:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putcmd>
 214:	8f e3       	ldi	r24, 0x3F	; 63
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x74>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_init+0x7a>
 21e:	00 00       	nop

    /* 40 us delay (min) */
    _delay_us(80);

    /* Turn display OFF */
    lcd_putcmd(LCD_DISPLAY_OFF);
 220:	88 e0       	ldi	r24, 0x08	; 8
 222:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putcmd>
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x86>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_init+0x8c>
 230:	00 00       	nop

    /* 40 us delay (min) */
    _delay_us(80);

    /* Clear display RAM */
    lcd_putcmd(LCD_CLEAR);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putcmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	8f e7       	ldi	r24, 0x7F	; 127
 23a:	9e e3       	ldi	r25, 0x3E	; 62
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_init+0x98>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init+0x9e>
 242:	00 00       	nop

    /* 1.64 ms delay (min) */
    _delay_ms(4);

    /* Set desired shift characteristics */
    lcd_putcmd(LCD_ENTRY_MODE);
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putcmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	8f e3       	ldi	r24, 0x3F	; 63
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_init+0xaa>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_init+0xb0>
 254:	00 00       	nop

    /* 40 us delay (min) */
    _delay_us(80);

    /* Turn the display ON */
    lcd_putcmd(LCD_DISPLAY_ON);
 256:	8c e0       	ldi	r24, 0x0C	; 12
 258:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putcmd>
 25c:	8f e3       	ldi	r24, 0x3F	; 63
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0xbc>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0xc2>
 266:	00 00       	nop
 268:	08 95       	ret

0000026a <lcd_clear_row>:
     */
    _delay_us(1);

} /* End lcd_write() */

void lcd_clear_row(uint8_t row) {
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	61 97       	sbiw	r28, 0x11	; 17
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
    uint8_t clear_row[] = "                ";
 27e:	91 e1       	ldi	r25, 0x11	; 17
 280:	e0 e0       	ldi	r30, 0x00	; 0
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	de 01       	movw	r26, r28
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	01 90       	ld	r0, Z+
 28a:	0d 92       	st	X+, r0
 28c:	9a 95       	dec	r25
 28e:	e1 f7       	brne	.-8      	; 0x288 <lcd_clear_row+0x1e>
    lcd_putcmd(LCD_SET_CURSOR | row);
 290:	80 68       	ori	r24, 0x80	; 128
 292:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putcmd>
    lcd_puts(clear_row);
 296:	ce 01       	movw	r24, r28
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_puts>

 29e:	61 96       	adiw	r28, 0x11	; 17
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <adcInit>:
#include "../include/main.h"

void adcInit()
{
	DDRC   &= 0x00;					  // Set the pins for analog as input
 2b0:	87 b1       	in	r24, 0x07	; 7
 2b2:	17 b8       	out	0x07, r1	; 7
	PORTC  &= 0x00;			          // Set the pins for analog as input
 2b4:	88 b1       	in	r24, 0x08	; 8
 2b6:	18 b8       	out	0x08, r1	; 8
	// Enable ADC, ADC Interrupt
	ADCSRA |= (1 << ADEN) | (1 << ADIE)| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 
 2b8:	ea e7       	ldi	r30, 0x7A	; 122
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	8f 68       	ori	r24, 0x8F	; 143
 2c0:	80 83       	st	Z, r24
	ADMUX  |= 1 << REFS0;			  // Set reference voltage to AVCC
 2c2:	ac e7       	ldi	r26, 0x7C	; 124
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	8c 91       	ld	r24, X
 2c8:	80 64       	ori	r24, 0x40	; 64
 2ca:	8c 93       	st	X, r24
	// Start conversion and interrupts
	ADCSRA |= (1 << ADSC)|(1<< ADIE);
 2cc:	80 81       	ld	r24, Z
 2ce:	88 64       	ori	r24, 0x48	; 72
 2d0:	80 83       	st	Z, r24
 2d2:	08 95       	ret

000002d4 <btnSetupIrq>:
#include "../include/main.h"


void btnSetupIrq(void)
{
	EICRA |= (1<<ISC01); // Activate falling edge
 2d4:	e9 e6       	ldi	r30, 0x69	; 105
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);  // Activate int0
 2de:	8d b3       	in	r24, 0x1d	; 29
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	8d bb       	out	0x1d, r24	; 29
 2e4:	08 95       	ret

000002e6 <setupTim0Irq>:
#include "../include/main.h"

void setupTim0Irq(void)
{
	TCCR0B |= (1 << CS01)|(1<<CS00);
 2e6:	85 b5       	in	r24, 0x25	; 37
 2e8:	83 60       	ori	r24, 0x03	; 3
 2ea:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);
 2ec:	ee e6       	ldi	r30, 0x6E	; 110
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	81 60       	ori	r24, 0x01	; 1
 2f4:	80 83       	st	Z, r24
 2f6:	08 95       	ret

000002f8 <displayPage>:
#include "include/main.h"

void displayPage(uint8_t*headLine, uint8_t*value, uint8_t*type)
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	8b 01       	movw	r16, r22
 302:	ea 01       	movw	r28, r20
	lcd_puts(headLine);
 304:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_puts>
	lcd_puts((uint8_t*)": ");
 308:	81 e1       	ldi	r24, 0x11	; 17
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_puts>
	lcd_puts(value);
 310:	c8 01       	movw	r24, r16
 312:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_puts>
	lcd_puts((uint8_t*)" ");
 316:	8f e0       	ldi	r24, 0x0F	; 15
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_puts>
	lcd_puts(type);
 31e:	ce 01       	movw	r24, r28
 320:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_puts>
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	08 95       	ret

0000032e <__vector_1>:
uint8_t gOverflowTim0 = 0;					 // Overflow gAdcChCounter for timer 0
uint8_t gPageCountLcd = LCD_PAGE_1;			 // Page gAdcChCounter for a


ISR(BUTTON_INT0_vect) // Button Interrupt
{
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	8f 93       	push	r24
	if(gBtnFlag == BUTTON_NOT_PRESSED)
 33a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <gBtnFlag>
 33e:	81 11       	cpse	r24, r1
 340:	03 c0       	rjmp	.+6      	; 0x348 <__vector_1+0x1a>
	{
		gBtnFlag = BUTTON_PRESSED;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <gBtnFlag>
	}
	if(gBtnFlag == BUTTON_PRESSED) // Button is pressed
 348:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <gBtnFlag>
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	21 f4       	brne	.+8      	; 0x358 <__vector_1+0x2a>
	{
		TCNT0    = 0;					// Start counting the tim0 gAdcChCounter
 350:	16 bc       	out	0x26, r1	; 38
		gBtnFlag = BUTTON_DEBOUNCE_ON;  // Set a different state for debounce
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <gBtnFlag>
	}
}
 358:	8f 91       	pop	r24
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__vector_16>:

ISR(DEBOUNCE_TIMER0_OVF_vect) // Debounce Timer 0 Interrupt
{
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	8f 93       	push	r24
 370:	9f 93       	push	r25
	gOverflowTim0++;
 372:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <gOverflowTim0>
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <gOverflowTim0>
	if(gBtnFlag == BUTTON_DEBOUNCE_ON && gOverflowTim0 >= DEBOUNCE_LIMIT) // gAdcChCounter is reached and button was pressed
 37c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <gBtnFlag>
 380:	92 30       	cpi	r25, 0x02	; 2
 382:	59 f4       	brne	.+22     	; 0x39a <__vector_16+0x36>
 384:	88 3c       	cpi	r24, 0xC8	; 200
 386:	48 f0       	brcs	.+18     	; 0x39a <__vector_16+0x36>
	{
		gPageCountLcd++;
 388:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 38c:	8f 5f       	subi	r24, 0xFF	; 255
 38e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
		gBtnFlag	  = BUTTON_NOT_PRESSED;		//
 392:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <gBtnFlag>
		gOverflowTim0 = 0;
 396:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <gOverflowTim0>
	}
}
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <float_to_string>:

void float_to_string(float value, char* buffer, int precision) {
 3a8:	4f 92       	push	r4
 3aa:	5f 92       	push	r5
 3ac:	6f 92       	push	r6
 3ae:	7f 92       	push	r7
 3b0:	af 92       	push	r10
 3b2:	bf 92       	push	r11
 3b4:	cf 92       	push	r12
 3b6:	df 92       	push	r13
 3b8:	ef 92       	push	r14
 3ba:	ff 92       	push	r15
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	2b 01       	movw	r4, r22
 3c6:	3c 01       	movw	r6, r24
 3c8:	7a 01       	movw	r14, r20
 3ca:	59 01       	movw	r10, r18
	int int_part = (int)value;
 3cc:	0e 94 09 04 	call	0x812	; 0x812 <__fixsfsi>
 3d0:	8b 01       	movw	r16, r22
	float remainder = value - int_part;
 3d2:	07 2e       	mov	r0, r23
 3d4:	00 0c       	add	r0, r0
 3d6:	88 0b       	sbc	r24, r24
 3d8:	99 0b       	sbc	r25, r25
 3da:	0e 94 41 04 	call	0x882	; 0x882 <__floatsisf>
 3de:	9b 01       	movw	r18, r22
 3e0:	ac 01       	movw	r20, r24
 3e2:	c3 01       	movw	r24, r6
 3e4:	b2 01       	movw	r22, r4
 3e6:	0e 94 9c 03 	call	0x738	; 0x738 <__subsf3>
 3ea:	2b 01       	movw	r4, r22
 3ec:	3c 01       	movw	r6, r24
	int index = 0;
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	30 e0       	ldi	r19, 0x00	; 0

	// Convert the integer part to string
	while (int_part != 0) {
 3f2:	0e c0       	rjmp	.+28     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		buffer[index++] = int_part % 10 + '0';
 3f4:	f7 01       	movw	r30, r14
 3f6:	e2 0f       	add	r30, r18
 3f8:	f3 1f       	adc	r31, r19
 3fa:	c8 01       	movw	r24, r16
 3fc:	6a e0       	ldi	r22, 0x0A	; 10
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	0e 94 3a 05 	call	0xa74	; 0xa74 <__divmodhi4>
 404:	80 5d       	subi	r24, 0xD0	; 208
 406:	80 83       	st	Z, r24
		int_part /= 10;
 408:	06 2f       	mov	r16, r22
 40a:	17 2f       	mov	r17, r23
	float remainder = value - int_part;
	int index = 0;

	// Convert the integer part to string
	while (int_part != 0) {
		buffer[index++] = int_part % 10 + '0';
 40c:	2f 5f       	subi	r18, 0xFF	; 255
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
	int int_part = (int)value;
	float remainder = value - int_part;
	int index = 0;

	// Convert the integer part to string
	while (int_part != 0) {
 410:	01 15       	cp	r16, r1
 412:	11 05       	cpc	r17, r1
 414:	79 f7       	brne	.-34     	; 0x3f4 <float_to_string+0x4c>
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e c0       	rjmp	.+28     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		int_part /= 10;
	}

	// Reverse the integer part in the buffer
	for (int i = 0; i < index / 2; i++) {
		char temp = buffer[i];
 41c:	d7 01       	movw	r26, r14
 41e:	a8 0f       	add	r26, r24
 420:	b9 1f       	adc	r27, r25
 422:	4c 91       	ld	r20, X
		buffer[i] = buffer[index - i - 1];
 424:	f9 01       	movw	r30, r18
 426:	e8 1b       	sub	r30, r24
 428:	f9 0b       	sbc	r31, r25
 42a:	31 97       	sbiw	r30, 0x01	; 1
 42c:	ee 0d       	add	r30, r14
 42e:	ff 1d       	adc	r31, r15
 430:	50 81       	ld	r21, Z
 432:	5c 93       	st	X, r21
		buffer[index - i - 1] = temp;
 434:	40 83       	st	Z, r20
		buffer[index++] = int_part % 10 + '0';
		int_part /= 10;
	}

	// Reverse the integer part in the buffer
	for (int i = 0; i < index / 2; i++) {
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	a9 01       	movw	r20, r18
 43a:	33 23       	and	r19, r19
 43c:	14 f4       	brge	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	4f 5f       	subi	r20, 0xFF	; 255
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	55 95       	asr	r21
 444:	47 95       	ror	r20
 446:	84 17       	cp	r24, r20
 448:	95 07       	cpc	r25, r21
 44a:	44 f3       	brlt	.-48     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		buffer[i] = buffer[index - i - 1];
		buffer[index - i - 1] = temp;
	}

	// Append the decimal point
	buffer[index++] = '.';
 44c:	e9 01       	movw	r28, r18
 44e:	21 96       	adiw	r28, 0x01	; 1
 450:	f7 01       	movw	r30, r14
 452:	e2 0f       	add	r30, r18
 454:	f3 1f       	adc	r31, r19
 456:	8e e2       	ldi	r24, 0x2E	; 46
 458:	80 83       	st	Z, r24

	// Convert the fractional part to string
	for (int i = 0; i < precision; i++) {
 45a:	00 e0       	ldi	r16, 0x00	; 0
 45c:	10 e0       	ldi	r17, 0x00	; 0
 45e:	26 c0       	rjmp	.+76     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
		remainder *= 10;
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	40 e2       	ldi	r20, 0x20	; 32
 466:	51 e4       	ldi	r21, 0x41	; 65
 468:	c3 01       	movw	r24, r6
 46a:	b2 01       	movw	r22, r4
 46c:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 470:	2b 01       	movw	r4, r22
 472:	3c 01       	movw	r6, r24
		int digit = (int)remainder;
 474:	0e 94 09 04 	call	0x812	; 0x812 <__fixsfsi>
		buffer[index++] = digit + '0';
 478:	6e 01       	movw	r12, r28
 47a:	2f ef       	ldi	r18, 0xFF	; 255
 47c:	c2 1a       	sub	r12, r18
 47e:	d2 0a       	sbc	r13, r18
 480:	ce 0d       	add	r28, r14
 482:	df 1d       	adc	r29, r15
 484:	20 e3       	ldi	r18, 0x30	; 48
 486:	26 0f       	add	r18, r22
 488:	28 83       	st	Y, r18
		remainder -= digit;
 48a:	07 2e       	mov	r0, r23
 48c:	00 0c       	add	r0, r0
 48e:	88 0b       	sbc	r24, r24
 490:	99 0b       	sbc	r25, r25
 492:	0e 94 41 04 	call	0x882	; 0x882 <__floatsisf>
 496:	9b 01       	movw	r18, r22
 498:	ac 01       	movw	r20, r24
 49a:	c3 01       	movw	r24, r6
 49c:	b2 01       	movw	r22, r4
 49e:	0e 94 9c 03 	call	0x738	; 0x738 <__subsf3>
 4a2:	2b 01       	movw	r4, r22
 4a4:	3c 01       	movw	r6, r24

	// Append the decimal point
	buffer[index++] = '.';

	// Convert the fractional part to string
	for (int i = 0; i < precision; i++) {
 4a6:	0f 5f       	subi	r16, 0xFF	; 255
 4a8:	1f 4f       	sbci	r17, 0xFF	; 255
		remainder *= 10;
		int digit = (int)remainder;
		buffer[index++] = digit + '0';
 4aa:	e6 01       	movw	r28, r12

	// Append the decimal point
	buffer[index++] = '.';

	// Convert the fractional part to string
	for (int i = 0; i < precision; i++) {
 4ac:	0a 15       	cp	r16, r10
 4ae:	1b 05       	cpc	r17, r11
 4b0:	bc f2       	brlt	.-82     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		buffer[index++] = digit + '0';
		remainder -= digit;
	}

	// Null-terminate the string
	buffer[index] = '\0';
 4b2:	ce 0d       	add	r28, r14
 4b4:	df 1d       	adc	r29, r15
 4b6:	18 82       	st	Y, r1
}
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	ff 90       	pop	r15
 4c2:	ef 90       	pop	r14
 4c4:	df 90       	pop	r13
 4c6:	cf 90       	pop	r12
 4c8:	bf 90       	pop	r11
 4ca:	af 90       	pop	r10
 4cc:	7f 90       	pop	r7
 4ce:	6f 90       	pop	r6
 4d0:	5f 90       	pop	r5
 4d2:	4f 90       	pop	r4
 4d4:	08 95       	ret

000004d6 <displayAllData>:

void displayAllData(uint8_t pageLcd, uint8_t bType)
{
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	a8 97       	sbiw	r28, 0x28	; 40
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	e8 2e       	mov	r14, r24
 4f4:	f6 2e       	mov	r15, r22
	char voltagePotenStr[20];
	char brightnessStr[10];
	char humidityStr[10];
	float_to_string((gAdcValueCh[0]*5.0)/1024.0, voltagePotenStr, 3);
 4f6:	0c e3       	ldi	r16, 0x3C	; 60
 4f8:	11 e0       	ldi	r17, 0x01	; 1
 4fa:	f8 01       	movw	r30, r16
 4fc:	60 81       	ld	r22, Z
 4fe:	71 81       	ldd	r23, Z+1	; 0x01
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 3f 04 	call	0x87e	; 0x87e <__floatunsisf>
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	40 ea       	ldi	r20, 0xA0	; 160
 50e:	50 e4       	ldi	r21, 0x40	; 64
 510:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	40 e8       	ldi	r20, 0x80	; 128
 51a:	5a e3       	ldi	r21, 0x3A	; 58
 51c:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 520:	23 e0       	ldi	r18, 0x03	; 3
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	ae 01       	movw	r20, r28
 526:	4f 5f       	subi	r20, 0xFF	; 255
 528:	5f 4f       	sbci	r21, 0xFF	; 255
 52a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <float_to_string>
	float_to_string((gAdcValueCh[1])/1024.0*100, brightnessStr, 1);
 52e:	f8 01       	movw	r30, r16
 530:	62 81       	ldd	r22, Z+2	; 0x02
 532:	73 81       	ldd	r23, Z+3	; 0x03
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 3f 04 	call	0x87e	; 0x87e <__floatunsisf>
 53c:	20 e0       	ldi	r18, 0x00	; 0
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	40 e8       	ldi	r20, 0x80	; 128
 542:	5a e3       	ldi	r21, 0x3A	; 58
 544:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	48 ec       	ldi	r20, 0xC8	; 200
 54e:	52 e4       	ldi	r21, 0x42	; 66
 550:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	ae 01       	movw	r20, r28
 55a:	4b 5e       	subi	r20, 0xEB	; 235
 55c:	5f 4f       	sbci	r21, 0xFF	; 255
 55e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <float_to_string>
	float_to_string((gAdcValueCh[2])/1024.0*100, humidityStr, 1);
 562:	f8 01       	movw	r30, r16
 564:	64 81       	ldd	r22, Z+4	; 0x04
 566:	75 81       	ldd	r23, Z+5	; 0x05
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 3f 04 	call	0x87e	; 0x87e <__floatunsisf>
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	40 e8       	ldi	r20, 0x80	; 128
 576:	5a e3       	ldi	r21, 0x3A	; 58
 578:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	48 ec       	ldi	r20, 0xC8	; 200
 582:	52 e4       	ldi	r21, 0x42	; 66
 584:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	ae 01       	movw	r20, r28
 58e:	41 5e       	subi	r20, 0xE1	; 225
 590:	5f 4f       	sbci	r21, 0xFF	; 255
 592:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <float_to_string>
	

	if(bType == DISPLAY_LCD)
 596:	f1 10       	cpse	r15, r1
 598:	30 c0       	rjmp	.+96     	; 0x5fa <displayAllData+0x124>
	{
		lcd_putcmd(LCD_SET_CURSOR|FIRST_ROW);
 59a:	80 e8       	ldi	r24, 0x80	; 128
 59c:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putcmd>
		switch(pageLcd)
 5a0:	f1 e0       	ldi	r31, 0x01	; 1
 5a2:	ef 16       	cp	r14, r31
 5a4:	81 f0       	breq	.+32     	; 0x5c6 <displayAllData+0xf0>
 5a6:	ef 16       	cp	r14, r31
 5a8:	20 f0       	brcs	.+8      	; 0x5b2 <displayAllData+0xdc>
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	e8 16       	cp	r14, r24
 5ae:	a9 f0       	breq	.+42     	; 0x5da <displayAllData+0x104>
 5b0:	1d c0       	rjmp	.+58     	; 0x5ec <displayAllData+0x116>
		{
			case LCD_PAGE_1:
			displayPage((uint8_t*)"Voltage",(uint8_t*)voltagePotenStr,(uint8_t*)"V");
 5b2:	44 e1       	ldi	r20, 0x14	; 20
 5b4:	51 e0       	ldi	r21, 0x01	; 1
 5b6:	be 01       	movw	r22, r28
 5b8:	6f 5f       	subi	r22, 0xFF	; 255
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	86 e1       	ldi	r24, 0x16	; 22
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <displayPage>
			break;
 5c4:	13 c0       	rjmp	.+38     	; 0x5ec <displayAllData+0x116>
			case LCD_PAGE_2:
			displayPage((uint8_t*)"Light",(uint8_t*)brightnessStr,(uint8_t*)"%");
 5c6:	4e e1       	ldi	r20, 0x1E	; 30
 5c8:	51 e0       	ldi	r21, 0x01	; 1
 5ca:	be 01       	movw	r22, r28
 5cc:	6b 5e       	subi	r22, 0xEB	; 235
 5ce:	7f 4f       	sbci	r23, 0xFF	; 255
 5d0:	80 e2       	ldi	r24, 0x20	; 32
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <displayPage>
			break;
 5d8:	09 c0       	rjmp	.+18     	; 0x5ec <displayAllData+0x116>
			case LCD_PAGE_3:
			displayPage((uint8_t*)"Humidity",(uint8_t*)humidityStr,(uint8_t*)"%");
 5da:	4e e1       	ldi	r20, 0x1E	; 30
 5dc:	51 e0       	ldi	r21, 0x01	; 1
 5de:	be 01       	movw	r22, r28
 5e0:	61 5e       	subi	r22, 0xE1	; 225
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	86 e2       	ldi	r24, 0x26	; 38
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <displayPage>
			break;
		}
		lcd_putcmd(LCD_HOME);
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_putcmd>
		lcd_clear_row(FIRST_ROW);
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_clear_row>
 5f8:	1f c0       	rjmp	.+62     	; 0x638 <displayAllData+0x162>
	}
	else if (bType == DISPLAY_UART)
 5fa:	e1 e0       	ldi	r30, 0x01	; 1
 5fc:	fe 12       	cpse	r15, r30
 5fe:	1c c0       	rjmp	.+56     	; 0x638 <displayAllData+0x162>
	{
		usartTransmitString(voltagePotenStr);
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	0e 94 8f 03 	call	0x71e	; 0x71e <usartTransmitString>
		usartTransmitString(" V ");
 608:	8f e2       	ldi	r24, 0x2F	; 47
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	0e 94 8f 03 	call	0x71e	; 0x71e <usartTransmitString>
		usartTransmitString(" ");
 610:	8f e0       	ldi	r24, 0x0F	; 15
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	0e 94 8f 03 	call	0x71e	; 0x71e <usartTransmitString>
		usartTransmitString(brightnessStr);
 618:	ce 01       	movw	r24, r28
 61a:	45 96       	adiw	r24, 0x15	; 21
 61c:	0e 94 8f 03 	call	0x71e	; 0x71e <usartTransmitString>
		usartTransmitString(" ");
 620:	8f e0       	ldi	r24, 0x0F	; 15
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	0e 94 8f 03 	call	0x71e	; 0x71e <usartTransmitString>
		usartTransmitString(humidityStr);
 628:	ce 01       	movw	r24, r28
 62a:	4f 96       	adiw	r24, 0x1f	; 31
 62c:	0e 94 8f 03 	call	0x71e	; 0x71e <usartTransmitString>
		usartTransmitString("\n");
 630:	83 e3       	ldi	r24, 0x33	; 51
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	0e 94 8f 03 	call	0x71e	; 0x71e <usartTransmitString>
	}
}
 638:	a8 96       	adiw	r28, 0x28	; 40
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	f8 94       	cli
 63e:	de bf       	out	0x3e, r29	; 62
 640:	0f be       	out	0x3f, r0	; 63
 642:	cd bf       	out	0x3d, r28	; 61
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	ff 90       	pop	r15
 64e:	ef 90       	pop	r14
 650:	08 95       	ret

00000652 <__vector_21>:



ISR(ADC_vect)
{
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	2f 93       	push	r18
 65e:	3f 93       	push	r19
 660:	4f 93       	push	r20
 662:	5f 93       	push	r21
 664:	6f 93       	push	r22
 666:	7f 93       	push	r23
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	af 93       	push	r26
 66e:	bf 93       	push	r27
 670:	ef 93       	push	r30
 672:	ff 93       	push	r31
	   displayAllData(gPageCountLcd, DISPLAY_LCD);
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 67a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <displayAllData>
	   if (gPageCountLcd == LCD_PAGE_LIMIT)
 67e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 682:	83 30       	cpi	r24, 0x03	; 3
 684:	11 f4       	brne	.+4      	; 0x68a <__vector_21+0x38>
	   gPageCountLcd = LCD_PAGE_1;
 686:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
	   
	   gAdcValueCh[gAdcChCounter] = ADC; // Read the ADC value
 68a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <gAdcChCounter>
 68e:	e8 2f       	mov	r30, r24
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 696:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 69a:	ee 0f       	add	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	e4 5c       	subi	r30, 0xC4	; 196
 6a0:	fe 4f       	sbci	r31, 0xFE	; 254
 6a2:	31 83       	std	Z+1, r19	; 0x01
 6a4:	20 83       	st	Z, r18
	   gAdcChCounter++;
 6a6:	8f 5f       	subi	r24, 0xFF	; 255
 6a8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <gAdcChCounter>
	   if (gAdcChCounter == 3)
 6ac:	83 30       	cpi	r24, 0x03	; 3
 6ae:	11 f4       	brne	.+4      	; 0x6b4 <__vector_21+0x62>
	   gAdcChCounter = 0;
 6b0:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <gAdcChCounter>
	   
	   ADMUX = gAdcCh[gAdcChCounter]; // Select the next channel
 6b4:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <gAdcChCounter>
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	eb 5c       	subi	r30, 0xCB	; 203
 6bc:	fe 4f       	sbci	r31, 0xFE	; 254
 6be:	80 81       	ld	r24, Z
 6c0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	   ADCSRA |= (1 << ADSC); // Start the next conversion
 6c4:	ea e7       	ldi	r30, 0x7A	; 122
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	80 64       	ori	r24, 0x40	; 64
 6cc:	80 83       	st	Z, r24
	{
		gAdcValueCh[i] = ADC;
		ADMUX		   = gAdcCh[i]; // Select the next channel
		ADCSRA |= (1 << ADSC);							// Start the next conversion
	}*/
}
 6ce:	ff 91       	pop	r31
 6d0:	ef 91       	pop	r30
 6d2:	bf 91       	pop	r27
 6d4:	af 91       	pop	r26
 6d6:	9f 91       	pop	r25
 6d8:	8f 91       	pop	r24
 6da:	7f 91       	pop	r23
 6dc:	6f 91       	pop	r22
 6de:	5f 91       	pop	r21
 6e0:	4f 91       	pop	r20
 6e2:	3f 91       	pop	r19
 6e4:	2f 91       	pop	r18
 6e6:	0f 90       	pop	r0
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	0f 90       	pop	r0
 6ec:	1f 90       	pop	r1
 6ee:	18 95       	reti

000006f0 <main>:



int main(void)
{
	DDRB   |= (1<<PORTB5);
 6f0:	84 b1       	in	r24, 0x04	; 4
 6f2:	80 62       	ori	r24, 0x20	; 32
 6f4:	84 b9       	out	0x04, r24	; 4
	PORTB  &= ~(1<<PORTB5);
 6f6:	85 b1       	in	r24, 0x05	; 5
 6f8:	8f 7d       	andi	r24, 0xDF	; 223
 6fa:	85 b9       	out	0x05, r24	; 5
				
	//USART_Init(MYUBRR);
	lcd_init();
 6fc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_init>
	setupTim0Irq();			// Timer 0 for button debounce
 700:	0e 94 73 01 	call	0x2e6	; 0x2e6 <setupTim0Irq>
	btnSetupIrq();
 704:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <btnSetupIrq>
	adcInit();
 708:	0e 94 58 01 	call	0x2b0	; 0x2b0 <adcInit>
	sei();
 70c:	78 94       	sei
 70e:	ff cf       	rjmp	.-2      	; 0x70e <main+0x1e>

00000710 <USART_Transmit>:
#include "include/main.h"

void USART_Transmit(unsigned char data) // Sending 5 to 8 bits
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 710:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 714:	95 ff       	sbrs	r25, 5
 716:	fc cf       	rjmp	.-8      	; 0x710 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 718:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 71c:	08 95       	ret

0000071e <usartTransmitString>:
}

void usartTransmitString(char *str)
{
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	ec 01       	movw	r28, r24
	while(*str)
 724:	03 c0       	rjmp	.+6      	; 0x72c <usartTransmitString+0xe>
	USART_Transmit(*str++);
 726:	21 96       	adiw	r28, 0x01	; 1
 728:	0e 94 88 03 	call	0x710	; 0x710 <USART_Transmit>
	UDR0 = data;
}

void usartTransmitString(char *str)
{
	while(*str)
 72c:	88 81       	ld	r24, Y
 72e:	81 11       	cpse	r24, r1
 730:	fa cf       	rjmp	.-12     	; 0x726 <usartTransmitString+0x8>
	USART_Transmit(*str++);
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <__subsf3>:
 738:	50 58       	subi	r21, 0x80	; 128

0000073a <__addsf3>:
 73a:	bb 27       	eor	r27, r27
 73c:	aa 27       	eor	r26, r26
 73e:	0e 94 b4 03 	call	0x768	; 0x768 <__addsf3x>
 742:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_round>
 746:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_pscA>
 74a:	38 f0       	brcs	.+14     	; 0x75a <__addsf3+0x20>
 74c:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_pscB>
 750:	20 f0       	brcs	.+8      	; 0x75a <__addsf3+0x20>
 752:	39 f4       	brne	.+14     	; 0x762 <__addsf3+0x28>
 754:	9f 3f       	cpi	r25, 0xFF	; 255
 756:	19 f4       	brne	.+6      	; 0x75e <__addsf3+0x24>
 758:	26 f4       	brtc	.+8      	; 0x762 <__addsf3+0x28>
 75a:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_nan>
 75e:	0e f4       	brtc	.+2      	; 0x762 <__addsf3+0x28>
 760:	e0 95       	com	r30
 762:	e7 fb       	bst	r30, 7
 764:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>

00000768 <__addsf3x>:
 768:	e9 2f       	mov	r30, r25
 76a:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_split3>
 76e:	58 f3       	brcs	.-42     	; 0x746 <__addsf3+0xc>
 770:	ba 17       	cp	r27, r26
 772:	62 07       	cpc	r22, r18
 774:	73 07       	cpc	r23, r19
 776:	84 07       	cpc	r24, r20
 778:	95 07       	cpc	r25, r21
 77a:	20 f0       	brcs	.+8      	; 0x784 <__addsf3x+0x1c>
 77c:	79 f4       	brne	.+30     	; 0x79c <__addsf3x+0x34>
 77e:	a6 f5       	brtc	.+104    	; 0x7e8 <__addsf3x+0x80>
 780:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_zero>
 784:	0e f4       	brtc	.+2      	; 0x788 <__addsf3x+0x20>
 786:	e0 95       	com	r30
 788:	0b 2e       	mov	r0, r27
 78a:	ba 2f       	mov	r27, r26
 78c:	a0 2d       	mov	r26, r0
 78e:	0b 01       	movw	r0, r22
 790:	b9 01       	movw	r22, r18
 792:	90 01       	movw	r18, r0
 794:	0c 01       	movw	r0, r24
 796:	ca 01       	movw	r24, r20
 798:	a0 01       	movw	r20, r0
 79a:	11 24       	eor	r1, r1
 79c:	ff 27       	eor	r31, r31
 79e:	59 1b       	sub	r21, r25
 7a0:	99 f0       	breq	.+38     	; 0x7c8 <__addsf3x+0x60>
 7a2:	59 3f       	cpi	r21, 0xF9	; 249
 7a4:	50 f4       	brcc	.+20     	; 0x7ba <__addsf3x+0x52>
 7a6:	50 3e       	cpi	r21, 0xE0	; 224
 7a8:	68 f1       	brcs	.+90     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7aa:	1a 16       	cp	r1, r26
 7ac:	f0 40       	sbci	r31, 0x00	; 0
 7ae:	a2 2f       	mov	r26, r18
 7b0:	23 2f       	mov	r18, r19
 7b2:	34 2f       	mov	r19, r20
 7b4:	44 27       	eor	r20, r20
 7b6:	58 5f       	subi	r21, 0xF8	; 248
 7b8:	f3 cf       	rjmp	.-26     	; 0x7a0 <__addsf3x+0x38>
 7ba:	46 95       	lsr	r20
 7bc:	37 95       	ror	r19
 7be:	27 95       	ror	r18
 7c0:	a7 95       	ror	r26
 7c2:	f0 40       	sbci	r31, 0x00	; 0
 7c4:	53 95       	inc	r21
 7c6:	c9 f7       	brne	.-14     	; 0x7ba <__addsf3x+0x52>
 7c8:	7e f4       	brtc	.+30     	; 0x7e8 <__addsf3x+0x80>
 7ca:	1f 16       	cp	r1, r31
 7cc:	ba 0b       	sbc	r27, r26
 7ce:	62 0b       	sbc	r22, r18
 7d0:	73 0b       	sbc	r23, r19
 7d2:	84 0b       	sbc	r24, r20
 7d4:	ba f0       	brmi	.+46     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7d6:	91 50       	subi	r25, 0x01	; 1
 7d8:	a1 f0       	breq	.+40     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7da:	ff 0f       	add	r31, r31
 7dc:	bb 1f       	adc	r27, r27
 7de:	66 1f       	adc	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	88 1f       	adc	r24, r24
 7e4:	c2 f7       	brpl	.-16     	; 0x7d6 <__addsf3x+0x6e>
 7e6:	0e c0       	rjmp	.+28     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e8:	ba 0f       	add	r27, r26
 7ea:	62 1f       	adc	r22, r18
 7ec:	73 1f       	adc	r23, r19
 7ee:	84 1f       	adc	r24, r20
 7f0:	48 f4       	brcc	.+18     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f2:	87 95       	ror	r24
 7f4:	77 95       	ror	r23
 7f6:	67 95       	ror	r22
 7f8:	b7 95       	ror	r27
 7fa:	f7 95       	ror	r31
 7fc:	9e 3f       	cpi	r25, 0xFE	; 254
 7fe:	08 f0       	brcs	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 800:	b0 cf       	rjmp	.-160    	; 0x762 <__addsf3+0x28>
 802:	93 95       	inc	r25
 804:	88 0f       	add	r24, r24
 806:	08 f0       	brcs	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 808:	99 27       	eor	r25, r25
 80a:	ee 0f       	add	r30, r30
 80c:	97 95       	ror	r25
 80e:	87 95       	ror	r24
 810:	08 95       	ret

00000812 <__fixsfsi>:
 812:	0e 94 10 04 	call	0x820	; 0x820 <__fixunssfsi>
 816:	68 94       	set
 818:	b1 11       	cpse	r27, r1
 81a:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>
 81e:	08 95       	ret

00000820 <__fixunssfsi>:
 820:	0e 94 ac 04 	call	0x958	; 0x958 <__fp_splitA>
 824:	88 f0       	brcs	.+34     	; 0x848 <__fixunssfsi+0x28>
 826:	9f 57       	subi	r25, 0x7F	; 127
 828:	98 f0       	brcs	.+38     	; 0x850 <__fixunssfsi+0x30>
 82a:	b9 2f       	mov	r27, r25
 82c:	99 27       	eor	r25, r25
 82e:	b7 51       	subi	r27, 0x17	; 23
 830:	b0 f0       	brcs	.+44     	; 0x85e <__fixunssfsi+0x3e>
 832:	e1 f0       	breq	.+56     	; 0x86c <__fixunssfsi+0x4c>
 834:	66 0f       	add	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	88 1f       	adc	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	1a f0       	brmi	.+6      	; 0x844 <__fixunssfsi+0x24>
 83e:	ba 95       	dec	r27
 840:	c9 f7       	brne	.-14     	; 0x834 <__fixunssfsi+0x14>
 842:	14 c0       	rjmp	.+40     	; 0x86c <__fixunssfsi+0x4c>
 844:	b1 30       	cpi	r27, 0x01	; 1
 846:	91 f0       	breq	.+36     	; 0x86c <__fixunssfsi+0x4c>
 848:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_zero>
 84c:	b1 e0       	ldi	r27, 0x01	; 1
 84e:	08 95       	ret
 850:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_zero>
 854:	67 2f       	mov	r22, r23
 856:	78 2f       	mov	r23, r24
 858:	88 27       	eor	r24, r24
 85a:	b8 5f       	subi	r27, 0xF8	; 248
 85c:	39 f0       	breq	.+14     	; 0x86c <__fixunssfsi+0x4c>
 85e:	b9 3f       	cpi	r27, 0xF9	; 249
 860:	cc f3       	brlt	.-14     	; 0x854 <__fixunssfsi+0x34>
 862:	86 95       	lsr	r24
 864:	77 95       	ror	r23
 866:	67 95       	ror	r22
 868:	b3 95       	inc	r27
 86a:	d9 f7       	brne	.-10     	; 0x862 <__fixunssfsi+0x42>
 86c:	3e f4       	brtc	.+14     	; 0x87c <__fixunssfsi+0x5c>
 86e:	90 95       	com	r25
 870:	80 95       	com	r24
 872:	70 95       	com	r23
 874:	61 95       	neg	r22
 876:	7f 4f       	sbci	r23, 0xFF	; 255
 878:	8f 4f       	sbci	r24, 0xFF	; 255
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	08 95       	ret

0000087e <__floatunsisf>:
 87e:	e8 94       	clt
 880:	09 c0       	rjmp	.+18     	; 0x894 <__floatsisf+0x12>

00000882 <__floatsisf>:
 882:	97 fb       	bst	r25, 7
 884:	3e f4       	brtc	.+14     	; 0x894 <__floatsisf+0x12>
 886:	90 95       	com	r25
 888:	80 95       	com	r24
 88a:	70 95       	com	r23
 88c:	61 95       	neg	r22
 88e:	7f 4f       	sbci	r23, 0xFF	; 255
 890:	8f 4f       	sbci	r24, 0xFF	; 255
 892:	9f 4f       	sbci	r25, 0xFF	; 255
 894:	99 23       	and	r25, r25
 896:	a9 f0       	breq	.+42     	; 0x8c2 <__floatsisf+0x40>
 898:	f9 2f       	mov	r31, r25
 89a:	96 e9       	ldi	r25, 0x96	; 150
 89c:	bb 27       	eor	r27, r27
 89e:	93 95       	inc	r25
 8a0:	f6 95       	lsr	r31
 8a2:	87 95       	ror	r24
 8a4:	77 95       	ror	r23
 8a6:	67 95       	ror	r22
 8a8:	b7 95       	ror	r27
 8aa:	f1 11       	cpse	r31, r1
 8ac:	f8 cf       	rjmp	.-16     	; 0x89e <__floatsisf+0x1c>
 8ae:	fa f4       	brpl	.+62     	; 0x8ee <__floatsisf+0x6c>
 8b0:	bb 0f       	add	r27, r27
 8b2:	11 f4       	brne	.+4      	; 0x8b8 <__floatsisf+0x36>
 8b4:	60 ff       	sbrs	r22, 0
 8b6:	1b c0       	rjmp	.+54     	; 0x8ee <__floatsisf+0x6c>
 8b8:	6f 5f       	subi	r22, 0xFF	; 255
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	16 c0       	rjmp	.+44     	; 0x8ee <__floatsisf+0x6c>
 8c2:	88 23       	and	r24, r24
 8c4:	11 f0       	breq	.+4      	; 0x8ca <__floatsisf+0x48>
 8c6:	96 e9       	ldi	r25, 0x96	; 150
 8c8:	11 c0       	rjmp	.+34     	; 0x8ec <__floatsisf+0x6a>
 8ca:	77 23       	and	r23, r23
 8cc:	21 f0       	breq	.+8      	; 0x8d6 <__floatsisf+0x54>
 8ce:	9e e8       	ldi	r25, 0x8E	; 142
 8d0:	87 2f       	mov	r24, r23
 8d2:	76 2f       	mov	r23, r22
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <__floatsisf+0x5e>
 8d6:	66 23       	and	r22, r22
 8d8:	71 f0       	breq	.+28     	; 0x8f6 <__floatsisf+0x74>
 8da:	96 e8       	ldi	r25, 0x86	; 134
 8dc:	86 2f       	mov	r24, r22
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	60 e0       	ldi	r22, 0x00	; 0
 8e2:	2a f0       	brmi	.+10     	; 0x8ee <__floatsisf+0x6c>
 8e4:	9a 95       	dec	r25
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	da f7       	brpl	.-10     	; 0x8e4 <__floatsisf+0x62>
 8ee:	88 0f       	add	r24, r24
 8f0:	96 95       	lsr	r25
 8f2:	87 95       	ror	r24
 8f4:	97 f9       	bld	r25, 7
 8f6:	08 95       	ret

000008f8 <__fp_inf>:
 8f8:	97 f9       	bld	r25, 7
 8fa:	9f 67       	ori	r25, 0x7F	; 127
 8fc:	80 e8       	ldi	r24, 0x80	; 128
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	60 e0       	ldi	r22, 0x00	; 0
 902:	08 95       	ret

00000904 <__fp_nan>:
 904:	9f ef       	ldi	r25, 0xFF	; 255
 906:	80 ec       	ldi	r24, 0xC0	; 192
 908:	08 95       	ret

0000090a <__fp_pscA>:
 90a:	00 24       	eor	r0, r0
 90c:	0a 94       	dec	r0
 90e:	16 16       	cp	r1, r22
 910:	17 06       	cpc	r1, r23
 912:	18 06       	cpc	r1, r24
 914:	09 06       	cpc	r0, r25
 916:	08 95       	ret

00000918 <__fp_pscB>:
 918:	00 24       	eor	r0, r0
 91a:	0a 94       	dec	r0
 91c:	12 16       	cp	r1, r18
 91e:	13 06       	cpc	r1, r19
 920:	14 06       	cpc	r1, r20
 922:	05 06       	cpc	r0, r21
 924:	08 95       	ret

00000926 <__fp_round>:
 926:	09 2e       	mov	r0, r25
 928:	03 94       	inc	r0
 92a:	00 0c       	add	r0, r0
 92c:	11 f4       	brne	.+4      	; 0x932 <__fp_round+0xc>
 92e:	88 23       	and	r24, r24
 930:	52 f0       	brmi	.+20     	; 0x946 <__fp_round+0x20>
 932:	bb 0f       	add	r27, r27
 934:	40 f4       	brcc	.+16     	; 0x946 <__fp_round+0x20>
 936:	bf 2b       	or	r27, r31
 938:	11 f4       	brne	.+4      	; 0x93e <__fp_round+0x18>
 93a:	60 ff       	sbrs	r22, 0
 93c:	04 c0       	rjmp	.+8      	; 0x946 <__fp_round+0x20>
 93e:	6f 5f       	subi	r22, 0xFF	; 255
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	08 95       	ret

00000948 <__fp_split3>:
 948:	57 fd       	sbrc	r21, 7
 94a:	90 58       	subi	r25, 0x80	; 128
 94c:	44 0f       	add	r20, r20
 94e:	55 1f       	adc	r21, r21
 950:	59 f0       	breq	.+22     	; 0x968 <__fp_splitA+0x10>
 952:	5f 3f       	cpi	r21, 0xFF	; 255
 954:	71 f0       	breq	.+28     	; 0x972 <__fp_splitA+0x1a>
 956:	47 95       	ror	r20

00000958 <__fp_splitA>:
 958:	88 0f       	add	r24, r24
 95a:	97 fb       	bst	r25, 7
 95c:	99 1f       	adc	r25, r25
 95e:	61 f0       	breq	.+24     	; 0x978 <__fp_splitA+0x20>
 960:	9f 3f       	cpi	r25, 0xFF	; 255
 962:	79 f0       	breq	.+30     	; 0x982 <__fp_splitA+0x2a>
 964:	87 95       	ror	r24
 966:	08 95       	ret
 968:	12 16       	cp	r1, r18
 96a:	13 06       	cpc	r1, r19
 96c:	14 06       	cpc	r1, r20
 96e:	55 1f       	adc	r21, r21
 970:	f2 cf       	rjmp	.-28     	; 0x956 <__fp_split3+0xe>
 972:	46 95       	lsr	r20
 974:	f1 df       	rcall	.-30     	; 0x958 <__fp_splitA>
 976:	08 c0       	rjmp	.+16     	; 0x988 <__fp_splitA+0x30>
 978:	16 16       	cp	r1, r22
 97a:	17 06       	cpc	r1, r23
 97c:	18 06       	cpc	r1, r24
 97e:	99 1f       	adc	r25, r25
 980:	f1 cf       	rjmp	.-30     	; 0x964 <__fp_splitA+0xc>
 982:	86 95       	lsr	r24
 984:	71 05       	cpc	r23, r1
 986:	61 05       	cpc	r22, r1
 988:	08 94       	sec
 98a:	08 95       	ret

0000098c <__fp_zero>:
 98c:	e8 94       	clt

0000098e <__fp_szero>:
 98e:	bb 27       	eor	r27, r27
 990:	66 27       	eor	r22, r22
 992:	77 27       	eor	r23, r23
 994:	cb 01       	movw	r24, r22
 996:	97 f9       	bld	r25, 7
 998:	08 95       	ret

0000099a <__mulsf3>:
 99a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__mulsf3x>
 99e:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_round>
 9a2:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_pscA>
 9a6:	38 f0       	brcs	.+14     	; 0x9b6 <__mulsf3+0x1c>
 9a8:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_pscB>
 9ac:	20 f0       	brcs	.+8      	; 0x9b6 <__mulsf3+0x1c>
 9ae:	95 23       	and	r25, r21
 9b0:	11 f0       	breq	.+4      	; 0x9b6 <__mulsf3+0x1c>
 9b2:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 9b6:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_nan>
 9ba:	11 24       	eor	r1, r1
 9bc:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>

000009c0 <__mulsf3x>:
 9c0:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_split3>
 9c4:	70 f3       	brcs	.-36     	; 0x9a2 <__mulsf3+0x8>

000009c6 <__mulsf3_pse>:
 9c6:	95 9f       	mul	r25, r21
 9c8:	c1 f3       	breq	.-16     	; 0x9ba <__mulsf3+0x20>
 9ca:	95 0f       	add	r25, r21
 9cc:	50 e0       	ldi	r21, 0x00	; 0
 9ce:	55 1f       	adc	r21, r21
 9d0:	62 9f       	mul	r22, r18
 9d2:	f0 01       	movw	r30, r0
 9d4:	72 9f       	mul	r23, r18
 9d6:	bb 27       	eor	r27, r27
 9d8:	f0 0d       	add	r31, r0
 9da:	b1 1d       	adc	r27, r1
 9dc:	63 9f       	mul	r22, r19
 9de:	aa 27       	eor	r26, r26
 9e0:	f0 0d       	add	r31, r0
 9e2:	b1 1d       	adc	r27, r1
 9e4:	aa 1f       	adc	r26, r26
 9e6:	64 9f       	mul	r22, r20
 9e8:	66 27       	eor	r22, r22
 9ea:	b0 0d       	add	r27, r0
 9ec:	a1 1d       	adc	r26, r1
 9ee:	66 1f       	adc	r22, r22
 9f0:	82 9f       	mul	r24, r18
 9f2:	22 27       	eor	r18, r18
 9f4:	b0 0d       	add	r27, r0
 9f6:	a1 1d       	adc	r26, r1
 9f8:	62 1f       	adc	r22, r18
 9fa:	73 9f       	mul	r23, r19
 9fc:	b0 0d       	add	r27, r0
 9fe:	a1 1d       	adc	r26, r1
 a00:	62 1f       	adc	r22, r18
 a02:	83 9f       	mul	r24, r19
 a04:	a0 0d       	add	r26, r0
 a06:	61 1d       	adc	r22, r1
 a08:	22 1f       	adc	r18, r18
 a0a:	74 9f       	mul	r23, r20
 a0c:	33 27       	eor	r19, r19
 a0e:	a0 0d       	add	r26, r0
 a10:	61 1d       	adc	r22, r1
 a12:	23 1f       	adc	r18, r19
 a14:	84 9f       	mul	r24, r20
 a16:	60 0d       	add	r22, r0
 a18:	21 1d       	adc	r18, r1
 a1a:	82 2f       	mov	r24, r18
 a1c:	76 2f       	mov	r23, r22
 a1e:	6a 2f       	mov	r22, r26
 a20:	11 24       	eor	r1, r1
 a22:	9f 57       	subi	r25, 0x7F	; 127
 a24:	50 40       	sbci	r21, 0x00	; 0
 a26:	9a f0       	brmi	.+38     	; 0xa4e <__mulsf3_pse+0x88>
 a28:	f1 f0       	breq	.+60     	; 0xa66 <__mulsf3_pse+0xa0>
 a2a:	88 23       	and	r24, r24
 a2c:	4a f0       	brmi	.+18     	; 0xa40 <__mulsf3_pse+0x7a>
 a2e:	ee 0f       	add	r30, r30
 a30:	ff 1f       	adc	r31, r31
 a32:	bb 1f       	adc	r27, r27
 a34:	66 1f       	adc	r22, r22
 a36:	77 1f       	adc	r23, r23
 a38:	88 1f       	adc	r24, r24
 a3a:	91 50       	subi	r25, 0x01	; 1
 a3c:	50 40       	sbci	r21, 0x00	; 0
 a3e:	a9 f7       	brne	.-22     	; 0xa2a <__mulsf3_pse+0x64>
 a40:	9e 3f       	cpi	r25, 0xFE	; 254
 a42:	51 05       	cpc	r21, r1
 a44:	80 f0       	brcs	.+32     	; 0xa66 <__mulsf3_pse+0xa0>
 a46:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 a4a:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>
 a4e:	5f 3f       	cpi	r21, 0xFF	; 255
 a50:	e4 f3       	brlt	.-8      	; 0xa4a <__mulsf3_pse+0x84>
 a52:	98 3e       	cpi	r25, 0xE8	; 232
 a54:	d4 f3       	brlt	.-12     	; 0xa4a <__mulsf3_pse+0x84>
 a56:	86 95       	lsr	r24
 a58:	77 95       	ror	r23
 a5a:	67 95       	ror	r22
 a5c:	b7 95       	ror	r27
 a5e:	f7 95       	ror	r31
 a60:	e7 95       	ror	r30
 a62:	9f 5f       	subi	r25, 0xFF	; 255
 a64:	c1 f7       	brne	.-16     	; 0xa56 <__mulsf3_pse+0x90>
 a66:	fe 2b       	or	r31, r30
 a68:	88 0f       	add	r24, r24
 a6a:	91 1d       	adc	r25, r1
 a6c:	96 95       	lsr	r25
 a6e:	87 95       	ror	r24
 a70:	97 f9       	bld	r25, 7
 a72:	08 95       	ret

00000a74 <__divmodhi4>:
 a74:	97 fb       	bst	r25, 7
 a76:	07 2e       	mov	r0, r23
 a78:	16 f4       	brtc	.+4      	; 0xa7e <__divmodhi4+0xa>
 a7a:	00 94       	com	r0
 a7c:	07 d0       	rcall	.+14     	; 0xa8c <__divmodhi4_neg1>
 a7e:	77 fd       	sbrc	r23, 7
 a80:	09 d0       	rcall	.+18     	; 0xa94 <__divmodhi4_neg2>
 a82:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__udivmodhi4>
 a86:	07 fc       	sbrc	r0, 7
 a88:	05 d0       	rcall	.+10     	; 0xa94 <__divmodhi4_neg2>
 a8a:	3e f4       	brtc	.+14     	; 0xa9a <__divmodhi4_exit>

00000a8c <__divmodhi4_neg1>:
 a8c:	90 95       	com	r25
 a8e:	81 95       	neg	r24
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	08 95       	ret

00000a94 <__divmodhi4_neg2>:
 a94:	70 95       	com	r23
 a96:	61 95       	neg	r22
 a98:	7f 4f       	sbci	r23, 0xFF	; 255

00000a9a <__divmodhi4_exit>:
 a9a:	08 95       	ret

00000a9c <__udivmodhi4>:
 a9c:	aa 1b       	sub	r26, r26
 a9e:	bb 1b       	sub	r27, r27
 aa0:	51 e1       	ldi	r21, 0x11	; 17
 aa2:	07 c0       	rjmp	.+14     	; 0xab2 <__udivmodhi4_ep>

00000aa4 <__udivmodhi4_loop>:
 aa4:	aa 1f       	adc	r26, r26
 aa6:	bb 1f       	adc	r27, r27
 aa8:	a6 17       	cp	r26, r22
 aaa:	b7 07       	cpc	r27, r23
 aac:	10 f0       	brcs	.+4      	; 0xab2 <__udivmodhi4_ep>
 aae:	a6 1b       	sub	r26, r22
 ab0:	b7 0b       	sbc	r27, r23

00000ab2 <__udivmodhi4_ep>:
 ab2:	88 1f       	adc	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	5a 95       	dec	r21
 ab8:	a9 f7       	brne	.-22     	; 0xaa4 <__udivmodhi4_loop>
 aba:	80 95       	com	r24
 abc:	90 95       	com	r25
 abe:	bc 01       	movw	r22, r24
 ac0:	cd 01       	movw	r24, r26
 ac2:	08 95       	ret

00000ac4 <_exit>:
 ac4:	f8 94       	cli

00000ac6 <__stop_program>:
 ac6:	ff cf       	rjmp	.-2      	; 0xac6 <__stop_program>
