
ADC and PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000762  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bc  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ac  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c0  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047d  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fe  00000000  00000000  0000240d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000280b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
  88:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:

	 // Set ICR1 to define the PWM period
	 ICR1 = 1000; 

	 // Optionally, set OCR1A to define the initial PWM duty cycle
	 OCR1A = 100; 
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  a2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  a6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <result+0x1>
  aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <result>
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <phCorrPwmTim1>:
}

void phCorrPwmTim1()
{
	DDRB |= (1 << PORTB1);
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	84 b9       	out	0x04, r24	; 4
	// Set Phase Correct PWM mode with non-inverting output on OC1A (Pin PB1)
	TCCR1A |=  (1 << COM1A1) | (1 << WGM11);
  c8:	e0 e8       	ldi	r30, 0x80	; 128
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 68       	ori	r24, 0x82	; 130
  d0:	80 83       	st	Z, r24
	// Set WGM13, CS10, and CS12 bits for Phase Correct PWM mode with prescaler 64
	TCCR1B |= (1 << WGM13) | (1 << CS10) | (1 << CS11);
  d2:	e1 e8       	ldi	r30, 0x81	; 129
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	83 61       	ori	r24, 0x13	; 19
  da:	80 83       	st	Z, r24
	
	// Set ICR1 to define the PWM period
	ICR1 = 1000; 
  dc:	88 ee       	ldi	r24, 0xE8	; 232
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  e4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	// Optionally, set OCR1A to define the initial PWM duty cycle
	OCR1A = 900; 
  e8:	84 e8       	ldi	r24, 0x84	; 132
  ea:	93 e0       	ldi	r25, 0x03	; 3
  ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  f4:	08 95       	ret

000000f6 <fastPwmTim0>:
}


void fastPwmTim0()
{
	DDRD   |= (1<<PORTD6);
  f6:	8a b1       	in	r24, 0x0a	; 10
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = (1 << WGM00) | (1 << WGM01) | (1 << COM0A1); // Fast PWM mode, non-inverting
  fc:	83 e8       	ldi	r24, 0x83	; 131
  fe:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler = 64
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	85 bd       	out	0x25, r24	; 37
 
	// Set the initial duty cycle (0 to 255)
	OCR0A = 127; // 50% duty cycle
 104:	8f e7       	ldi	r24, 0x7F	; 127
 106:	87 bd       	out	0x27, r24	; 39
 108:	08 95       	ret

0000010a <adcSetup>:
}


void adcSetup()
{
	 DDRC   |= 0x00;					  // Set the pins for analog as input
 10a:	87 b1       	in	r24, 0x07	; 7
 10c:	87 b9       	out	0x07, r24	; 7
	 PORTC  |= 0x00;			          // Set the pins for analog as input
 10e:	88 b1       	in	r24, 0x08	; 8
 110:	88 b9       	out	0x08, r24	; 8
	 ADCSRA |= (1 << ADEN) | (1 << ADIE)| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Enable ADC, ADC Interrupt
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8f 68       	ori	r24, 0x8F	; 143
 11a:	80 83       	st	Z, r24
	 ADMUX  |= 1 << REFS0;				  // Set reference voltage to AVCC
 11c:	ac e7       	ldi	r26, 0x7C	; 124
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	8c 91       	ld	r24, X
 122:	80 64       	ori	r24, 0x40	; 64
 124:	8c 93       	st	X, r24
	// ADMUX  |= 1 << ADLAR;				  // Left adjust result 


	 // Set ADC channel to 0
	 //ADMUX &= ~(1 << MUX0) & ~(1 << MUX1) & ~(1 << MUX2) & ~(1 << MUX3);
	 ADMUX |= (1 << MUX0);
 126:	8c 91       	ld	r24, X
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	8c 93       	st	X, r24

	 // Start conversion and interrupts
	 ADCSRA |= (1 << ADSC)|(1<< ADIE);
 12c:	80 81       	ld	r24, Z
 12e:	88 64       	ori	r24, 0x48	; 72
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <USART_Transmit>:
}

void USART_Transmit(unsigned char data) // Sending 5 to 8 bits
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 134:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 138:	95 ff       	sbrs	r25, 5
 13a:	fc cf       	rjmp	.-8      	; 0x134 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 140:	08 95       	ret

00000142 <USART_Init>:
}

void USART_Init(unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8); // High bit?
 142:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) ubrr;	   // Low bit?
 146:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 14a:	88 e9       	ldi	r24, 0x98	; 152
 14c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00)|(0<<UMSEL00);
 150:	8e e0       	ldi	r24, 0x0E	; 14
 152:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 156:	08 95       	ret

00000158 <usartTransmitString>:
	//UCSR0C = (1<<UCSZ00)|(1<<UCSZ01)(0<<UMSEL00);
}
	
	
void usartTransmitString(char *str)
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
	while(*str)
 15e:	03 c0       	rjmp	.+6      	; 0x166 <usartTransmitString+0xe>
		USART_Transmit(*str++);
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	0e 94 9a 00 	call	0x134	; 0x134 <USART_Transmit>
}
	
	
void usartTransmitString(char *str)
{
	while(*str)
 166:	88 81       	ld	r24, Y
 168:	81 11       	cpse	r24, r1
 16a:	fa cf       	rjmp	.-12     	; 0x160 <usartTransmitString+0x8>
		USART_Transmit(*str++);
	USART_Transmit('\n');
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	0e 94 9a 00 	call	0x134	; 0x134 <USART_Transmit>
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <float_to_string>:


void float_to_string(float value, char* buffer, int precision) {
 178:	4f 92       	push	r4
 17a:	5f 92       	push	r5
 17c:	6f 92       	push	r6
 17e:	7f 92       	push	r7
 180:	af 92       	push	r10
 182:	bf 92       	push	r11
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	2b 01       	movw	r4, r22
 196:	3c 01       	movw	r6, r24
 198:	7a 01       	movw	r14, r20
 19a:	59 01       	movw	r10, r18
	int int_part = (int)value;
 19c:	0e 94 1c 02 	call	0x438	; 0x438 <__fixsfsi>
 1a0:	8b 01       	movw	r16, r22
	float remainder = value - int_part;
 1a2:	07 2e       	mov	r0, r23
 1a4:	00 0c       	add	r0, r0
 1a6:	88 0b       	sbc	r24, r24
 1a8:	99 0b       	sbc	r25, r25
 1aa:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__floatsisf>
 1ae:	9b 01       	movw	r18, r22
 1b0:	ac 01       	movw	r20, r24
 1b2:	c3 01       	movw	r24, r6
 1b4:	b2 01       	movw	r22, r4
 1b6:	0e 94 af 01 	call	0x35e	; 0x35e <__subsf3>
 1ba:	2b 01       	movw	r4, r22
 1bc:	3c 01       	movw	r6, r24
	int index = 0;
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0

	// Convert the integer part to string
	while (int_part != 0) {
 1c2:	0e c0       	rjmp	.+28     	; 0x1e0 <float_to_string+0x68>
		buffer[index++] = int_part % 10 + '0';
 1c4:	f7 01       	movw	r30, r14
 1c6:	e2 0f       	add	r30, r18
 1c8:	f3 1f       	adc	r31, r19
 1ca:	c8 01       	movw	r24, r16
 1cc:	6a e0       	ldi	r22, 0x0A	; 10
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	0e 94 4d 03 	call	0x69a	; 0x69a <__divmodhi4>
 1d4:	80 5d       	subi	r24, 0xD0	; 208
 1d6:	80 83       	st	Z, r24
		int_part /= 10;
 1d8:	06 2f       	mov	r16, r22
 1da:	17 2f       	mov	r17, r23
	float remainder = value - int_part;
	int index = 0;

	// Convert the integer part to string
	while (int_part != 0) {
		buffer[index++] = int_part % 10 + '0';
 1dc:	2f 5f       	subi	r18, 0xFF	; 255
 1de:	3f 4f       	sbci	r19, 0xFF	; 255
	int int_part = (int)value;
	float remainder = value - int_part;
	int index = 0;

	// Convert the integer part to string
	while (int_part != 0) {
 1e0:	01 15       	cp	r16, r1
 1e2:	11 05       	cpc	r17, r1
 1e4:	79 f7       	brne	.-34     	; 0x1c4 <float_to_string+0x4c>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e c0       	rjmp	.+28     	; 0x208 <float_to_string+0x90>
		int_part /= 10;
	}

	// Reverse the integer part in the buffer
	for (int i = 0; i < index / 2; i++) {
		char temp = buffer[i];
 1ec:	d7 01       	movw	r26, r14
 1ee:	a8 0f       	add	r26, r24
 1f0:	b9 1f       	adc	r27, r25
 1f2:	4c 91       	ld	r20, X
		buffer[i] = buffer[index - i - 1];
 1f4:	f9 01       	movw	r30, r18
 1f6:	e8 1b       	sub	r30, r24
 1f8:	f9 0b       	sbc	r31, r25
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	ee 0d       	add	r30, r14
 1fe:	ff 1d       	adc	r31, r15
 200:	50 81       	ld	r21, Z
 202:	5c 93       	st	X, r21
		buffer[index - i - 1] = temp;
 204:	40 83       	st	Z, r20
		buffer[index++] = int_part % 10 + '0';
		int_part /= 10;
	}

	// Reverse the integer part in the buffer
	for (int i = 0; i < index / 2; i++) {
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	a9 01       	movw	r20, r18
 20a:	33 23       	and	r19, r19
 20c:	14 f4       	brge	.+4      	; 0x212 <float_to_string+0x9a>
 20e:	4f 5f       	subi	r20, 0xFF	; 255
 210:	5f 4f       	sbci	r21, 0xFF	; 255
 212:	55 95       	asr	r21
 214:	47 95       	ror	r20
 216:	84 17       	cp	r24, r20
 218:	95 07       	cpc	r25, r21
 21a:	44 f3       	brlt	.-48     	; 0x1ec <float_to_string+0x74>
		buffer[i] = buffer[index - i - 1];
		buffer[index - i - 1] = temp;
	}

	// Append the decimal point
	buffer[index++] = '.';
 21c:	e9 01       	movw	r28, r18
 21e:	21 96       	adiw	r28, 0x01	; 1
 220:	f7 01       	movw	r30, r14
 222:	e2 0f       	add	r30, r18
 224:	f3 1f       	adc	r31, r19
 226:	8e e2       	ldi	r24, 0x2E	; 46
 228:	80 83       	st	Z, r24

	// Convert the fractional part to string
	for (int i = 0; i < precision; i++) {
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	10 e0       	ldi	r17, 0x00	; 0
 22e:	26 c0       	rjmp	.+76     	; 0x27c <float_to_string+0x104>
		remainder *= 10;
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	40 e2       	ldi	r20, 0x20	; 32
 236:	51 e4       	ldi	r21, 0x41	; 65
 238:	c3 01       	movw	r24, r6
 23a:	b2 01       	movw	r22, r4
 23c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__mulsf3>
 240:	2b 01       	movw	r4, r22
 242:	3c 01       	movw	r6, r24
		int digit = (int)remainder;
 244:	0e 94 1c 02 	call	0x438	; 0x438 <__fixsfsi>
		buffer[index++] = digit + '0';
 248:	6e 01       	movw	r12, r28
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	c2 1a       	sub	r12, r18
 24e:	d2 0a       	sbc	r13, r18
 250:	ce 0d       	add	r28, r14
 252:	df 1d       	adc	r29, r15
 254:	20 e3       	ldi	r18, 0x30	; 48
 256:	26 0f       	add	r18, r22
 258:	28 83       	st	Y, r18
		remainder -= digit;
 25a:	07 2e       	mov	r0, r23
 25c:	00 0c       	add	r0, r0
 25e:	88 0b       	sbc	r24, r24
 260:	99 0b       	sbc	r25, r25
 262:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__floatsisf>
 266:	9b 01       	movw	r18, r22
 268:	ac 01       	movw	r20, r24
 26a:	c3 01       	movw	r24, r6
 26c:	b2 01       	movw	r22, r4
 26e:	0e 94 af 01 	call	0x35e	; 0x35e <__subsf3>
 272:	2b 01       	movw	r4, r22
 274:	3c 01       	movw	r6, r24

	// Append the decimal point
	buffer[index++] = '.';

	// Convert the fractional part to string
	for (int i = 0; i < precision; i++) {
 276:	0f 5f       	subi	r16, 0xFF	; 255
 278:	1f 4f       	sbci	r17, 0xFF	; 255
		remainder *= 10;
		int digit = (int)remainder;
		buffer[index++] = digit + '0';
 27a:	e6 01       	movw	r28, r12

	// Append the decimal point
	buffer[index++] = '.';

	// Convert the fractional part to string
	for (int i = 0; i < precision; i++) {
 27c:	0a 15       	cp	r16, r10
 27e:	1b 05       	cpc	r17, r11
 280:	bc f2       	brlt	.-82     	; 0x230 <float_to_string+0xb8>
		buffer[index++] = digit + '0';
		remainder -= digit;
	}

	// Null-terminate the string
	buffer[index] = '\0';
 282:	ce 0d       	add	r28, r14
 284:	df 1d       	adc	r29, r15
 286:	18 82       	st	Y, r1
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	bf 90       	pop	r11
 29a:	af 90       	pop	r10
 29c:	7f 90       	pop	r7
 29e:	6f 90       	pop	r6
 2a0:	5f 90       	pop	r5
 2a2:	4f 90       	pop	r4
 2a4:	08 95       	ret

000002a6 <main>:

int main(void)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	2a 97       	sbiw	r28, 0x0a	; 10
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
	char msg[10];
	// Set PB1 (OC1A) as output for PWM
	// Initialize PWM in Fast PWM mode
	//fastPwmTim1();
	DDRB |= (1<<PORTB3);
 2ba:	84 b1       	in	r24, 0x04	; 4
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	84 b9       	out	0x04, r24	; 4
	// Or Initialize PWM in Phase Correct PWM mode
	adcSetup();
 2c0:	0e 94 85 00 	call	0x10a	; 0x10a <adcSetup>
	USART_Init(MYUBRR);
 2c4:	87 e6       	ldi	r24, 0x67	; 103
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 a1 00 	call	0x142	; 0x142 <USART_Init>
	phCorrPwmTim1();
 2cc:	0e 94 61 00 	call	0xc2	; 0xc2 <phCorrPwmTim1>
	fastPwmTim0();
 2d0:	0e 94 7b 00 	call	0xf6	; 0xf6 <fastPwmTim0>
	sei();
 2d4:	78 94       	sei

	float resultf;
	while (1)
	{
		ADCSRA |= (1 << ADSC)|(1<< ADIE);
 2d6:	ea e7       	ldi	r30, 0x7A	; 122
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	88 64       	ori	r24, 0x48	; 72
 2de:	80 83       	st	Z, r24
		if(flag)
 2e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e4:	88 23       	and	r24, r24
 2e6:	19 f0       	breq	.+6      	; 0x2ee <main+0x48>
			PORTB |= (1<<PORTB3);
 2e8:	85 b1       	in	r24, 0x05	; 5
 2ea:	88 60       	ori	r24, 0x08	; 8
 2ec:	85 b9       	out	0x05, r24	; 5
			
		float_to_string((result*5.0)/1024.0, msg, 3);
 2ee:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <result>
 2f2:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <result+0x1>
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__floatunsisf>
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	40 ea       	ldi	r20, 0xA0	; 160
 304:	50 e4       	ldi	r21, 0x40	; 64
 306:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__mulsf3>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 e8       	ldi	r20, 0x80	; 128
 310:	5a e3       	ldi	r21, 0x3A	; 58
 312:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__mulsf3>
 316:	23 e0       	ldi	r18, 0x03	; 3
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	8e 01       	movw	r16, r28
 31c:	0f 5f       	subi	r16, 0xFF	; 255
 31e:	1f 4f       	sbci	r17, 0xFF	; 255
 320:	a8 01       	movw	r20, r16
 322:	0e 94 bc 00 	call	0x178	; 0x178 <float_to_string>
		strcat(msg," V");
 326:	f8 01       	movw	r30, r16
 328:	01 90       	ld	r0, Z+
 32a:	00 20       	and	r0, r0
 32c:	e9 f7       	brne	.-6      	; 0x328 <main+0x82>
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	80 e2       	ldi	r24, 0x20	; 32
 332:	96 e5       	ldi	r25, 0x56	; 86
 334:	91 83       	std	Z+1, r25	; 0x01
 336:	80 83       	st	Z, r24
 338:	12 82       	std	Z+2, r1	; 0x02
		usartTransmitString(msg);
 33a:	c8 01       	movw	r24, r16
 33c:	0e 94 ac 00 	call	0x158	; 0x158 <usartTransmitString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	83 ec       	ldi	r24, 0xC3	; 195
 344:	99 e0       	ldi	r25, 0x09	; 9
 346:	21 50       	subi	r18, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0xa0>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0xaa>
 350:	00 00       	nop
		_delay_ms(200);
		ADCSRA &= ~((1 << ADSC)|(1<< ADIE));
 352:	ea e7       	ldi	r30, 0x7A	; 122
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	87 7b       	andi	r24, 0xB7	; 183
 35a:	80 83       	st	Z, r24
	 
	}
 35c:	bc cf       	rjmp	.-136    	; 0x2d6 <main+0x30>

0000035e <__subsf3>:
 35e:	50 58       	subi	r21, 0x80	; 128

00000360 <__addsf3>:
 360:	bb 27       	eor	r27, r27
 362:	aa 27       	eor	r26, r26
 364:	0e 94 c7 01 	call	0x38e	; 0x38e <__addsf3x>
 368:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_round>
 36c:	0e 94 98 02 	call	0x530	; 0x530 <__fp_pscA>
 370:	38 f0       	brcs	.+14     	; 0x380 <__addsf3+0x20>
 372:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_pscB>
 376:	20 f0       	brcs	.+8      	; 0x380 <__addsf3+0x20>
 378:	39 f4       	brne	.+14     	; 0x388 <__addsf3+0x28>
 37a:	9f 3f       	cpi	r25, 0xFF	; 255
 37c:	19 f4       	brne	.+6      	; 0x384 <__addsf3+0x24>
 37e:	26 f4       	brtc	.+8      	; 0x388 <__addsf3+0x28>
 380:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_nan>
 384:	0e f4       	brtc	.+2      	; 0x388 <__addsf3+0x28>
 386:	e0 95       	com	r30
 388:	e7 fb       	bst	r30, 7
 38a:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_inf>

0000038e <__addsf3x>:
 38e:	e9 2f       	mov	r30, r25
 390:	0e 94 b7 02 	call	0x56e	; 0x56e <__fp_split3>
 394:	58 f3       	brcs	.-42     	; 0x36c <__addsf3+0xc>
 396:	ba 17       	cp	r27, r26
 398:	62 07       	cpc	r22, r18
 39a:	73 07       	cpc	r23, r19
 39c:	84 07       	cpc	r24, r20
 39e:	95 07       	cpc	r25, r21
 3a0:	20 f0       	brcs	.+8      	; 0x3aa <__addsf3x+0x1c>
 3a2:	79 f4       	brne	.+30     	; 0x3c2 <__addsf3x+0x34>
 3a4:	a6 f5       	brtc	.+104    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3a6:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_zero>
 3aa:	0e f4       	brtc	.+2      	; 0x3ae <__addsf3x+0x20>
 3ac:	e0 95       	com	r30
 3ae:	0b 2e       	mov	r0, r27
 3b0:	ba 2f       	mov	r27, r26
 3b2:	a0 2d       	mov	r26, r0
 3b4:	0b 01       	movw	r0, r22
 3b6:	b9 01       	movw	r22, r18
 3b8:	90 01       	movw	r18, r0
 3ba:	0c 01       	movw	r0, r24
 3bc:	ca 01       	movw	r24, r20
 3be:	a0 01       	movw	r20, r0
 3c0:	11 24       	eor	r1, r1
 3c2:	ff 27       	eor	r31, r31
 3c4:	59 1b       	sub	r21, r25
 3c6:	99 f0       	breq	.+38     	; 0x3ee <__addsf3x+0x60>
 3c8:	59 3f       	cpi	r21, 0xF9	; 249
 3ca:	50 f4       	brcc	.+20     	; 0x3e0 <__addsf3x+0x52>
 3cc:	50 3e       	cpi	r21, 0xE0	; 224
 3ce:	68 f1       	brcs	.+90     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3d0:	1a 16       	cp	r1, r26
 3d2:	f0 40       	sbci	r31, 0x00	; 0
 3d4:	a2 2f       	mov	r26, r18
 3d6:	23 2f       	mov	r18, r19
 3d8:	34 2f       	mov	r19, r20
 3da:	44 27       	eor	r20, r20
 3dc:	58 5f       	subi	r21, 0xF8	; 248
 3de:	f3 cf       	rjmp	.-26     	; 0x3c6 <__addsf3x+0x38>
 3e0:	46 95       	lsr	r20
 3e2:	37 95       	ror	r19
 3e4:	27 95       	ror	r18
 3e6:	a7 95       	ror	r26
 3e8:	f0 40       	sbci	r31, 0x00	; 0
 3ea:	53 95       	inc	r21
 3ec:	c9 f7       	brne	.-14     	; 0x3e0 <__addsf3x+0x52>
 3ee:	7e f4       	brtc	.+30     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3f0:	1f 16       	cp	r1, r31
 3f2:	ba 0b       	sbc	r27, r26
 3f4:	62 0b       	sbc	r22, r18
 3f6:	73 0b       	sbc	r23, r19
 3f8:	84 0b       	sbc	r24, r20
 3fa:	ba f0       	brmi	.+46     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3fc:	91 50       	subi	r25, 0x01	; 1
 3fe:	a1 f0       	breq	.+40     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 400:	ff 0f       	add	r31, r31
 402:	bb 1f       	adc	r27, r27
 404:	66 1f       	adc	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	88 1f       	adc	r24, r24
 40a:	c2 f7       	brpl	.-16     	; 0x3fc <__addsf3x+0x6e>
 40c:	0e c0       	rjmp	.+28     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 40e:	ba 0f       	add	r27, r26
 410:	62 1f       	adc	r22, r18
 412:	73 1f       	adc	r23, r19
 414:	84 1f       	adc	r24, r20
 416:	48 f4       	brcc	.+18     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 418:	87 95       	ror	r24
 41a:	77 95       	ror	r23
 41c:	67 95       	ror	r22
 41e:	b7 95       	ror	r27
 420:	f7 95       	ror	r31
 422:	9e 3f       	cpi	r25, 0xFE	; 254
 424:	08 f0       	brcs	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 426:	b0 cf       	rjmp	.-160    	; 0x388 <__addsf3+0x28>
 428:	93 95       	inc	r25
 42a:	88 0f       	add	r24, r24
 42c:	08 f0       	brcs	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42e:	99 27       	eor	r25, r25
 430:	ee 0f       	add	r30, r30
 432:	97 95       	ror	r25
 434:	87 95       	ror	r24
 436:	08 95       	ret

00000438 <__fixsfsi>:
 438:	0e 94 23 02 	call	0x446	; 0x446 <__fixunssfsi>
 43c:	68 94       	set
 43e:	b1 11       	cpse	r27, r1
 440:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_szero>
 444:	08 95       	ret

00000446 <__fixunssfsi>:
 446:	0e 94 bf 02 	call	0x57e	; 0x57e <__fp_splitA>
 44a:	88 f0       	brcs	.+34     	; 0x46e <__fixunssfsi+0x28>
 44c:	9f 57       	subi	r25, 0x7F	; 127
 44e:	98 f0       	brcs	.+38     	; 0x476 <__fixunssfsi+0x30>
 450:	b9 2f       	mov	r27, r25
 452:	99 27       	eor	r25, r25
 454:	b7 51       	subi	r27, 0x17	; 23
 456:	b0 f0       	brcs	.+44     	; 0x484 <__fixunssfsi+0x3e>
 458:	e1 f0       	breq	.+56     	; 0x492 <__fixunssfsi+0x4c>
 45a:	66 0f       	add	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	1a f0       	brmi	.+6      	; 0x46a <__fixunssfsi+0x24>
 464:	ba 95       	dec	r27
 466:	c9 f7       	brne	.-14     	; 0x45a <__fixunssfsi+0x14>
 468:	14 c0       	rjmp	.+40     	; 0x492 <__fixunssfsi+0x4c>
 46a:	b1 30       	cpi	r27, 0x01	; 1
 46c:	91 f0       	breq	.+36     	; 0x492 <__fixunssfsi+0x4c>
 46e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_zero>
 472:	b1 e0       	ldi	r27, 0x01	; 1
 474:	08 95       	ret
 476:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_zero>
 47a:	67 2f       	mov	r22, r23
 47c:	78 2f       	mov	r23, r24
 47e:	88 27       	eor	r24, r24
 480:	b8 5f       	subi	r27, 0xF8	; 248
 482:	39 f0       	breq	.+14     	; 0x492 <__fixunssfsi+0x4c>
 484:	b9 3f       	cpi	r27, 0xF9	; 249
 486:	cc f3       	brlt	.-14     	; 0x47a <__fixunssfsi+0x34>
 488:	86 95       	lsr	r24
 48a:	77 95       	ror	r23
 48c:	67 95       	ror	r22
 48e:	b3 95       	inc	r27
 490:	d9 f7       	brne	.-10     	; 0x488 <__fixunssfsi+0x42>
 492:	3e f4       	brtc	.+14     	; 0x4a2 <__fixunssfsi+0x5c>
 494:	90 95       	com	r25
 496:	80 95       	com	r24
 498:	70 95       	com	r23
 49a:	61 95       	neg	r22
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	8f 4f       	sbci	r24, 0xFF	; 255
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	08 95       	ret

000004a4 <__floatunsisf>:
 4a4:	e8 94       	clt
 4a6:	09 c0       	rjmp	.+18     	; 0x4ba <__floatsisf+0x12>

000004a8 <__floatsisf>:
 4a8:	97 fb       	bst	r25, 7
 4aa:	3e f4       	brtc	.+14     	; 0x4ba <__floatsisf+0x12>
 4ac:	90 95       	com	r25
 4ae:	80 95       	com	r24
 4b0:	70 95       	com	r23
 4b2:	61 95       	neg	r22
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	8f 4f       	sbci	r24, 0xFF	; 255
 4b8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ba:	99 23       	and	r25, r25
 4bc:	a9 f0       	breq	.+42     	; 0x4e8 <__floatsisf+0x40>
 4be:	f9 2f       	mov	r31, r25
 4c0:	96 e9       	ldi	r25, 0x96	; 150
 4c2:	bb 27       	eor	r27, r27
 4c4:	93 95       	inc	r25
 4c6:	f6 95       	lsr	r31
 4c8:	87 95       	ror	r24
 4ca:	77 95       	ror	r23
 4cc:	67 95       	ror	r22
 4ce:	b7 95       	ror	r27
 4d0:	f1 11       	cpse	r31, r1
 4d2:	f8 cf       	rjmp	.-16     	; 0x4c4 <__floatsisf+0x1c>
 4d4:	fa f4       	brpl	.+62     	; 0x514 <__floatsisf+0x6c>
 4d6:	bb 0f       	add	r27, r27
 4d8:	11 f4       	brne	.+4      	; 0x4de <__floatsisf+0x36>
 4da:	60 ff       	sbrs	r22, 0
 4dc:	1b c0       	rjmp	.+54     	; 0x514 <__floatsisf+0x6c>
 4de:	6f 5f       	subi	r22, 0xFF	; 255
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	8f 4f       	sbci	r24, 0xFF	; 255
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	16 c0       	rjmp	.+44     	; 0x514 <__floatsisf+0x6c>
 4e8:	88 23       	and	r24, r24
 4ea:	11 f0       	breq	.+4      	; 0x4f0 <__floatsisf+0x48>
 4ec:	96 e9       	ldi	r25, 0x96	; 150
 4ee:	11 c0       	rjmp	.+34     	; 0x512 <__floatsisf+0x6a>
 4f0:	77 23       	and	r23, r23
 4f2:	21 f0       	breq	.+8      	; 0x4fc <__floatsisf+0x54>
 4f4:	9e e8       	ldi	r25, 0x8E	; 142
 4f6:	87 2f       	mov	r24, r23
 4f8:	76 2f       	mov	r23, r22
 4fa:	05 c0       	rjmp	.+10     	; 0x506 <__floatsisf+0x5e>
 4fc:	66 23       	and	r22, r22
 4fe:	71 f0       	breq	.+28     	; 0x51c <__floatsisf+0x74>
 500:	96 e8       	ldi	r25, 0x86	; 134
 502:	86 2f       	mov	r24, r22
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	2a f0       	brmi	.+10     	; 0x514 <__floatsisf+0x6c>
 50a:	9a 95       	dec	r25
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	da f7       	brpl	.-10     	; 0x50a <__floatsisf+0x62>
 514:	88 0f       	add	r24, r24
 516:	96 95       	lsr	r25
 518:	87 95       	ror	r24
 51a:	97 f9       	bld	r25, 7
 51c:	08 95       	ret

0000051e <__fp_inf>:
 51e:	97 f9       	bld	r25, 7
 520:	9f 67       	ori	r25, 0x7F	; 127
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	08 95       	ret

0000052a <__fp_nan>:
 52a:	9f ef       	ldi	r25, 0xFF	; 255
 52c:	80 ec       	ldi	r24, 0xC0	; 192
 52e:	08 95       	ret

00000530 <__fp_pscA>:
 530:	00 24       	eor	r0, r0
 532:	0a 94       	dec	r0
 534:	16 16       	cp	r1, r22
 536:	17 06       	cpc	r1, r23
 538:	18 06       	cpc	r1, r24
 53a:	09 06       	cpc	r0, r25
 53c:	08 95       	ret

0000053e <__fp_pscB>:
 53e:	00 24       	eor	r0, r0
 540:	0a 94       	dec	r0
 542:	12 16       	cp	r1, r18
 544:	13 06       	cpc	r1, r19
 546:	14 06       	cpc	r1, r20
 548:	05 06       	cpc	r0, r21
 54a:	08 95       	ret

0000054c <__fp_round>:
 54c:	09 2e       	mov	r0, r25
 54e:	03 94       	inc	r0
 550:	00 0c       	add	r0, r0
 552:	11 f4       	brne	.+4      	; 0x558 <__fp_round+0xc>
 554:	88 23       	and	r24, r24
 556:	52 f0       	brmi	.+20     	; 0x56c <__fp_round+0x20>
 558:	bb 0f       	add	r27, r27
 55a:	40 f4       	brcc	.+16     	; 0x56c <__fp_round+0x20>
 55c:	bf 2b       	or	r27, r31
 55e:	11 f4       	brne	.+4      	; 0x564 <__fp_round+0x18>
 560:	60 ff       	sbrs	r22, 0
 562:	04 c0       	rjmp	.+8      	; 0x56c <__fp_round+0x20>
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	8f 4f       	sbci	r24, 0xFF	; 255
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	08 95       	ret

0000056e <__fp_split3>:
 56e:	57 fd       	sbrc	r21, 7
 570:	90 58       	subi	r25, 0x80	; 128
 572:	44 0f       	add	r20, r20
 574:	55 1f       	adc	r21, r21
 576:	59 f0       	breq	.+22     	; 0x58e <__fp_splitA+0x10>
 578:	5f 3f       	cpi	r21, 0xFF	; 255
 57a:	71 f0       	breq	.+28     	; 0x598 <__fp_splitA+0x1a>
 57c:	47 95       	ror	r20

0000057e <__fp_splitA>:
 57e:	88 0f       	add	r24, r24
 580:	97 fb       	bst	r25, 7
 582:	99 1f       	adc	r25, r25
 584:	61 f0       	breq	.+24     	; 0x59e <__fp_splitA+0x20>
 586:	9f 3f       	cpi	r25, 0xFF	; 255
 588:	79 f0       	breq	.+30     	; 0x5a8 <__fp_splitA+0x2a>
 58a:	87 95       	ror	r24
 58c:	08 95       	ret
 58e:	12 16       	cp	r1, r18
 590:	13 06       	cpc	r1, r19
 592:	14 06       	cpc	r1, r20
 594:	55 1f       	adc	r21, r21
 596:	f2 cf       	rjmp	.-28     	; 0x57c <__fp_split3+0xe>
 598:	46 95       	lsr	r20
 59a:	f1 df       	rcall	.-30     	; 0x57e <__fp_splitA>
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <__fp_splitA+0x30>
 59e:	16 16       	cp	r1, r22
 5a0:	17 06       	cpc	r1, r23
 5a2:	18 06       	cpc	r1, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	f1 cf       	rjmp	.-30     	; 0x58a <__fp_splitA+0xc>
 5a8:	86 95       	lsr	r24
 5aa:	71 05       	cpc	r23, r1
 5ac:	61 05       	cpc	r22, r1
 5ae:	08 94       	sec
 5b0:	08 95       	ret

000005b2 <__fp_zero>:
 5b2:	e8 94       	clt

000005b4 <__fp_szero>:
 5b4:	bb 27       	eor	r27, r27
 5b6:	66 27       	eor	r22, r22
 5b8:	77 27       	eor	r23, r23
 5ba:	cb 01       	movw	r24, r22
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret

000005c0 <__mulsf3>:
 5c0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__mulsf3x>
 5c4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_round>
 5c8:	0e 94 98 02 	call	0x530	; 0x530 <__fp_pscA>
 5cc:	38 f0       	brcs	.+14     	; 0x5dc <__mulsf3+0x1c>
 5ce:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_pscB>
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <__mulsf3+0x1c>
 5d4:	95 23       	and	r25, r21
 5d6:	11 f0       	breq	.+4      	; 0x5dc <__mulsf3+0x1c>
 5d8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_inf>
 5dc:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_nan>
 5e0:	11 24       	eor	r1, r1
 5e2:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_szero>

000005e6 <__mulsf3x>:
 5e6:	0e 94 b7 02 	call	0x56e	; 0x56e <__fp_split3>
 5ea:	70 f3       	brcs	.-36     	; 0x5c8 <__mulsf3+0x8>

000005ec <__mulsf3_pse>:
 5ec:	95 9f       	mul	r25, r21
 5ee:	c1 f3       	breq	.-16     	; 0x5e0 <__mulsf3+0x20>
 5f0:	95 0f       	add	r25, r21
 5f2:	50 e0       	ldi	r21, 0x00	; 0
 5f4:	55 1f       	adc	r21, r21
 5f6:	62 9f       	mul	r22, r18
 5f8:	f0 01       	movw	r30, r0
 5fa:	72 9f       	mul	r23, r18
 5fc:	bb 27       	eor	r27, r27
 5fe:	f0 0d       	add	r31, r0
 600:	b1 1d       	adc	r27, r1
 602:	63 9f       	mul	r22, r19
 604:	aa 27       	eor	r26, r26
 606:	f0 0d       	add	r31, r0
 608:	b1 1d       	adc	r27, r1
 60a:	aa 1f       	adc	r26, r26
 60c:	64 9f       	mul	r22, r20
 60e:	66 27       	eor	r22, r22
 610:	b0 0d       	add	r27, r0
 612:	a1 1d       	adc	r26, r1
 614:	66 1f       	adc	r22, r22
 616:	82 9f       	mul	r24, r18
 618:	22 27       	eor	r18, r18
 61a:	b0 0d       	add	r27, r0
 61c:	a1 1d       	adc	r26, r1
 61e:	62 1f       	adc	r22, r18
 620:	73 9f       	mul	r23, r19
 622:	b0 0d       	add	r27, r0
 624:	a1 1d       	adc	r26, r1
 626:	62 1f       	adc	r22, r18
 628:	83 9f       	mul	r24, r19
 62a:	a0 0d       	add	r26, r0
 62c:	61 1d       	adc	r22, r1
 62e:	22 1f       	adc	r18, r18
 630:	74 9f       	mul	r23, r20
 632:	33 27       	eor	r19, r19
 634:	a0 0d       	add	r26, r0
 636:	61 1d       	adc	r22, r1
 638:	23 1f       	adc	r18, r19
 63a:	84 9f       	mul	r24, r20
 63c:	60 0d       	add	r22, r0
 63e:	21 1d       	adc	r18, r1
 640:	82 2f       	mov	r24, r18
 642:	76 2f       	mov	r23, r22
 644:	6a 2f       	mov	r22, r26
 646:	11 24       	eor	r1, r1
 648:	9f 57       	subi	r25, 0x7F	; 127
 64a:	50 40       	sbci	r21, 0x00	; 0
 64c:	9a f0       	brmi	.+38     	; 0x674 <__mulsf3_pse+0x88>
 64e:	f1 f0       	breq	.+60     	; 0x68c <__mulsf3_pse+0xa0>
 650:	88 23       	and	r24, r24
 652:	4a f0       	brmi	.+18     	; 0x666 <__mulsf3_pse+0x7a>
 654:	ee 0f       	add	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	bb 1f       	adc	r27, r27
 65a:	66 1f       	adc	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	91 50       	subi	r25, 0x01	; 1
 662:	50 40       	sbci	r21, 0x00	; 0
 664:	a9 f7       	brne	.-22     	; 0x650 <__mulsf3_pse+0x64>
 666:	9e 3f       	cpi	r25, 0xFE	; 254
 668:	51 05       	cpc	r21, r1
 66a:	80 f0       	brcs	.+32     	; 0x68c <__mulsf3_pse+0xa0>
 66c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_inf>
 670:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_szero>
 674:	5f 3f       	cpi	r21, 0xFF	; 255
 676:	e4 f3       	brlt	.-8      	; 0x670 <__mulsf3_pse+0x84>
 678:	98 3e       	cpi	r25, 0xE8	; 232
 67a:	d4 f3       	brlt	.-12     	; 0x670 <__mulsf3_pse+0x84>
 67c:	86 95       	lsr	r24
 67e:	77 95       	ror	r23
 680:	67 95       	ror	r22
 682:	b7 95       	ror	r27
 684:	f7 95       	ror	r31
 686:	e7 95       	ror	r30
 688:	9f 5f       	subi	r25, 0xFF	; 255
 68a:	c1 f7       	brne	.-16     	; 0x67c <__mulsf3_pse+0x90>
 68c:	fe 2b       	or	r31, r30
 68e:	88 0f       	add	r24, r24
 690:	91 1d       	adc	r25, r1
 692:	96 95       	lsr	r25
 694:	87 95       	ror	r24
 696:	97 f9       	bld	r25, 7
 698:	08 95       	ret

0000069a <__divmodhi4>:
 69a:	97 fb       	bst	r25, 7
 69c:	07 2e       	mov	r0, r23
 69e:	16 f4       	brtc	.+4      	; 0x6a4 <__divmodhi4+0xa>
 6a0:	00 94       	com	r0
 6a2:	07 d0       	rcall	.+14     	; 0x6b2 <__divmodhi4_neg1>
 6a4:	77 fd       	sbrc	r23, 7
 6a6:	09 d0       	rcall	.+18     	; 0x6ba <__divmodhi4_neg2>
 6a8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__udivmodhi4>
 6ac:	07 fc       	sbrc	r0, 7
 6ae:	05 d0       	rcall	.+10     	; 0x6ba <__divmodhi4_neg2>
 6b0:	3e f4       	brtc	.+14     	; 0x6c0 <__divmodhi4_exit>

000006b2 <__divmodhi4_neg1>:
 6b2:	90 95       	com	r25
 6b4:	81 95       	neg	r24
 6b6:	9f 4f       	sbci	r25, 0xFF	; 255
 6b8:	08 95       	ret

000006ba <__divmodhi4_neg2>:
 6ba:	70 95       	com	r23
 6bc:	61 95       	neg	r22
 6be:	7f 4f       	sbci	r23, 0xFF	; 255

000006c0 <__divmodhi4_exit>:
 6c0:	08 95       	ret

000006c2 <__udivmodhi4>:
 6c2:	aa 1b       	sub	r26, r26
 6c4:	bb 1b       	sub	r27, r27
 6c6:	51 e1       	ldi	r21, 0x11	; 17
 6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <__udivmodhi4_ep>

000006ca <__udivmodhi4_loop>:
 6ca:	aa 1f       	adc	r26, r26
 6cc:	bb 1f       	adc	r27, r27
 6ce:	a6 17       	cp	r26, r22
 6d0:	b7 07       	cpc	r27, r23
 6d2:	10 f0       	brcs	.+4      	; 0x6d8 <__udivmodhi4_ep>
 6d4:	a6 1b       	sub	r26, r22
 6d6:	b7 0b       	sbc	r27, r23

000006d8 <__udivmodhi4_ep>:
 6d8:	88 1f       	adc	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	5a 95       	dec	r21
 6de:	a9 f7       	brne	.-22     	; 0x6ca <__udivmodhi4_loop>
 6e0:	80 95       	com	r24
 6e2:	90 95       	com	r25
 6e4:	bc 01       	movw	r22, r24
 6e6:	cd 01       	movw	r24, r26
 6e8:	08 95       	ret

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
