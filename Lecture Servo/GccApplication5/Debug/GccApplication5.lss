
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000973  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000862  00000000  00000000  00000c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000340  00000000  00000000  00001491  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c1  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b8  00000000  00000000  00001d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001dc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	32 c0       	rjmp	.+100    	; 0xae <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	51 d0       	rcall	.+162    	; 0x14c <main>
  aa:	78 c0       	rjmp	.+240    	; 0x19c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_18>:
volatile uint16_t Overflows;



ISR(TIMER0_OVF_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	Overflows++;
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if((PINC & 0x01) == 0x01) // If the output is high
  d4:	30 9b       	sbis	0x06, 0	; 6
  d6:	14 c0       	rjmp	.+40     	; 0x100 <__vector_18+0x52>
	{
		if(Overflows >= (62*time_delay)) // 1 or 2 ms has elapsed
  d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time_delay>
  dc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <time_delay+0x1>
  e0:	4e e3       	ldi	r20, 0x3E	; 62
  e2:	48 9f       	mul	r20, r24
  e4:	90 01       	movw	r18, r0
  e6:	49 9f       	mul	r20, r25
  e8:	30 0d       	add	r19, r0
  ea:	11 24       	eor	r1, r1
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	82 17       	cp	r24, r18
  f6:	93 07       	cpc	r25, r19
  f8:	18 f0       	brcs	.+6      	; 0x100 <__vector_18+0x52>
		{
			PORTC &= ~(1<<PORTC0); // Turn the output low
  fa:	88 b1       	in	r24, 0x08	; 8
  fc:	8e 7f       	andi	r24, 0xFE	; 254
  fe:	88 b9       	out	0x08, r24	; 8
		}
	}
	if((PINC & 0x01) == 0x00)  // If the output is low
 100:	30 99       	sbic	0x06, 0	; 6
 102:	0e c0       	rjmp	.+28     	; 0x120 <__vector_18+0x72>
	{
		if(Overflows >= (1249)) // 20 ms has elapsed
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	81 3e       	cpi	r24, 0xE1	; 225
 10e:	94 40       	sbci	r25, 0x04	; 4
 110:	38 f0       	brcs	.+14     	; 0x120 <__vector_18+0x72>
		{
			PORTC |= (1<<PORTC0); // Turn the output high
 112:	88 b1       	in	r24, 0x08	; 8
 114:	81 60       	ori	r24, 0x01	; 1
 116:	88 b9       	out	0x08, r24	; 8
			Overflows = 0; // Reset overflows
 118:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	
}
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	4f 91       	pop	r20
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <_Z11setServoMaxv>:


void setServoMax()
{
	time_delay = 2;
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <time_delay+0x1>
 13c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time_delay>
 140:	08 95       	ret

00000142 <_Z11setServoMinv>:
}

void setServoMin()
{
	time_delay = 0;
 142:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <time_delay+0x1>
 146:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time_delay>
 14a:	08 95       	ret

0000014c <main>:
}

int main(void)
{
	DDRC = 0b11111111;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	87 b9       	out	0x07, r24	; 7
	//DDRB = 0b00000001;
	
	
	// Timer 0 for my servo
	TCNT0 = 0;
 150:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1<<CS00);
 152:	85 b5       	in	r24, 0x25	; 37
 154:	81 60       	ori	r24, 0x01	; 1
 156:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);
 158:	ee e6       	ldi	r30, 0x6E	; 110
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	80 83       	st	Z, r24
	
	// Timer 1 for calculating the time
	TCNT0 = 0;
 162:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1<<CS00);
 164:	85 b5       	in	r24, 0x25	; 37
 166:	81 60       	ori	r24, 0x01	; 1
 168:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);
 16a:	80 81       	ld	r24, Z
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	80 83       	st	Z, r24
	
	sei();
 170:	78 94       	sei
    while (1) 
    {
		setServoMax();
 172:	e0 df       	rcall	.-64     	; 0x134 <_Z11setServoMaxv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	83 ed       	ldi	r24, 0xD3	; 211
 178:	90 e3       	ldi	r25, 0x30	; 48
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x2e>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x38>
		_delay_ms(1000);
		setServoMin();
 184:	00 00       	nop
 186:	dd df       	rcall	.-70     	; 0x142 <_Z11setServoMinv>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	83 ed       	ldi	r24, 0xD3	; 211
 18c:	90 e3       	ldi	r25, 0x30	; 48
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x42>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x4c>
 198:	00 00       	nop
 19a:	eb cf       	rjmp	.-42     	; 0x172 <main+0x26>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
