
Timers lesson.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075b  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  00000a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002db  00000000  00000000  00001049  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c4  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001805  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  9e:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:

void tim0Setup(void)
{
	TCNT0   = 0;
	TCCR0B |= (1<<CS02)|(1<<CS00);   // Sets the pre-scaler
	TIMSK0 |= (1<<TOIE0);			 // Enables overflow
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counterTimer0>
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counterTimer0>
  bc:	8c 33       	cpi	r24, 0x3C	; 60
  be:	48 f0       	brcs	.+18     	; 0xd2 <__vector_16+0x2c>
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c4:	88 23       	and	r24, r24
  c6:	29 f0       	breq	.+10     	; 0xd2 <__vector_16+0x2c>
  c8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counterTimer0>
  cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  d0:	16 bc       	out	0x26, r1	; 38
  d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counterTimer0>
  d6:	8c 33       	cpi	r24, 0x3C	; 60
  d8:	50 f0       	brcs	.+20     	; 0xee <__vector_16+0x48>
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  de:	81 11       	cpse	r24, r1
  e0:	06 c0       	rjmp	.+12     	; 0xee <__vector_16+0x48>
  e2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counterTimer0>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	16 bc       	out	0x26, r1	; 38
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_11>:
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	95 b1       	in	r25, 0x05	; 5
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	89 27       	eor	r24, r25
 10e:	85 b9       	out	0x05, r24	; 5
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <gpioSetup>:
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	84 b9       	out	0x04, r24	; 4
 122:	08 95       	ret

00000124 <fastPwmSetup>:
 124:	e0 e8       	ldi	r30, 0x80	; 128
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	80 83       	st	Z, r24
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 134:	ef e6       	ldi	r30, 0x6F	; 111
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	80 83       	st	Z, r24
 13e:	8a e0       	ldi	r24, 0x0A	; 10
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 146:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 14a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 14e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 152:	08 95       	ret

00000154 <main>:
	OCR2A   = 99;
}*/

int main(void)
{
	gpioSetup();
 154:	0e 94 8f 00 	call	0x11e	; 0x11e <gpioSetup>
	fastPwmSetup();
 158:	0e 94 92 00 	call	0x124	; 0x124 <fastPwmSetup>
	//tim2Setup();
	// 2. Prescaler
		
	// 1. counter to 0
	//tim0Setup();
	sei();
 15c:	78 94       	sei
				
			
    while (1) 
    {
		if(tim0Flag)
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	88 23       	and	r24, r24
 164:	21 f0       	breq	.+8      	; 0x16e <main+0x1a>
			PORTB |= 1<<1;
 166:	85 b1       	in	r24, 0x05	; 5
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	85 b9       	out	0x05, r24	; 5
 16c:	f8 cf       	rjmp	.-16     	; 0x15e <main+0xa>
		else
			PORTB &= ~(1<<1);
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	8d 7f       	andi	r24, 0xFD	; 253
 172:	85 b9       	out	0x05, r24	; 5
 174:	f4 cf       	rjmp	.-24     	; 0x15e <main+0xa>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
